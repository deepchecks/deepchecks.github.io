
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "checks_gallery/vision/model_evaluation/plot_single_dataset_scalar_performance.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_checks_gallery_vision_model_evaluation_plot_single_dataset_scalar_performance.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_checks_gallery_vision_model_evaluation_plot_single_dataset_scalar_performance.py:


Single Dataset Scalar Performance
*********************************

This notebooks provides an overview for using and understanding single dataset scalar performance check.

**Structure:**

* `What Is the Purpose of the Check? <#what-is-the-purpose-of-the-check>`__
* `Generate data an model <#generate-data-and-model>`__
* `Run the check <#run-the-check>`__
* `Define a condition <#define-a-condition>`__

What Is the Purpose of the Check?
=================================
This check returns a metric result as a single scalar, which is especially useful for monitoring a model in production.

Some metrics return a single score, but others return a tensor of scores.

For example, Precision returns a tensor in the size of the number of classes. In that case, we will use a
reduce function - a function that aggregates the scores into a scalar.
In this example we use 'nanmean' that returns the mean over the classes, while ignoring NaNs.

.. GENERATED FROM PYTHON SOURCE LINES 27-29

Generate data and model
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 29-33

.. code-block:: default


    from deepchecks.vision.checks import SingleDatasetScalarPerformance
    from deepchecks.vision.datasets.classification import mnist








.. GENERATED FROM PYTHON SOURCE LINES 34-39

.. code-block:: default



    mnist_model = mnist.load_model()
    train_ds = mnist.load_dataset(train=True, object_type='VisionData')








.. GENERATED FROM PYTHON SOURCE LINES 40-47

Run the check
-------------
We will run the check with the model defined above.

The check will use the default classification metric -
`ignite.Accuracy <https://pytorch.org/ignite/generated/ignite.metrics.Accuracy.html>`__.
The default metric returns a scalar, therefore we will use the reduce function default - None.

.. GENERATED FROM PYTHON SOURCE LINES 47-53

.. code-block:: default



    check = SingleDatasetScalarPerformance()
    result = check.run(train_ds, mnist_model)
    result





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Validating Input:
    |     | 0/1 [00:00<?, ? /s]    Validating Input:
    |#####| 1/1 [00:00<00:00, 50.15 /s]
    Ingesting Batches:
    |                                                                                                                                                             | 0/157 [00:00<?, ? Batch/s]
    Ingesting Batches:
    |#############9                                                                                                                                               | 14/157 [00:00<00:01, 136.93 Batch/s]
    Ingesting Batches:
    |############################9                                                                                                                                | 29/157 [00:00<00:00, 141.37 Batch/s]
    Ingesting Batches:
    |############################################                                                                                                                 | 44/157 [00:00<00:00, 142.22 Batch/s]
    Ingesting Batches:
    |###########################################################                                                                                                  | 59/157 [00:00<00:00, 143.97 Batch/s]
    Ingesting Batches:
    |###########################################################################                                                                                  | 75/157 [00:00<00:00, 146.64 Batch/s]
    Ingesting Batches:
    |###########################################################################################                                                                  | 91/157 [00:00<00:00, 148.55 Batch/s]
    Ingesting Batches:
    |###########################################################################################################                                                  | 107/157 [00:00<00:00, 149.48 Batch/s]
    Ingesting Batches:
    |##########################################################################################################################                                   | 122/157 [00:00<00:00, 149.51 Batch/s]
    Ingesting Batches:
    |##########################################################################################################################################                   | 138/157 [00:00<00:00, 149.97 Batch/s]
    Ingesting Batches:
    |##########################################################################################################################################################   | 154/157 [00:01<00:00, 150.20 Batch/s]
    Ingesting Batches:
    |#############################################################################################################################################################| 157/157 [00:01<00:00, 150.20 Batch/s]

    Computing Check:
    |     | 0/1 [00:00<?, ? Check/s]

    Computing Check:
    |#####| 1/1 [00:00<00:00, 6087.52 Check/s]                                                     
                                                                                                                                                                                                                            

                                                               

.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <!--
        ~ ----------------------------------------------------------------------------
        ~ Copyright (C) 2021-2022 Deepchecks (https://www.deepchecks.com)
        ~
        ~ This file is part of Deepchecks.
        ~ Deepchecks is distributed under the terms of the GNU Affero General
        ~ Public License (version 3 or later).
        ~ You should have received a copy of the GNU Affero General Public License
        ~ along with Deepchecks.  If not, see <http://www.gnu.org/licenses/>.
        ~ ----------------------------------------------------------------------------
        ~
    -->
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Single Dataset Scalar Performance</title>
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
                font-size: 1rem;
                line-height: 1.5;
                color: #212529;
                text-align: left;
                max-width: 1200px;
                margin: auto;
            }

            div.nbinput.container div.prompt *,
            div.nboutput.container div.prompt *,
            div.nbinput.container div.input_area pre,
            div.nboutput.container div.output_area pre,
            div.nbinput.container div.input_area .highlight,
            div.nboutput.container div.output_area .highlight {
                border: none;
                padding: 0;
                margin: 0;
                box-shadow: none;
            }

            div.nbinput.container > div[class*=highlight],
            div.nboutput.container > div[class*=highlight] {
                margin: 0;
            }

            div.nbinput.container div.prompt *,
            div.nboutput.container div.prompt * {
                background: none;
            }

            div.nboutput.container div.output_area .highlight,
            div.nboutput.container div.output_area pre {
                background: unset;
            }

            div.nboutput.container div.output_area div.highlight {
                color: unset;  /* override Pygments text color */
            }

            /* avoid gaps between output lines */
            div.nboutput.container div[class*=highlight] pre {
                line-height: normal;
            }

            /* input/output containers */
            div.nbinput.container,
            div.nboutput.container {
                display: -webkit-flex;
                display: flex;
                align-items: flex-start;
                margin: 0;
                width: 100%;
            }
            @media (max-width: 540px) {
                div.nbinput.container,
                div.nboutput.container {
                    flex-direction: column;
                }
            }

            /* input container */
            div.nbinput.container {
                padding-top: 5px;
            }

            /* last container */
            div.nblast.container {
                padding-bottom: 5px;
            }

            /* input prompt */
            div.nbinput.container div.prompt pre {
                color: #307FC1;
            }

            /* output prompt */
            div.nboutput.container div.prompt pre {
                color: #BF5B3D;
            }

            /* all prompts */
            div.nbinput.container div.prompt,
            div.nboutput.container div.prompt {
                width: 4.5ex;
                padding-top: 5px;
                position: relative;
                user-select: none;
            }

            div.nbinput.container div.prompt > div,
            div.nboutput.container div.prompt > div {
                position: absolute;
                right: 0;
                margin-right: 0.3ex;
            }

            @media (max-width: 540px) {
                div.nbinput.container div.prompt,
                div.nboutput.container div.prompt {
                    width: unset;
                    text-align: left;
                    padding: 0.4em;
                }
                div.nboutput.container div.prompt.empty {
                    padding: 0;
                }

                div.nbinput.container div.prompt > div,
                div.nboutput.container div.prompt > div {
                    position: unset;
                }
            }

            /* disable scrollbars on prompts */
            div.nbinput.container div.prompt pre,
            div.nboutput.container div.prompt pre {
                overflow: hidden;
            }

            /* input/output area */
            div.nbinput.container div.input_area,
            div.nboutput.container div.output_area {
                -webkit-flex: 1;
                flex: 1;
                overflow: auto;
            }
            @media (max-width: 540px) {
                div.nbinput.container div.input_area,
                div.nboutput.container div.output_area {
                    width: 100%;
                }
            }

            /* input area */
            div.nbinput.container div.input_area {
                border: 1px solid #e0e0e0;
                border-radius: 2px;
                /*background: #f5f5f5;*/
            }

            /* override MathJax center alignment in output cells */
            div.nboutput.container div[class*=MathJax] {
                text-align: left !important;
            }

            /* override sphinx.ext.imgmath center alignment in output cells */
            div.nboutput.container div.math p {
                text-align: left;
            }

            /* standard error */
            div.nboutput.container div.output_area.stderr {
                background: #fdd;
            }

            /* ANSI colors */
            .ansi-black-fg { color: #3E424D; }
            .ansi-black-bg { background-color: #3E424D; }
            .ansi-black-intense-fg { color: #282C36; }
            .ansi-black-intense-bg { background-color: #282C36; }
            .ansi-red-fg { color: #E75C58; }
            .ansi-red-bg { background-color: #E75C58; }
            .ansi-red-intense-fg { color: #B22B31; }
            .ansi-red-intense-bg { background-color: #B22B31; }
            .ansi-green-fg { color: #00A250; }
            .ansi-green-bg { background-color: #00A250; }
            .ansi-green-intense-fg { color: #007427; }
            .ansi-green-intense-bg { background-color: #007427; }
            .ansi-yellow-fg { color: #DDB62B; }
            .ansi-yellow-bg { background-color: #DDB62B; }
            .ansi-yellow-intense-fg { color: #B27D12; }
            .ansi-yellow-intense-bg { background-color: #B27D12; }
            .ansi-blue-fg { color: #208FFB; }
            .ansi-blue-bg { background-color: #208FFB; }
            .ansi-blue-intense-fg { color: #0065CA; }
            .ansi-blue-intense-bg { background-color: #0065CA; }
            .ansi-magenta-fg { color: #D160C4; }
            .ansi-magenta-bg { background-color: #D160C4; }
            .ansi-magenta-intense-fg { color: #A03196; }
            .ansi-magenta-intense-bg { background-color: #A03196; }
            .ansi-cyan-fg { color: #60C6C8; }
            .ansi-cyan-bg { background-color: #60C6C8; }
            .ansi-cyan-intense-fg { color: #258F8F; }
            .ansi-cyan-intense-bg { background-color: #258F8F; }
            .ansi-white-fg { color: #C5C1B4; }
            .ansi-white-bg { background-color: #C5C1B4; }
            .ansi-white-intense-fg { color: #A1A6B2; }
            .ansi-white-intense-bg { background-color: #A1A6B2; }

            .ansi-default-inverse-fg { color: #FFFFFF; }
            .ansi-default-inverse-bg { background-color: #000000; }

            .ansi-bold { font-weight: bold; }
            .ansi-underline { text-decoration: underline; }


            div.nbinput.container div.input_area div[class*=highlight] > pre,
            div.nboutput.container div.output_area div[class*=highlight] > pre,
            div.nboutput.container div.output_area div[class*=highlight].math,
            div.nboutput.container div.output_area.rendered_html,
            div.nboutput.container div.output_area > div.output_javascript,
            div.nboutput.container div.output_area:not(.rendered_html) > img{
                padding: 5px;
                margin: 0;
            }

            /* fix copybtn overflow problem in chromium (needed for 'sphinx_copybutton') */
            div.nbinput.container div.input_area > div[class^='highlight'],
            div.nboutput.container div.output_area > div[class^='highlight']{
                overflow-y: hidden;
            }

            /* hide copybtn icon on prompts (needed for 'sphinx_copybutton') */
            .prompt .copybtn {
                display: none;
            }

            /* Some additional styling taken form the Jupyter notebook CSS */
            div.rendered_html table {
            border: none;
            border-collapse: collapse;
            border-spacing: 0;
            color: black;
            font-size: 12px;
            table-layout: fixed;
            }
            div.rendered_html thead {
            border-bottom: 1px solid black;
            vertical-align: bottom;
            }
            div.rendered_html tr,
            div.rendered_html th,
            div.rendered_html td {
            text-align: right;
            vertical-align: middle;
            padding: 0.5em 0.5em;
            line-height: normal;
            white-space: normal;
            max-width: none;
            border: none;
            }
            div.rendered_html th {
            font-weight: bold;
            }
            div.rendered_html tbody tr:nth-child(odd) {
            background: #f5f5f5;
            }
            div.rendered_html tbody tr:hover {
            background: rgba(66, 165, 245, 0.2);
            }
        </style>
        <script>
            (!window.navigator.onLine ? alert('needs internet connection') : '');
        </script>
    </head>
    <body>
    
    <script src="" crossorigin="anonymous"></script>
    <script type="application/vnd.jupyter.widget-state+json">
    {
      "version_major": 2,
      "version_minor": 0,
      "state": {
        "f2821286c6c34d6e833915b0739a7fbb": {
          "model_name": "VBoxModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [
              "rendered_html",
              "jp-RenderedHTMLCommon",
              "jp-RenderedHTML",
              "jp-OutputArea-output"
            ],
            "children": [
              "IPY_MODEL_0579704363734f2ba8158fdf129b0739",
              "IPY_MODEL_3261df278fa44b619961ed5a22cfc960",
              "IPY_MODEL_648211f7f1734682adbaadf2942d7408",
              "IPY_MODEL_162e1280c7d9472b8069053f694cd9ec"
            ],
            "layout": "IPY_MODEL_55466238a2764e8e9bb8bc208d36bace"
          }
        },
        "0579704363734f2ba8158fdf129b0739": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_317b6b2e2e0846259d5b2a7a02382816",
            "style": "IPY_MODEL_650f86ceff614c6180eeb07a43514a1c",
            "value": "<h4><b>Single Dataset Scalar Performance</b></h4>"
          }
        },
        "317b6b2e2e0846259d5b2a7a02382816": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "650f86ceff614c6180eeb07a43514a1c": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "3261df278fa44b619961ed5a22cfc960": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_036f30d8d1d74fb087fd9d52bbcaefa8",
            "style": "IPY_MODEL_c32a6309a07c4aaf965de14264291990",
            "value": "<p>Calculate a performance metric as a scalar for a given model and a given dataset.</p>"
          }
        },
        "036f30d8d1d74fb087fd9d52bbcaefa8": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "c32a6309a07c4aaf965de14264291990": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "648211f7f1734682adbaadf2942d7408": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_f228835061924e1b9b2ee60cdf884cef",
            "style": "IPY_MODEL_8b23abf505d142ff988ba279cd87263b"
          }
        },
        "f228835061924e1b9b2ee60cdf884cef": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "8b23abf505d142ff988ba279cd87263b": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "162e1280c7d9472b8069053f694cd9ec": {
          "model_name": "VBoxModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "children": [
              "IPY_MODEL_1d7693c62c6245b885adf3bd3df9a240",
              "IPY_MODEL_6309391882094c908b53a7ab75c1051b"
            ],
            "layout": "IPY_MODEL_4964fccf12dd4261a2190f3170e657f6"
          }
        },
        "1d7693c62c6245b885adf3bd3df9a240": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_40d0307d7e9849e78b5a9e28b31aeef8",
            "style": "IPY_MODEL_b69262ff0af64cb4a0fa41b13ff9f974",
            "value": "<h5><b>Additional Outputs</b></h5>"
          }
        },
        "40d0307d7e9849e78b5a9e28b31aeef8": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "b69262ff0af64cb4a0fa41b13ff9f974": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "6309391882094c908b53a7ab75c1051b": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_dda39f7b2c544b3988babc81e58d41b7",
            "style": "IPY_MODEL_f2fc824ce73b455fb196f124f31721a1",
            "value": "<div><p style=\"font-size:0.9em;line-height:1;\"><i>Note - data sampling: Data is sampled from the original dataset, running on 10000 samples out of 60000. Sample size can be controlled with the \"n_samples\" parameter.</i></p></div>"
          }
        },
        "dda39f7b2c544b3988babc81e58d41b7": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "f2fc824ce73b455fb196f124f31721a1": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "4964fccf12dd4261a2190f3170e657f6": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "55466238a2764e8e9bb8bc208d36bace": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        }
      }
    }
    </script>
    <script type="application/vnd.jupyter.widget-view+json">
    {"version_major": 2, "version_minor": 0, "model_id": "f2821286c6c34d6e833915b0739a7fbb"}
    </script>

    </body>
    </html>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 54-58

The result value is a dictionary with the following fields:
score - the actual result,
metric - the name of metric used
reduce - the name of the reduce function used.

.. GENERATED FROM PYTHON SOURCE LINES 58-60

.. code-block:: default

    result.value





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    {'score': 0.9847, 'metric': 'accuracy', 'reduce': None}



.. GENERATED FROM PYTHON SOURCE LINES 61-63

Now we will run a check with parameters, to use a metric and a reduce function different from the defaults.
We will also pass names for them, so that the return value will look neat.

.. GENERATED FROM PYTHON SOURCE LINES 63-70

.. code-block:: default

    from ignite.metrics import Precision
    from torch import nanmean

    check = SingleDatasetScalarPerformance(Precision(), nanmean, metric_name='precision', reduce_name='mean')
    result = check.run(train_ds, mnist_model)
    result.value





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Validating Input:
    |     | 0/1 [00:00<?, ? /s]    Validating Input:
    |#####| 1/1 [00:00<00:00, 51.07 /s]
    Ingesting Batches:
    |                                                                                                                                                             | 0/157 [00:00<?, ? Batch/s]
    Ingesting Batches:
    |###############                                                                                                                                              | 15/157 [00:00<00:00, 147.05 Batch/s]
    Ingesting Batches:
    |##############################                                                                                                                               | 30/157 [00:00<00:00, 147.95 Batch/s]
    Ingesting Batches:
    |##############################################                                                                                                               | 46/157 [00:00<00:00, 148.84 Batch/s]
    Ingesting Batches:
    |#############################################################                                                                                                | 61/157 [00:00<00:00, 149.04 Batch/s]
    Ingesting Batches:
    |############################################################################                                                                                 | 76/157 [00:00<00:00, 148.98 Batch/s]
    Ingesting Batches:
    |###########################################################################################                                                                  | 91/157 [00:00<00:00, 148.48 Batch/s]
    Ingesting Batches:
    |##########################################################################################################                                                   | 106/157 [00:00<00:00, 147.02 Batch/s]
    Ingesting Batches:
    |#########################################################################################################################                                    | 121/157 [00:00<00:00, 146.63 Batch/s]
    Ingesting Batches:
    |########################################################################################################################################                     | 136/157 [00:00<00:00, 146.15 Batch/s]
    Ingesting Batches:
    |#######################################################################################################################################################      | 151/157 [00:01<00:00, 143.53 Batch/s]
    Ingesting Batches:
    |#############################################################################################################################################################| 157/157 [00:01<00:00, 143.53 Batch/s]

    Computing Check:
    |     | 0/1 [00:00<?, ? Check/s]

    Computing Check:
    |#####| 1/1 [00:00<00:00, 378.72 Check/s]                                                     
                                                                                                                                                                                                                            

                                                              
    {'score': 0.9847259635448589, 'metric': 'precision', 'reduce': 'mean'}



.. GENERATED FROM PYTHON SOURCE LINES 71-76

Define a Condition
==================
We can define a condition to validate that our model performance score is above or below a certain threshold.
The condition is defined as a function that takes the results of the check as input and
returns a ConditionResult object.

.. GENERATED FROM PYTHON SOURCE LINES 76-83

.. code-block:: default


    check = SingleDatasetScalarPerformance()
    check.add_condition_greater_than(0.5)
    result = check.run(train_ds, mnist_model)
    result.show(show_additional_outputs=False)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Validating Input:
    |     | 0/1 [00:00<?, ? /s]    Validating Input:
    |#####| 1/1 [00:00<00:00, 52.03 /s]
    Ingesting Batches:
    |                                                                                                                                                             | 0/157 [00:00<?, ? Batch/s]
    Ingesting Batches:
    |###############                                                                                                                                              | 15/157 [00:00<00:00, 144.04 Batch/s]
    Ingesting Batches:
    |##############################                                                                                                                               | 30/157 [00:00<00:00, 146.55 Batch/s]
    Ingesting Batches:
    |#############################################                                                                                                                | 45/157 [00:00<00:00, 147.44 Batch/s]
    Ingesting Batches:
    |############################################################                                                                                                 | 60/157 [00:00<00:00, 147.51 Batch/s]
    Ingesting Batches:
    |###########################################################################                                                                                  | 75/157 [00:00<00:00, 147.08 Batch/s]
    Ingesting Batches:
    |##########################################################################################                                                                   | 90/157 [00:00<00:00, 146.49 Batch/s]
    Ingesting Batches:
    |#########################################################################################################                                                    | 105/157 [00:00<00:00, 145.74 Batch/s]
    Ingesting Batches:
    |########################################################################################################################                                     | 120/157 [00:00<00:00, 145.86 Batch/s]
    Ingesting Batches:
    |#######################################################################################################################################                      | 135/157 [00:00<00:00, 145.40 Batch/s]
    Ingesting Batches:
    |######################################################################################################################################################       | 150/157 [00:01<00:00, 145.30 Batch/s]
    Ingesting Batches:
    |#############################################################################################################################################################| 157/157 [00:01<00:00, 145.30 Batch/s]

    Computing Check:
    |     | 0/1 [00:00<?, ? Check/s]

    Computing Check:
    |#####| 1/1 [00:00<00:00, 6533.18 Check/s]                                                     
                                                                                                                                                                                                                            

                                                               

.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <!--
        ~ ----------------------------------------------------------------------------
        ~ Copyright (C) 2021-2022 Deepchecks (https://www.deepchecks.com)
        ~
        ~ This file is part of Deepchecks.
        ~ Deepchecks is distributed under the terms of the GNU Affero General
        ~ Public License (version 3 or later).
        ~ You should have received a copy of the GNU Affero General Public License
        ~ along with Deepchecks.  If not, see <http://www.gnu.org/licenses/>.
        ~ ----------------------------------------------------------------------------
        ~
    -->
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Single Dataset Scalar Performance</title>
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
                font-size: 1rem;
                line-height: 1.5;
                color: #212529;
                text-align: left;
                max-width: 1200px;
                margin: auto;
            }

            div.nbinput.container div.prompt *,
            div.nboutput.container div.prompt *,
            div.nbinput.container div.input_area pre,
            div.nboutput.container div.output_area pre,
            div.nbinput.container div.input_area .highlight,
            div.nboutput.container div.output_area .highlight {
                border: none;
                padding: 0;
                margin: 0;
                box-shadow: none;
            }

            div.nbinput.container > div[class*=highlight],
            div.nboutput.container > div[class*=highlight] {
                margin: 0;
            }

            div.nbinput.container div.prompt *,
            div.nboutput.container div.prompt * {
                background: none;
            }

            div.nboutput.container div.output_area .highlight,
            div.nboutput.container div.output_area pre {
                background: unset;
            }

            div.nboutput.container div.output_area div.highlight {
                color: unset;  /* override Pygments text color */
            }

            /* avoid gaps between output lines */
            div.nboutput.container div[class*=highlight] pre {
                line-height: normal;
            }

            /* input/output containers */
            div.nbinput.container,
            div.nboutput.container {
                display: -webkit-flex;
                display: flex;
                align-items: flex-start;
                margin: 0;
                width: 100%;
            }
            @media (max-width: 540px) {
                div.nbinput.container,
                div.nboutput.container {
                    flex-direction: column;
                }
            }

            /* input container */
            div.nbinput.container {
                padding-top: 5px;
            }

            /* last container */
            div.nblast.container {
                padding-bottom: 5px;
            }

            /* input prompt */
            div.nbinput.container div.prompt pre {
                color: #307FC1;
            }

            /* output prompt */
            div.nboutput.container div.prompt pre {
                color: #BF5B3D;
            }

            /* all prompts */
            div.nbinput.container div.prompt,
            div.nboutput.container div.prompt {
                width: 4.5ex;
                padding-top: 5px;
                position: relative;
                user-select: none;
            }

            div.nbinput.container div.prompt > div,
            div.nboutput.container div.prompt > div {
                position: absolute;
                right: 0;
                margin-right: 0.3ex;
            }

            @media (max-width: 540px) {
                div.nbinput.container div.prompt,
                div.nboutput.container div.prompt {
                    width: unset;
                    text-align: left;
                    padding: 0.4em;
                }
                div.nboutput.container div.prompt.empty {
                    padding: 0;
                }

                div.nbinput.container div.prompt > div,
                div.nboutput.container div.prompt > div {
                    position: unset;
                }
            }

            /* disable scrollbars on prompts */
            div.nbinput.container div.prompt pre,
            div.nboutput.container div.prompt pre {
                overflow: hidden;
            }

            /* input/output area */
            div.nbinput.container div.input_area,
            div.nboutput.container div.output_area {
                -webkit-flex: 1;
                flex: 1;
                overflow: auto;
            }
            @media (max-width: 540px) {
                div.nbinput.container div.input_area,
                div.nboutput.container div.output_area {
                    width: 100%;
                }
            }

            /* input area */
            div.nbinput.container div.input_area {
                border: 1px solid #e0e0e0;
                border-radius: 2px;
                /*background: #f5f5f5;*/
            }

            /* override MathJax center alignment in output cells */
            div.nboutput.container div[class*=MathJax] {
                text-align: left !important;
            }

            /* override sphinx.ext.imgmath center alignment in output cells */
            div.nboutput.container div.math p {
                text-align: left;
            }

            /* standard error */
            div.nboutput.container div.output_area.stderr {
                background: #fdd;
            }

            /* ANSI colors */
            .ansi-black-fg { color: #3E424D; }
            .ansi-black-bg { background-color: #3E424D; }
            .ansi-black-intense-fg { color: #282C36; }
            .ansi-black-intense-bg { background-color: #282C36; }
            .ansi-red-fg { color: #E75C58; }
            .ansi-red-bg { background-color: #E75C58; }
            .ansi-red-intense-fg { color: #B22B31; }
            .ansi-red-intense-bg { background-color: #B22B31; }
            .ansi-green-fg { color: #00A250; }
            .ansi-green-bg { background-color: #00A250; }
            .ansi-green-intense-fg { color: #007427; }
            .ansi-green-intense-bg { background-color: #007427; }
            .ansi-yellow-fg { color: #DDB62B; }
            .ansi-yellow-bg { background-color: #DDB62B; }
            .ansi-yellow-intense-fg { color: #B27D12; }
            .ansi-yellow-intense-bg { background-color: #B27D12; }
            .ansi-blue-fg { color: #208FFB; }
            .ansi-blue-bg { background-color: #208FFB; }
            .ansi-blue-intense-fg { color: #0065CA; }
            .ansi-blue-intense-bg { background-color: #0065CA; }
            .ansi-magenta-fg { color: #D160C4; }
            .ansi-magenta-bg { background-color: #D160C4; }
            .ansi-magenta-intense-fg { color: #A03196; }
            .ansi-magenta-intense-bg { background-color: #A03196; }
            .ansi-cyan-fg { color: #60C6C8; }
            .ansi-cyan-bg { background-color: #60C6C8; }
            .ansi-cyan-intense-fg { color: #258F8F; }
            .ansi-cyan-intense-bg { background-color: #258F8F; }
            .ansi-white-fg { color: #C5C1B4; }
            .ansi-white-bg { background-color: #C5C1B4; }
            .ansi-white-intense-fg { color: #A1A6B2; }
            .ansi-white-intense-bg { background-color: #A1A6B2; }

            .ansi-default-inverse-fg { color: #FFFFFF; }
            .ansi-default-inverse-bg { background-color: #000000; }

            .ansi-bold { font-weight: bold; }
            .ansi-underline { text-decoration: underline; }


            div.nbinput.container div.input_area div[class*=highlight] > pre,
            div.nboutput.container div.output_area div[class*=highlight] > pre,
            div.nboutput.container div.output_area div[class*=highlight].math,
            div.nboutput.container div.output_area.rendered_html,
            div.nboutput.container div.output_area > div.output_javascript,
            div.nboutput.container div.output_area:not(.rendered_html) > img{
                padding: 5px;
                margin: 0;
            }

            /* fix copybtn overflow problem in chromium (needed for 'sphinx_copybutton') */
            div.nbinput.container div.input_area > div[class^='highlight'],
            div.nboutput.container div.output_area > div[class^='highlight']{
                overflow-y: hidden;
            }

            /* hide copybtn icon on prompts (needed for 'sphinx_copybutton') */
            .prompt .copybtn {
                display: none;
            }

            /* Some additional styling taken form the Jupyter notebook CSS */
            div.rendered_html table {
            border: none;
            border-collapse: collapse;
            border-spacing: 0;
            color: black;
            font-size: 12px;
            table-layout: fixed;
            }
            div.rendered_html thead {
            border-bottom: 1px solid black;
            vertical-align: bottom;
            }
            div.rendered_html tr,
            div.rendered_html th,
            div.rendered_html td {
            text-align: right;
            vertical-align: middle;
            padding: 0.5em 0.5em;
            line-height: normal;
            white-space: normal;
            max-width: none;
            border: none;
            }
            div.rendered_html th {
            font-weight: bold;
            }
            div.rendered_html tbody tr:nth-child(odd) {
            background: #f5f5f5;
            }
            div.rendered_html tbody tr:hover {
            background: rgba(66, 165, 245, 0.2);
            }
        </style>
        <script>
            (!window.navigator.onLine ? alert('needs internet connection') : '');
        </script>
    </head>
    <body>
    

    <!-- Load require.js. Delete this if your page already loads require.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js" integrity="sha256-Ae2Vz/4ePdIu6ZyI/5ZGsYnb+m0JlOmKPjt6XZ9JJkA=" crossorigin="anonymous"></script>
    <script src="https://unpkg.com/@jupyter-widgets/html-manager@^0.20.1/dist/embed-amd.js" crossorigin="anonymous"></script>

    <script type="application/vnd.jupyter.widget-state+json">
    {
      "version_major": 2,
      "version_minor": 0,
      "state": {
        "3764309172ed4d74867d9c468e31d14e": {
          "model_name": "VBoxModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [
              "rendered_html",
              "jp-RenderedHTMLCommon",
              "jp-RenderedHTML",
              "jp-OutputArea-output"
            ],
            "children": [
              "IPY_MODEL_83e1a67b16ae47ad87d32beefafa9f04",
              "IPY_MODEL_3cb9c374c83b446e9360e08a1f5e822d",
              "IPY_MODEL_0a5fcdddbcf7486fb1e2b94f39a2c61c"
            ],
            "layout": "IPY_MODEL_5ec92387567543a99ec7fb9faf580e92"
          }
        },
        "83e1a67b16ae47ad87d32beefafa9f04": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_e7e4eec1754b4e95871003090f1b4f7c",
            "style": "IPY_MODEL_5d001caf0fbc4a0689a0536181d76d3d",
            "value": "<h4><b>Single Dataset Scalar Performance</b></h4>"
          }
        },
        "e7e4eec1754b4e95871003090f1b4f7c": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "5d001caf0fbc4a0689a0536181d76d3d": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "3cb9c374c83b446e9360e08a1f5e822d": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_45727966ef784cf582adb6444abdfb43",
            "style": "IPY_MODEL_f5bfbad6aa5d40a1b393138c221d6e06",
            "value": "<p>Calculate a performance metric as a scalar for a given model and a given dataset.</p>"
          }
        },
        "45727966ef784cf582adb6444abdfb43": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "f5bfbad6aa5d40a1b393138c221d6e06": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "0a5fcdddbcf7486fb1e2b94f39a2c61c": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_473f69b8884a4704a3090f60b6009ad2",
            "style": "IPY_MODEL_fb2d838393584056ab6bec47a5368677",
            "value": "<h5><b>Conditions Summary</b></h5><style type=\"text/css\">\n#T_e84b9_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_e84b9_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_e84b9_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_e84b9_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_e84b9_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_e84b9_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Status</th>\n      <th class=\"col_heading level0 col1\" >Condition</th>\n      <th class=\"col_heading level0 col2\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_e84b9_row0_col0\" class=\"data row0 col0\" ><div style=\"color: green;text-align: center\">\u2713</div></td>\n      <td id=\"T_e84b9_row0_col1\" class=\"data row0 col1\" >Score is greater than 0.5</td>\n      <td id=\"T_e84b9_row0_col2\" class=\"data row0 col2\" >The score accuracy is 0.9847</td>\n    </tr>\n  </tbody>\n</table>\n"
          }
        },
        "473f69b8884a4704a3090f60b6009ad2": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "fb2d838393584056ab6bec47a5368677": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "5ec92387567543a99ec7fb9faf580e92": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        }
      }
    }
    </script>
    <script type="application/vnd.jupyter.widget-view+json">
    {"version_major": 2, "version_minor": 0, "model_id": "3764309172ed4d74867d9c468e31d14e"}
    </script>

    </body>
    </html>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.366 seconds)


.. _sphx_glr_download_checks_gallery_vision_model_evaluation_plot_single_dataset_scalar_performance.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_single_dataset_scalar_performance.py <plot_single_dataset_scalar_performance.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_single_dataset_scalar_performance.ipynb <plot_single_dataset_scalar_performance.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
