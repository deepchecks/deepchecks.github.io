
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "checks_gallery/vision/model_evaluation/plot_single_dataset_scalar_performance.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_checks_gallery_vision_model_evaluation_plot_single_dataset_scalar_performance.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_checks_gallery_vision_model_evaluation_plot_single_dataset_scalar_performance.py:


Single Dataset Scalar Performance
*********************************

This notebooks provides an overview for using and understanding single dataset scalar performance check.

**Structure:**

* `What Is the Purpose of the Check? <#what-is-the-purpose-of-the-check>`__
* `Generate data an model <#generate-data-and-model>`__
* `Run the check <#run-the-check>`__
* `Define a condition <#define-a-condition>`__

What Is the Purpose of the Check?
=================================
This check returns a metric result as a single scalar, which is especially useful for monitoring a model in production.

Some metrics return a single score, but others return a tensor of scores.

For example, Precision returns a tensor in the size of the number of classes. In that case, we will use a
reduce function - a function that aggregates the scores into a scalar.
In this example we use 'nanmean' that returns the mean over the classes, while ignoring NaNs.

.. GENERATED FROM PYTHON SOURCE LINES 27-29

Generate data and model
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 29-33

.. code-block:: default


    from deepchecks.vision.checks import SingleDatasetScalarPerformance
    from deepchecks.vision.datasets.classification import mnist








.. GENERATED FROM PYTHON SOURCE LINES 34-39

.. code-block:: default



    mnist_model = mnist.load_model()
    train_ds = mnist.load_dataset(train=True, object_type='VisionData')








.. GENERATED FROM PYTHON SOURCE LINES 40-47

Run the check
-------------
We will run the check with the model defined above.

The check will use the default classification metric -
`ignite.Accuracy <https://pytorch.org/ignite/generated/ignite.metrics.Accuracy.html>`__.
The default metric returns a scalar, therefore we will use the reduce function default - None.

.. GENERATED FROM PYTHON SOURCE LINES 47-53

.. code-block:: default



    check = SingleDatasetScalarPerformance()
    result = check.run(train_ds, mnist_model)
    result





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Validating Input:
    |     | 0/1 [00:00<?, ? /s]    Validating Input:
    |#####| 1/1 [00:00<00:00, 51.27 /s]
    Ingesting Batches:
    |                                                                                                                                                             | 0/157 [00:00<?, ? Batch/s]
    Ingesting Batches:
    |################                                                                                                                                             | 16/157 [00:00<00:00, 151.60 Batch/s]
    Ingesting Batches:
    |################################                                                                                                                             | 32/157 [00:00<00:00, 156.31 Batch/s]
    Ingesting Batches:
    |################################################                                                                                                             | 48/157 [00:00<00:00, 157.59 Batch/s]
    Ingesting Batches:
    |################################################################                                                                                             | 64/157 [00:00<00:00, 158.37 Batch/s]
    Ingesting Batches:
    |################################################################################                                                                             | 80/157 [00:00<00:00, 158.88 Batch/s]
    Ingesting Batches:
    |################################################################################################                                                             | 96/157 [00:00<00:00, 158.65 Batch/s]
    Ingesting Batches:
    |###############################################################################################################9                                             | 112/157 [00:00<00:00, 158.93 Batch/s]
    Ingesting Batches:
    |################################################################################################################################                             | 128/157 [00:00<00:00, 159.16 Batch/s]
    Ingesting Batches:
    |################################################################################################################################################             | 144/157 [00:00<00:00, 159.31 Batch/s]
    Ingesting Batches:
    |#############################################################################################################################################################| 157/157 [00:00<00:00, 159.31 Batch/s]

    Computing Check:
    |     | 0/1 [00:00<?, ? Check/s]

    Computing Check:
    |#####| 1/1 [00:00<00:00, 5475.59 Check/s]                                                     
                                                                                                                                                                                                                            

                                                               

.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <!--
        ~ ----------------------------------------------------------------------------
        ~ Copyright (C) 2021-2022 Deepchecks (https://www.deepchecks.com)
        ~
        ~ This file is part of Deepchecks.
        ~ Deepchecks is distributed under the terms of the GNU Affero General
        ~ Public License (version 3 or later).
        ~ You should have received a copy of the GNU Affero General Public License
        ~ along with Deepchecks.  If not, see <http://www.gnu.org/licenses/>.
        ~ ----------------------------------------------------------------------------
        ~
    -->
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Single Dataset Scalar Performance</title>
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
                font-size: 1rem;
                line-height: 1.5;
                color: #212529;
                text-align: left;
                max-width: 1200px;
                margin: auto;
            }

            div.nbinput.container div.prompt *,
            div.nboutput.container div.prompt *,
            div.nbinput.container div.input_area pre,
            div.nboutput.container div.output_area pre,
            div.nbinput.container div.input_area .highlight,
            div.nboutput.container div.output_area .highlight {
                border: none;
                padding: 0;
                margin: 0;
                box-shadow: none;
            }

            div.nbinput.container > div[class*=highlight],
            div.nboutput.container > div[class*=highlight] {
                margin: 0;
            }

            div.nbinput.container div.prompt *,
            div.nboutput.container div.prompt * {
                background: none;
            }

            div.nboutput.container div.output_area .highlight,
            div.nboutput.container div.output_area pre {
                background: unset;
            }

            div.nboutput.container div.output_area div.highlight {
                color: unset;  /* override Pygments text color */
            }

            /* avoid gaps between output lines */
            div.nboutput.container div[class*=highlight] pre {
                line-height: normal;
            }

            /* input/output containers */
            div.nbinput.container,
            div.nboutput.container {
                display: -webkit-flex;
                display: flex;
                align-items: flex-start;
                margin: 0;
                width: 100%;
            }
            @media (max-width: 540px) {
                div.nbinput.container,
                div.nboutput.container {
                    flex-direction: column;
                }
            }

            /* input container */
            div.nbinput.container {
                padding-top: 5px;
            }

            /* last container */
            div.nblast.container {
                padding-bottom: 5px;
            }

            /* input prompt */
            div.nbinput.container div.prompt pre {
                color: #307FC1;
            }

            /* output prompt */
            div.nboutput.container div.prompt pre {
                color: #BF5B3D;
            }

            /* all prompts */
            div.nbinput.container div.prompt,
            div.nboutput.container div.prompt {
                width: 4.5ex;
                padding-top: 5px;
                position: relative;
                user-select: none;
            }

            div.nbinput.container div.prompt > div,
            div.nboutput.container div.prompt > div {
                position: absolute;
                right: 0;
                margin-right: 0.3ex;
            }

            @media (max-width: 540px) {
                div.nbinput.container div.prompt,
                div.nboutput.container div.prompt {
                    width: unset;
                    text-align: left;
                    padding: 0.4em;
                }
                div.nboutput.container div.prompt.empty {
                    padding: 0;
                }

                div.nbinput.container div.prompt > div,
                div.nboutput.container div.prompt > div {
                    position: unset;
                }
            }

            /* disable scrollbars on prompts */
            div.nbinput.container div.prompt pre,
            div.nboutput.container div.prompt pre {
                overflow: hidden;
            }

            /* input/output area */
            div.nbinput.container div.input_area,
            div.nboutput.container div.output_area {
                -webkit-flex: 1;
                flex: 1;
                overflow: auto;
            }
            @media (max-width: 540px) {
                div.nbinput.container div.input_area,
                div.nboutput.container div.output_area {
                    width: 100%;
                }
            }

            /* input area */
            div.nbinput.container div.input_area {
                border: 1px solid #e0e0e0;
                border-radius: 2px;
                /*background: #f5f5f5;*/
            }

            /* override MathJax center alignment in output cells */
            div.nboutput.container div[class*=MathJax] {
                text-align: left !important;
            }

            /* override sphinx.ext.imgmath center alignment in output cells */
            div.nboutput.container div.math p {
                text-align: left;
            }

            /* standard error */
            div.nboutput.container div.output_area.stderr {
                background: #fdd;
            }

            /* ANSI colors */
            .ansi-black-fg { color: #3E424D; }
            .ansi-black-bg { background-color: #3E424D; }
            .ansi-black-intense-fg { color: #282C36; }
            .ansi-black-intense-bg { background-color: #282C36; }
            .ansi-red-fg { color: #E75C58; }
            .ansi-red-bg { background-color: #E75C58; }
            .ansi-red-intense-fg { color: #B22B31; }
            .ansi-red-intense-bg { background-color: #B22B31; }
            .ansi-green-fg { color: #00A250; }
            .ansi-green-bg { background-color: #00A250; }
            .ansi-green-intense-fg { color: #007427; }
            .ansi-green-intense-bg { background-color: #007427; }
            .ansi-yellow-fg { color: #DDB62B; }
            .ansi-yellow-bg { background-color: #DDB62B; }
            .ansi-yellow-intense-fg { color: #B27D12; }
            .ansi-yellow-intense-bg { background-color: #B27D12; }
            .ansi-blue-fg { color: #208FFB; }
            .ansi-blue-bg { background-color: #208FFB; }
            .ansi-blue-intense-fg { color: #0065CA; }
            .ansi-blue-intense-bg { background-color: #0065CA; }
            .ansi-magenta-fg { color: #D160C4; }
            .ansi-magenta-bg { background-color: #D160C4; }
            .ansi-magenta-intense-fg { color: #A03196; }
            .ansi-magenta-intense-bg { background-color: #A03196; }
            .ansi-cyan-fg { color: #60C6C8; }
            .ansi-cyan-bg { background-color: #60C6C8; }
            .ansi-cyan-intense-fg { color: #258F8F; }
            .ansi-cyan-intense-bg { background-color: #258F8F; }
            .ansi-white-fg { color: #C5C1B4; }
            .ansi-white-bg { background-color: #C5C1B4; }
            .ansi-white-intense-fg { color: #A1A6B2; }
            .ansi-white-intense-bg { background-color: #A1A6B2; }

            .ansi-default-inverse-fg { color: #FFFFFF; }
            .ansi-default-inverse-bg { background-color: #000000; }

            .ansi-bold { font-weight: bold; }
            .ansi-underline { text-decoration: underline; }


            div.nbinput.container div.input_area div[class*=highlight] > pre,
            div.nboutput.container div.output_area div[class*=highlight] > pre,
            div.nboutput.container div.output_area div[class*=highlight].math,
            div.nboutput.container div.output_area.rendered_html,
            div.nboutput.container div.output_area > div.output_javascript,
            div.nboutput.container div.output_area:not(.rendered_html) > img{
                padding: 5px;
                margin: 0;
            }

            /* fix copybtn overflow problem in chromium (needed for 'sphinx_copybutton') */
            div.nbinput.container div.input_area > div[class^='highlight'],
            div.nboutput.container div.output_area > div[class^='highlight']{
                overflow-y: hidden;
            }

            /* hide copybtn icon on prompts (needed for 'sphinx_copybutton') */
            .prompt .copybtn {
                display: none;
            }

            /* Some additional styling taken form the Jupyter notebook CSS */
            div.rendered_html table {
            border: none;
            border-collapse: collapse;
            border-spacing: 0;
            color: black;
            font-size: 12px;
            table-layout: fixed;
            }
            div.rendered_html thead {
            border-bottom: 1px solid black;
            vertical-align: bottom;
            }
            div.rendered_html tr,
            div.rendered_html th,
            div.rendered_html td {
            text-align: right;
            vertical-align: middle;
            padding: 0.5em 0.5em;
            line-height: normal;
            white-space: normal;
            max-width: none;
            border: none;
            }
            div.rendered_html th {
            font-weight: bold;
            }
            div.rendered_html tbody tr:nth-child(odd) {
            background: #f5f5f5;
            }
            div.rendered_html tbody tr:hover {
            background: rgba(66, 165, 245, 0.2);
            }
        </style>
        <script>
            (!window.navigator.onLine ? alert('needs internet connection') : '');
        </script>
    </head>
    <body>
    
    <script src="" crossorigin="anonymous"></script>
    <script type="application/vnd.jupyter.widget-state+json">
    {
      "version_major": 2,
      "version_minor": 0,
      "state": {
        "e9a3c404d4144da6a07e13e73c05b43e": {
          "model_name": "VBoxModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [
              "rendered_html",
              "jp-RenderedHTMLCommon",
              "jp-RenderedHTML",
              "jp-OutputArea-output"
            ],
            "children": [
              "IPY_MODEL_ed3420a14a294015a4dea0d4c3d2dfd0",
              "IPY_MODEL_e4b66ba6476b459ca6ef623f39e453af",
              "IPY_MODEL_e0d2974fc9f64e229101999e3e754db1",
              "IPY_MODEL_96b7beec867546579921e5b98cbba8cb"
            ],
            "layout": "IPY_MODEL_39b22817d01741f1b07c38fab3aa7488"
          }
        },
        "ed3420a14a294015a4dea0d4c3d2dfd0": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_99a25bdaae1f4128a9142663111a74a6",
            "style": "IPY_MODEL_fba61fc12186440eb24aff2a79aac7a9",
            "value": "<h4><b>Single Dataset Scalar Performance</b></h4>"
          }
        },
        "99a25bdaae1f4128a9142663111a74a6": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "fba61fc12186440eb24aff2a79aac7a9": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "e4b66ba6476b459ca6ef623f39e453af": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_8019749d2cf84e88bd03604d94276583",
            "style": "IPY_MODEL_8d6919ddbc6f439ead2e7b1becbdb47a",
            "value": "<p>Calculate a performance metric as a scalar for a given model and a given dataset.</p>"
          }
        },
        "8019749d2cf84e88bd03604d94276583": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "8d6919ddbc6f439ead2e7b1becbdb47a": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "e0d2974fc9f64e229101999e3e754db1": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_05f1ded6ffaa44a8ab1d01e93e635f0a",
            "style": "IPY_MODEL_bf993b7d4e2e4400b3b6d6d59ee395ad"
          }
        },
        "05f1ded6ffaa44a8ab1d01e93e635f0a": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "bf993b7d4e2e4400b3b6d6d59ee395ad": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "96b7beec867546579921e5b98cbba8cb": {
          "model_name": "VBoxModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "children": [
              "IPY_MODEL_b5f9c4a22fe1411a85f8d618f04cd65c",
              "IPY_MODEL_b88057ec2758426aab39d8d03dd5ba92"
            ],
            "layout": "IPY_MODEL_b5f538f369604ce0998d76c299edd48e"
          }
        },
        "b5f9c4a22fe1411a85f8d618f04cd65c": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_df07bb8e84774c66b7eaf217de52e552",
            "style": "IPY_MODEL_3f51cef40d4749b5ac884422a45c5ba2",
            "value": "<h5><b>Additional Outputs</b></h5>"
          }
        },
        "df07bb8e84774c66b7eaf217de52e552": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "3f51cef40d4749b5ac884422a45c5ba2": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "b88057ec2758426aab39d8d03dd5ba92": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_9ece0f32828247c39ef23ecceb4fd79c",
            "style": "IPY_MODEL_f12b4e6845ba4a3d8632ecc91a1cf18a",
            "value": "<div><p style=\"font-size:0.9em;line-height:1;\"><i>Note - data sampling: Data is sampled from the original dataset, running on 10000 samples out of 60000. Sample size can be controlled with the \"n_samples\" parameter.</i></p></div>"
          }
        },
        "9ece0f32828247c39ef23ecceb4fd79c": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "f12b4e6845ba4a3d8632ecc91a1cf18a": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "b5f538f369604ce0998d76c299edd48e": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "39b22817d01741f1b07c38fab3aa7488": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        }
      }
    }
    </script>
    <script type="application/vnd.jupyter.widget-view+json">
    {"version_major": 2, "version_minor": 0, "model_id": "e9a3c404d4144da6a07e13e73c05b43e"}
    </script>

    </body>
    </html>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 54-58

The result value is a dictionary with the following fields:
score - the actual result,
metric - the name of metric used
reduce - the name of the reduce function used.

.. GENERATED FROM PYTHON SOURCE LINES 58-60

.. code-block:: default

    result.value





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    {'score': 0.9843, 'metric': 'accuracy', 'reduce': None}



.. GENERATED FROM PYTHON SOURCE LINES 61-63

Now we will run a check with parameters, to use a metric and a reduce function different from the defaults.
We will also pass names for them, so that the return value will look neat.

.. GENERATED FROM PYTHON SOURCE LINES 63-70

.. code-block:: default

    from ignite.metrics import Precision
    from torch import nanmean

    check = SingleDatasetScalarPerformance(Precision(), nanmean, metric_name='precision', reduce_name='mean')
    result = check.run(train_ds, mnist_model)
    result.value





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Validating Input:
    |     | 0/1 [00:00<?, ? /s]    Validating Input:
    |#####| 1/1 [00:00<00:00, 54.01 /s]
    Ingesting Batches:
    |                                                                                                                                                             | 0/157 [00:00<?, ? Batch/s]
    Ingesting Batches:
    |################                                                                                                                                             | 16/157 [00:00<00:00, 156.54 Batch/s]
    Ingesting Batches:
    |################################                                                                                                                             | 32/157 [00:00<00:00, 157.22 Batch/s]
    Ingesting Batches:
    |################################################                                                                                                             | 48/157 [00:00<00:00, 157.18 Batch/s]
    Ingesting Batches:
    |################################################################                                                                                             | 64/157 [00:00<00:00, 157.07 Batch/s]
    Ingesting Batches:
    |################################################################################                                                                             | 80/157 [00:00<00:00, 156.87 Batch/s]
    Ingesting Batches:
    |################################################################################################                                                             | 96/157 [00:00<00:00, 156.90 Batch/s]
    Ingesting Batches:
    |###############################################################################################################9                                             | 112/157 [00:00<00:00, 156.84 Batch/s]
    Ingesting Batches:
    |################################################################################################################################                             | 128/157 [00:00<00:00, 156.84 Batch/s]
    Ingesting Batches:
    |################################################################################################################################################             | 144/157 [00:00<00:00, 156.38 Batch/s]
    Ingesting Batches:
    |#############################################################################################################################################################| 157/157 [00:00<00:00, 156.38 Batch/s]

    Computing Check:
    |     | 0/1 [00:00<?, ? Check/s]

    Computing Check:
    |#####| 1/1 [00:00<00:00, 742.75 Check/s]                                                     
                                                                                                                                                                                                                            

                                                              
    {'score': 0.9843134109904053, 'metric': 'precision', 'reduce': 'mean'}



.. GENERATED FROM PYTHON SOURCE LINES 71-76

Define a Condition
==================
We can define a condition to validate that our model performance score is above or below a certain threshold.
The condition is defined as a function that takes the results of the check as input and
returns a ConditionResult object.

.. GENERATED FROM PYTHON SOURCE LINES 76-83

.. code-block:: default


    check = SingleDatasetScalarPerformance()
    check.add_condition_greater_than(0.5)
    result = check.run(train_ds, mnist_model)
    result.show(show_additional_outputs=False)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Validating Input:
    |     | 0/1 [00:00<?, ? /s]    Validating Input:
    |#####| 1/1 [00:00<00:00, 53.81 /s]
    Ingesting Batches:
    |                                                                                                                                                             | 0/157 [00:00<?, ? Batch/s]
    Ingesting Batches:
    |################                                                                                                                                             | 16/157 [00:00<00:00, 158.52 Batch/s]
    Ingesting Batches:
    |################################                                                                                                                             | 32/157 [00:00<00:00, 158.47 Batch/s]
    Ingesting Batches:
    |################################################                                                                                                             | 48/157 [00:00<00:00, 157.89 Batch/s]
    Ingesting Batches:
    |################################################################                                                                                             | 64/157 [00:00<00:00, 158.26 Batch/s]
    Ingesting Batches:
    |################################################################################                                                                             | 80/157 [00:00<00:00, 157.12 Batch/s]
    Ingesting Batches:
    |################################################################################################                                                             | 96/157 [00:00<00:00, 156.68 Batch/s]
    Ingesting Batches:
    |###############################################################################################################9                                             | 112/157 [00:00<00:00, 156.24 Batch/s]
    Ingesting Batches:
    |################################################################################################################################                             | 128/157 [00:00<00:00, 156.05 Batch/s]
    Ingesting Batches:
    |################################################################################################################################################             | 144/157 [00:00<00:00, 156.54 Batch/s]
    Ingesting Batches:
    |#############################################################################################################################################################| 157/157 [00:00<00:00, 156.54 Batch/s]

    Computing Check:
    |     | 0/1 [00:00<?, ? Check/s]

    Computing Check:
    |#####| 1/1 [00:00<00:00, 6204.59 Check/s]                                                     
                                                                                                                                                                                                                            

                                                               

.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <!--
        ~ ----------------------------------------------------------------------------
        ~ Copyright (C) 2021-2022 Deepchecks (https://www.deepchecks.com)
        ~
        ~ This file is part of Deepchecks.
        ~ Deepchecks is distributed under the terms of the GNU Affero General
        ~ Public License (version 3 or later).
        ~ You should have received a copy of the GNU Affero General Public License
        ~ along with Deepchecks.  If not, see <http://www.gnu.org/licenses/>.
        ~ ----------------------------------------------------------------------------
        ~
    -->
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Single Dataset Scalar Performance</title>
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
                font-size: 1rem;
                line-height: 1.5;
                color: #212529;
                text-align: left;
                max-width: 1200px;
                margin: auto;
            }

            div.nbinput.container div.prompt *,
            div.nboutput.container div.prompt *,
            div.nbinput.container div.input_area pre,
            div.nboutput.container div.output_area pre,
            div.nbinput.container div.input_area .highlight,
            div.nboutput.container div.output_area .highlight {
                border: none;
                padding: 0;
                margin: 0;
                box-shadow: none;
            }

            div.nbinput.container > div[class*=highlight],
            div.nboutput.container > div[class*=highlight] {
                margin: 0;
            }

            div.nbinput.container div.prompt *,
            div.nboutput.container div.prompt * {
                background: none;
            }

            div.nboutput.container div.output_area .highlight,
            div.nboutput.container div.output_area pre {
                background: unset;
            }

            div.nboutput.container div.output_area div.highlight {
                color: unset;  /* override Pygments text color */
            }

            /* avoid gaps between output lines */
            div.nboutput.container div[class*=highlight] pre {
                line-height: normal;
            }

            /* input/output containers */
            div.nbinput.container,
            div.nboutput.container {
                display: -webkit-flex;
                display: flex;
                align-items: flex-start;
                margin: 0;
                width: 100%;
            }
            @media (max-width: 540px) {
                div.nbinput.container,
                div.nboutput.container {
                    flex-direction: column;
                }
            }

            /* input container */
            div.nbinput.container {
                padding-top: 5px;
            }

            /* last container */
            div.nblast.container {
                padding-bottom: 5px;
            }

            /* input prompt */
            div.nbinput.container div.prompt pre {
                color: #307FC1;
            }

            /* output prompt */
            div.nboutput.container div.prompt pre {
                color: #BF5B3D;
            }

            /* all prompts */
            div.nbinput.container div.prompt,
            div.nboutput.container div.prompt {
                width: 4.5ex;
                padding-top: 5px;
                position: relative;
                user-select: none;
            }

            div.nbinput.container div.prompt > div,
            div.nboutput.container div.prompt > div {
                position: absolute;
                right: 0;
                margin-right: 0.3ex;
            }

            @media (max-width: 540px) {
                div.nbinput.container div.prompt,
                div.nboutput.container div.prompt {
                    width: unset;
                    text-align: left;
                    padding: 0.4em;
                }
                div.nboutput.container div.prompt.empty {
                    padding: 0;
                }

                div.nbinput.container div.prompt > div,
                div.nboutput.container div.prompt > div {
                    position: unset;
                }
            }

            /* disable scrollbars on prompts */
            div.nbinput.container div.prompt pre,
            div.nboutput.container div.prompt pre {
                overflow: hidden;
            }

            /* input/output area */
            div.nbinput.container div.input_area,
            div.nboutput.container div.output_area {
                -webkit-flex: 1;
                flex: 1;
                overflow: auto;
            }
            @media (max-width: 540px) {
                div.nbinput.container div.input_area,
                div.nboutput.container div.output_area {
                    width: 100%;
                }
            }

            /* input area */
            div.nbinput.container div.input_area {
                border: 1px solid #e0e0e0;
                border-radius: 2px;
                /*background: #f5f5f5;*/
            }

            /* override MathJax center alignment in output cells */
            div.nboutput.container div[class*=MathJax] {
                text-align: left !important;
            }

            /* override sphinx.ext.imgmath center alignment in output cells */
            div.nboutput.container div.math p {
                text-align: left;
            }

            /* standard error */
            div.nboutput.container div.output_area.stderr {
                background: #fdd;
            }

            /* ANSI colors */
            .ansi-black-fg { color: #3E424D; }
            .ansi-black-bg { background-color: #3E424D; }
            .ansi-black-intense-fg { color: #282C36; }
            .ansi-black-intense-bg { background-color: #282C36; }
            .ansi-red-fg { color: #E75C58; }
            .ansi-red-bg { background-color: #E75C58; }
            .ansi-red-intense-fg { color: #B22B31; }
            .ansi-red-intense-bg { background-color: #B22B31; }
            .ansi-green-fg { color: #00A250; }
            .ansi-green-bg { background-color: #00A250; }
            .ansi-green-intense-fg { color: #007427; }
            .ansi-green-intense-bg { background-color: #007427; }
            .ansi-yellow-fg { color: #DDB62B; }
            .ansi-yellow-bg { background-color: #DDB62B; }
            .ansi-yellow-intense-fg { color: #B27D12; }
            .ansi-yellow-intense-bg { background-color: #B27D12; }
            .ansi-blue-fg { color: #208FFB; }
            .ansi-blue-bg { background-color: #208FFB; }
            .ansi-blue-intense-fg { color: #0065CA; }
            .ansi-blue-intense-bg { background-color: #0065CA; }
            .ansi-magenta-fg { color: #D160C4; }
            .ansi-magenta-bg { background-color: #D160C4; }
            .ansi-magenta-intense-fg { color: #A03196; }
            .ansi-magenta-intense-bg { background-color: #A03196; }
            .ansi-cyan-fg { color: #60C6C8; }
            .ansi-cyan-bg { background-color: #60C6C8; }
            .ansi-cyan-intense-fg { color: #258F8F; }
            .ansi-cyan-intense-bg { background-color: #258F8F; }
            .ansi-white-fg { color: #C5C1B4; }
            .ansi-white-bg { background-color: #C5C1B4; }
            .ansi-white-intense-fg { color: #A1A6B2; }
            .ansi-white-intense-bg { background-color: #A1A6B2; }

            .ansi-default-inverse-fg { color: #FFFFFF; }
            .ansi-default-inverse-bg { background-color: #000000; }

            .ansi-bold { font-weight: bold; }
            .ansi-underline { text-decoration: underline; }


            div.nbinput.container div.input_area div[class*=highlight] > pre,
            div.nboutput.container div.output_area div[class*=highlight] > pre,
            div.nboutput.container div.output_area div[class*=highlight].math,
            div.nboutput.container div.output_area.rendered_html,
            div.nboutput.container div.output_area > div.output_javascript,
            div.nboutput.container div.output_area:not(.rendered_html) > img{
                padding: 5px;
                margin: 0;
            }

            /* fix copybtn overflow problem in chromium (needed for 'sphinx_copybutton') */
            div.nbinput.container div.input_area > div[class^='highlight'],
            div.nboutput.container div.output_area > div[class^='highlight']{
                overflow-y: hidden;
            }

            /* hide copybtn icon on prompts (needed for 'sphinx_copybutton') */
            .prompt .copybtn {
                display: none;
            }

            /* Some additional styling taken form the Jupyter notebook CSS */
            div.rendered_html table {
            border: none;
            border-collapse: collapse;
            border-spacing: 0;
            color: black;
            font-size: 12px;
            table-layout: fixed;
            }
            div.rendered_html thead {
            border-bottom: 1px solid black;
            vertical-align: bottom;
            }
            div.rendered_html tr,
            div.rendered_html th,
            div.rendered_html td {
            text-align: right;
            vertical-align: middle;
            padding: 0.5em 0.5em;
            line-height: normal;
            white-space: normal;
            max-width: none;
            border: none;
            }
            div.rendered_html th {
            font-weight: bold;
            }
            div.rendered_html tbody tr:nth-child(odd) {
            background: #f5f5f5;
            }
            div.rendered_html tbody tr:hover {
            background: rgba(66, 165, 245, 0.2);
            }
        </style>
        <script>
            (!window.navigator.onLine ? alert('needs internet connection') : '');
        </script>
    </head>
    <body>
    

    <!-- Load require.js. Delete this if your page already loads require.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js" integrity="sha256-Ae2Vz/4ePdIu6ZyI/5ZGsYnb+m0JlOmKPjt6XZ9JJkA=" crossorigin="anonymous"></script>
    <script src="https://unpkg.com/@jupyter-widgets/html-manager@^0.20.1/dist/embed-amd.js" crossorigin="anonymous"></script>

    <script type="application/vnd.jupyter.widget-state+json">
    {
      "version_major": 2,
      "version_minor": 0,
      "state": {
        "ce0b5cf85dcb4e45a801ec68c4bbe62d": {
          "model_name": "VBoxModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [
              "rendered_html",
              "jp-RenderedHTMLCommon",
              "jp-RenderedHTML",
              "jp-OutputArea-output"
            ],
            "children": [
              "IPY_MODEL_04aabc70b1fd458688648568d9d86097",
              "IPY_MODEL_675983b969c14101bfcb9e73bc35a6c7",
              "IPY_MODEL_e24a12c527b64137806894cadbcea962"
            ],
            "layout": "IPY_MODEL_93a1d8d7c24d453695be617b4821b561"
          }
        },
        "04aabc70b1fd458688648568d9d86097": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_8dd9458d4eef4e77b793753c9bf3c2eb",
            "style": "IPY_MODEL_b3d1fb0663ef4214ab88984edc9c510f",
            "value": "<h4><b>Single Dataset Scalar Performance</b></h4>"
          }
        },
        "8dd9458d4eef4e77b793753c9bf3c2eb": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "b3d1fb0663ef4214ab88984edc9c510f": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "675983b969c14101bfcb9e73bc35a6c7": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_d7f6908aefa141819aa18d71ae5918f4",
            "style": "IPY_MODEL_5288ae3afc054d088f6e460a4b60c4e9",
            "value": "<p>Calculate a performance metric as a scalar for a given model and a given dataset.</p>"
          }
        },
        "d7f6908aefa141819aa18d71ae5918f4": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "5288ae3afc054d088f6e460a4b60c4e9": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "e24a12c527b64137806894cadbcea962": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_90b7a800b6b74e2f995ab9911a2648df",
            "style": "IPY_MODEL_e1c4a936e96a457fb6fe9820f8dd1a67",
            "value": "<h5><b>Conditions Summary</b></h5><style type=\"text/css\">\n#T_3d44d_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_3d44d_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_3d44d_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_3d44d_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_3d44d_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_3d44d_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Status</th>\n      <th class=\"col_heading level0 col1\" >Condition</th>\n      <th class=\"col_heading level0 col2\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_3d44d_row0_col0\" class=\"data row0 col0\" ><div style=\"color: green;text-align: center\">\u2713</div></td>\n      <td id=\"T_3d44d_row0_col1\" class=\"data row0 col1\" >Score is greater than 0.5</td>\n      <td id=\"T_3d44d_row0_col2\" class=\"data row0 col2\" >The score accuracy is 0.9843</td>\n    </tr>\n  </tbody>\n</table>\n"
          }
        },
        "90b7a800b6b74e2f995ab9911a2648df": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "e1c4a936e96a457fb6fe9820f8dd1a67": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "93a1d8d7c24d453695be617b4821b561": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        }
      }
    }
    </script>
    <script type="application/vnd.jupyter.widget-view+json">
    {"version_major": 2, "version_minor": 0, "model_id": "ce0b5cf85dcb4e45a801ec68c4bbe62d"}
    </script>

    </body>
    </html>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.150 seconds)


.. _sphx_glr_download_checks_gallery_vision_model_evaluation_plot_single_dataset_scalar_performance.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_single_dataset_scalar_performance.py <plot_single_dataset_scalar_performance.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_single_dataset_scalar_performance.ipynb <plot_single_dataset_scalar_performance.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
