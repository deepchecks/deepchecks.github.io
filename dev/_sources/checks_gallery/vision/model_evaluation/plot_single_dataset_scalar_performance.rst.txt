
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "checks_gallery/vision/model_evaluation/plot_single_dataset_scalar_performance.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_checks_gallery_vision_model_evaluation_plot_single_dataset_scalar_performance.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_checks_gallery_vision_model_evaluation_plot_single_dataset_scalar_performance.py:


Single Dataset Scalar Performance
*********************************

This notebooks provides an overview for using and understanding single dataset scalar performance check.

**Structure:**

* `What Is the Purpose of the Check? <#what-is-the-purpose-of-the-check>`__
* `Generate data an model <#generate-data-and-model>`__
* `Run the check <#run-the-check>`__
* `Define a condition <#define-a-condition>`__

What Is the Purpose of the Check?
=================================
This check returns a metric result as a single scalar, which is especially useful for monitoring a model in production.

Some metrics return a single score, but others return a tensor of scores.

For example, Precision returns a tensor in the size of the number of classes. In that case, we will use a
reduce function - a function that aggregates the scores into a scalar.
In this example we use 'nanmean' that returns the mean over the classes, while ignoring NaNs.

.. GENERATED FROM PYTHON SOURCE LINES 27-29

Generate data and model
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 29-33

.. code-block:: default


    from deepchecks.vision.checks import SingleDatasetScalarPerformance
    from deepchecks.vision.datasets.classification import mnist








.. GENERATED FROM PYTHON SOURCE LINES 34-39

.. code-block:: default



    mnist_model = mnist.load_model()
    train_ds = mnist.load_dataset(train=True, object_type='VisionData')








.. GENERATED FROM PYTHON SOURCE LINES 40-47

Run the check
-------------
We will run the check with the model defined above.

The check will use the default classification metric -
`ignite.Accuracy <https://pytorch.org/ignite/generated/ignite.metrics.Accuracy.html>`__.
The default metric returns a scalar, therefore we will use the reduce function default - None.

.. GENERATED FROM PYTHON SOURCE LINES 47-53

.. code-block:: default



    check = SingleDatasetScalarPerformance()
    result = check.run(train_ds, mnist_model)
    result





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Validating Input:
    |     | 0/1 [00:00<?, ? /s]    Validating Input:
    |#####| 1/1 [00:00<00:00, 32.17 /s]
    Ingesting Batches:
    |                                                                                                                                                             | 0/157 [00:00<?, ? Batch/s]
    Ingesting Batches:
    |########                                                                                                                                                     | 8/157 [00:00<00:01, 76.79 Batch/s]
    Ingesting Batches:
    |################                                                                                                                                             | 16/157 [00:00<00:01, 78.41 Batch/s]
    Ingesting Batches:
    |#########################                                                                                                                                    | 25/157 [00:00<00:01, 81.97 Batch/s]
    Ingesting Batches:
    |##################################                                                                                                                           | 34/157 [00:00<00:01, 82.31 Batch/s]
    Ingesting Batches:
    |###########################################                                                                                                                  | 43/157 [00:00<00:01, 81.58 Batch/s]
    Ingesting Batches:
    |####################################################                                                                                                         | 52/157 [00:00<00:01, 83.21 Batch/s]
    Ingesting Batches:
    |#############################################################                                                                                                | 61/157 [00:00<00:01, 81.93 Batch/s]
    Ingesting Batches:
    |######################################################################                                                                                       | 70/157 [00:00<00:01, 83.51 Batch/s]
    Ingesting Batches:
    |###############################################################################                                                                              | 79/157 [00:00<00:00, 85.42 Batch/s]
    Ingesting Batches:
    |########################################################################################                                                                     | 88/157 [00:01<00:00, 85.96 Batch/s]
    Ingesting Batches:
    |#################################################################################################                                                            | 97/157 [00:01<00:00, 85.86 Batch/s]
    Ingesting Batches:
    |##########################################################################################################                                                   | 106/157 [00:01<00:00, 86.25 Batch/s]
    Ingesting Batches:
    |##################################################################################################################9                                          | 115/157 [00:01<00:00, 85.61 Batch/s]
    Ingesting Batches:
    |############################################################################################################################                                 | 124/157 [00:01<00:00, 84.36 Batch/s]
    Ingesting Batches:
    |#####################################################################################################################################                        | 133/157 [00:01<00:00, 81.92 Batch/s]
    Ingesting Batches:
    |##############################################################################################################################################               | 142/157 [00:01<00:00, 82.69 Batch/s]
    Ingesting Batches:
    |#######################################################################################################################################################      | 151/157 [00:01<00:00, 82.77 Batch/s]
    Ingesting Batches:
    |#############################################################################################################################################################| 157/157 [00:01<00:00, 82.77 Batch/s]

    Computing Check:
    |     | 0/1 [00:00<?, ? Check/s]

    Computing Check:
    |#####| 1/1 [00:00<00:00, 3618.90 Check/s]                                                     
                                                                                                                                                                                                                           

                                                               

.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <!--
        ~ ----------------------------------------------------------------------------
        ~ Copyright (C) 2021-2022 Deepchecks (https://www.deepchecks.com)
        ~
        ~ This file is part of Deepchecks.
        ~ Deepchecks is distributed under the terms of the GNU Affero General
        ~ Public License (version 3 or later).
        ~ You should have received a copy of the GNU Affero General Public License
        ~ along with Deepchecks.  If not, see <http://www.gnu.org/licenses/>.
        ~ ----------------------------------------------------------------------------
        ~
    -->
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Single Dataset Scalar Performance</title>
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
                font-size: 1rem;
                line-height: 1.5;
                color: #212529;
                text-align: left;
                max-width: 1200px;
                margin: auto;
            }

            div.nbinput.container div.prompt *,
            div.nboutput.container div.prompt *,
            div.nbinput.container div.input_area pre,
            div.nboutput.container div.output_area pre,
            div.nbinput.container div.input_area .highlight,
            div.nboutput.container div.output_area .highlight {
                border: none;
                padding: 0;
                margin: 0;
                box-shadow: none;
            }

            div.nbinput.container > div[class*=highlight],
            div.nboutput.container > div[class*=highlight] {
                margin: 0;
            }

            div.nbinput.container div.prompt *,
            div.nboutput.container div.prompt * {
                background: none;
            }

            div.nboutput.container div.output_area .highlight,
            div.nboutput.container div.output_area pre {
                background: unset;
            }

            div.nboutput.container div.output_area div.highlight {
                color: unset;  /* override Pygments text color */
            }

            /* avoid gaps between output lines */
            div.nboutput.container div[class*=highlight] pre {
                line-height: normal;
            }

            /* input/output containers */
            div.nbinput.container,
            div.nboutput.container {
                display: -webkit-flex;
                display: flex;
                align-items: flex-start;
                margin: 0;
                width: 100%;
            }
            @media (max-width: 540px) {
                div.nbinput.container,
                div.nboutput.container {
                    flex-direction: column;
                }
            }

            /* input container */
            div.nbinput.container {
                padding-top: 5px;
            }

            /* last container */
            div.nblast.container {
                padding-bottom: 5px;
            }

            /* input prompt */
            div.nbinput.container div.prompt pre {
                color: #307FC1;
            }

            /* output prompt */
            div.nboutput.container div.prompt pre {
                color: #BF5B3D;
            }

            /* all prompts */
            div.nbinput.container div.prompt,
            div.nboutput.container div.prompt {
                width: 4.5ex;
                padding-top: 5px;
                position: relative;
                user-select: none;
            }

            div.nbinput.container div.prompt > div,
            div.nboutput.container div.prompt > div {
                position: absolute;
                right: 0;
                margin-right: 0.3ex;
            }

            @media (max-width: 540px) {
                div.nbinput.container div.prompt,
                div.nboutput.container div.prompt {
                    width: unset;
                    text-align: left;
                    padding: 0.4em;
                }
                div.nboutput.container div.prompt.empty {
                    padding: 0;
                }

                div.nbinput.container div.prompt > div,
                div.nboutput.container div.prompt > div {
                    position: unset;
                }
            }

            /* disable scrollbars on prompts */
            div.nbinput.container div.prompt pre,
            div.nboutput.container div.prompt pre {
                overflow: hidden;
            }

            /* input/output area */
            div.nbinput.container div.input_area,
            div.nboutput.container div.output_area {
                -webkit-flex: 1;
                flex: 1;
                overflow: auto;
            }
            @media (max-width: 540px) {
                div.nbinput.container div.input_area,
                div.nboutput.container div.output_area {
                    width: 100%;
                }
            }

            /* input area */
            div.nbinput.container div.input_area {
                border: 1px solid #e0e0e0;
                border-radius: 2px;
                /*background: #f5f5f5;*/
            }

            /* override MathJax center alignment in output cells */
            div.nboutput.container div[class*=MathJax] {
                text-align: left !important;
            }

            /* override sphinx.ext.imgmath center alignment in output cells */
            div.nboutput.container div.math p {
                text-align: left;
            }

            /* standard error */
            div.nboutput.container div.output_area.stderr {
                background: #fdd;
            }

            /* ANSI colors */
            .ansi-black-fg { color: #3E424D; }
            .ansi-black-bg { background-color: #3E424D; }
            .ansi-black-intense-fg { color: #282C36; }
            .ansi-black-intense-bg { background-color: #282C36; }
            .ansi-red-fg { color: #E75C58; }
            .ansi-red-bg { background-color: #E75C58; }
            .ansi-red-intense-fg { color: #B22B31; }
            .ansi-red-intense-bg { background-color: #B22B31; }
            .ansi-green-fg { color: #00A250; }
            .ansi-green-bg { background-color: #00A250; }
            .ansi-green-intense-fg { color: #007427; }
            .ansi-green-intense-bg { background-color: #007427; }
            .ansi-yellow-fg { color: #DDB62B; }
            .ansi-yellow-bg { background-color: #DDB62B; }
            .ansi-yellow-intense-fg { color: #B27D12; }
            .ansi-yellow-intense-bg { background-color: #B27D12; }
            .ansi-blue-fg { color: #208FFB; }
            .ansi-blue-bg { background-color: #208FFB; }
            .ansi-blue-intense-fg { color: #0065CA; }
            .ansi-blue-intense-bg { background-color: #0065CA; }
            .ansi-magenta-fg { color: #D160C4; }
            .ansi-magenta-bg { background-color: #D160C4; }
            .ansi-magenta-intense-fg { color: #A03196; }
            .ansi-magenta-intense-bg { background-color: #A03196; }
            .ansi-cyan-fg { color: #60C6C8; }
            .ansi-cyan-bg { background-color: #60C6C8; }
            .ansi-cyan-intense-fg { color: #258F8F; }
            .ansi-cyan-intense-bg { background-color: #258F8F; }
            .ansi-white-fg { color: #C5C1B4; }
            .ansi-white-bg { background-color: #C5C1B4; }
            .ansi-white-intense-fg { color: #A1A6B2; }
            .ansi-white-intense-bg { background-color: #A1A6B2; }

            .ansi-default-inverse-fg { color: #FFFFFF; }
            .ansi-default-inverse-bg { background-color: #000000; }

            .ansi-bold { font-weight: bold; }
            .ansi-underline { text-decoration: underline; }


            div.nbinput.container div.input_area div[class*=highlight] > pre,
            div.nboutput.container div.output_area div[class*=highlight] > pre,
            div.nboutput.container div.output_area div[class*=highlight].math,
            div.nboutput.container div.output_area.rendered_html,
            div.nboutput.container div.output_area > div.output_javascript,
            div.nboutput.container div.output_area:not(.rendered_html) > img{
                padding: 5px;
                margin: 0;
            }

            /* fix copybtn overflow problem in chromium (needed for 'sphinx_copybutton') */
            div.nbinput.container div.input_area > div[class^='highlight'],
            div.nboutput.container div.output_area > div[class^='highlight']{
                overflow-y: hidden;
            }

            /* hide copybtn icon on prompts (needed for 'sphinx_copybutton') */
            .prompt .copybtn {
                display: none;
            }

            /* Some additional styling taken form the Jupyter notebook CSS */
            div.rendered_html table {
            border: none;
            border-collapse: collapse;
            border-spacing: 0;
            color: black;
            font-size: 12px;
            table-layout: fixed;
            }
            div.rendered_html thead {
            border-bottom: 1px solid black;
            vertical-align: bottom;
            }
            div.rendered_html tr,
            div.rendered_html th,
            div.rendered_html td {
            text-align: right;
            vertical-align: middle;
            padding: 0.5em 0.5em;
            line-height: normal;
            white-space: normal;
            max-width: none;
            border: none;
            }
            div.rendered_html th {
            font-weight: bold;
            }
            div.rendered_html tbody tr:nth-child(odd) {
            background: #f5f5f5;
            }
            div.rendered_html tbody tr:hover {
            background: rgba(66, 165, 245, 0.2);
            }
        </style>
        <script>
            (!window.navigator.onLine ? alert('needs internet connection') : '');
        </script>
    </head>
    <body>
    
    <script src="" crossorigin="anonymous"></script>
    <script type="application/vnd.jupyter.widget-state+json">
    {
      "version_major": 2,
      "version_minor": 0,
      "state": {
        "5802a1d264d046258b2f65992cc5de80": {
          "model_name": "VBoxModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [
              "rendered_html",
              "jp-RenderedHTMLCommon",
              "jp-RenderedHTML",
              "jp-OutputArea-output"
            ],
            "children": [
              "IPY_MODEL_8e7f16ee0a4f4393a29c3671fad55e81",
              "IPY_MODEL_5adac7445c474e7fb41710a250b1c6ee",
              "IPY_MODEL_727490769cbd48f8a2d8928002d81490",
              "IPY_MODEL_a3c58f94874b4f61bfc6c5480d5c4626"
            ],
            "layout": "IPY_MODEL_8f4e82be51fe4e29be5da23b2d6d9abc"
          }
        },
        "8e7f16ee0a4f4393a29c3671fad55e81": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_da344004cd85468795668b928948f640",
            "style": "IPY_MODEL_03c3f9b56c0348d6a4894c7c7f44d855",
            "value": "<h4><b>Single Dataset Scalar Performance</b></h4>"
          }
        },
        "da344004cd85468795668b928948f640": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "03c3f9b56c0348d6a4894c7c7f44d855": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "5adac7445c474e7fb41710a250b1c6ee": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_ec2c7963a0574bb2be41342c7c80e7be",
            "style": "IPY_MODEL_34c21ac6b6f34f3a9dd7f00fecfe331a",
            "value": "<p>Calculate a performance metric as a scalar for a given model and a given dataset.</p>"
          }
        },
        "ec2c7963a0574bb2be41342c7c80e7be": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "34c21ac6b6f34f3a9dd7f00fecfe331a": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "727490769cbd48f8a2d8928002d81490": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_2266dfc5b13544acb881c35945858726",
            "style": "IPY_MODEL_69c5387104d64b52bffc77f69894724f"
          }
        },
        "2266dfc5b13544acb881c35945858726": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "69c5387104d64b52bffc77f69894724f": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "a3c58f94874b4f61bfc6c5480d5c4626": {
          "model_name": "VBoxModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "children": [
              "IPY_MODEL_3297db56824d4a44b3ac9b3bb74970cf",
              "IPY_MODEL_f2b21cf2d5134c52a6cdbcdcb2e19fb6"
            ],
            "layout": "IPY_MODEL_4322ae0a2ddf492b8162606f41a53cb4"
          }
        },
        "3297db56824d4a44b3ac9b3bb74970cf": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_5f9d90d76cd44ca694532a45735ab58d",
            "style": "IPY_MODEL_48c5369343a64418ae422bdd4120251c",
            "value": "<h5><b>Additional Outputs</b></h5>"
          }
        },
        "5f9d90d76cd44ca694532a45735ab58d": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "48c5369343a64418ae422bdd4120251c": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "f2b21cf2d5134c52a6cdbcdcb2e19fb6": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_67b4652ed315405ba527f01937f4185c",
            "style": "IPY_MODEL_e550b5f26aa047e1a086f9af560a4aa7",
            "value": "<div><p style=\"font-size:0.9em;line-height:1;\"><i>Note - data sampling: Data is sampled from the original dataset, running on 10000 samples out of 60000. Sample size can be controlled with the \"n_samples\" parameter.</i></p></div>"
          }
        },
        "67b4652ed315405ba527f01937f4185c": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "e550b5f26aa047e1a086f9af560a4aa7": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "4322ae0a2ddf492b8162606f41a53cb4": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "8f4e82be51fe4e29be5da23b2d6d9abc": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        }
      }
    }
    </script>
    <script type="application/vnd.jupyter.widget-view+json">
    {"version_major": 2, "version_minor": 0, "model_id": "5802a1d264d046258b2f65992cc5de80"}
    </script>

    </body>
    </html>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 54-58

The result value is a dictionary with the following fields:
score - the actual result,
metric - the name of metric used
reduce - the name of the reduce function used.

.. GENERATED FROM PYTHON SOURCE LINES 58-60

.. code-block:: default

    result.value





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    {'score': 0.9825, 'metric': 'accuracy', 'reduce': None}



.. GENERATED FROM PYTHON SOURCE LINES 61-63

Now we will run a check with parameters, to use a metric and a reduce function different from the defaults.
We will also pass names for them, so that the return value will look neat.

.. GENERATED FROM PYTHON SOURCE LINES 63-70

.. code-block:: default

    from ignite.metrics import Precision
    from torch import nanmean

    check = SingleDatasetScalarPerformance(Precision(), nanmean, metric_name='precision', reduce_name='mean')
    result = check.run(train_ds, mnist_model)
    result.value





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Validating Input:
    |     | 0/1 [00:00<?, ? /s]    Validating Input:
    |#####| 1/1 [00:00<00:00, 34.62 /s]
    Ingesting Batches:
    |                                                                                                                                                             | 0/157 [00:00<?, ? Batch/s]
    Ingesting Batches:
    |#########                                                                                                                                                    | 9/157 [00:00<00:01, 81.60 Batch/s]
    Ingesting Batches:
    |##################                                                                                                                                           | 18/157 [00:00<00:01, 78.49 Batch/s]
    Ingesting Batches:
    |##########################                                                                                                                                   | 26/157 [00:00<00:01, 79.11 Batch/s]
    Ingesting Batches:
    |###################################                                                                                                                          | 35/157 [00:00<00:01, 80.55 Batch/s]
    Ingesting Batches:
    |############################################                                                                                                                 | 44/157 [00:00<00:01, 80.10 Batch/s]
    Ingesting Batches:
    |#####################################################                                                                                                        | 53/157 [00:00<00:01, 80.24 Batch/s]
    Ingesting Batches:
    |##############################################################                                                                                               | 62/157 [00:00<00:01, 79.94 Batch/s]
    Ingesting Batches:
    |#######################################################################                                                                                      | 71/157 [00:00<00:01, 80.31 Batch/s]
    Ingesting Batches:
    |################################################################################                                                                             | 80/157 [00:00<00:00, 80.55 Batch/s]
    Ingesting Batches:
    |#########################################################################################                                                                    | 89/157 [00:01<00:00, 79.70 Batch/s]
    Ingesting Batches:
    |##################################################################################################                                                           | 98/157 [00:01<00:00, 80.55 Batch/s]
    Ingesting Batches:
    |###########################################################################################################                                                  | 107/157 [00:01<00:00, 80.94 Batch/s]
    Ingesting Batches:
    |###################################################################################################################9                                         | 116/157 [00:01<00:00, 80.75 Batch/s]
    Ingesting Batches:
    |#############################################################################################################################                                | 125/157 [00:01<00:00, 78.35 Batch/s]
    Ingesting Batches:
    |#####################################################################################################################################                        | 133/157 [00:01<00:00, 78.59 Batch/s]
    Ingesting Batches:
    |##############################################################################################################################################               | 142/157 [00:01<00:00, 80.63 Batch/s]
    Ingesting Batches:
    |#######################################################################################################################################################      | 151/157 [00:01<00:00, 79.74 Batch/s]
    Ingesting Batches:
    |#############################################################################################################################################################| 157/157 [00:01<00:00, 79.74 Batch/s]

    Computing Check:
    |     | 0/1 [00:00<?, ? Check/s]

    Computing Check:
    |#####| 1/1 [00:00<00:00, 591.75 Check/s]                                                     
                                                                                                                                                                                                                           

                                                              
    {'score': 0.9825173512030684, 'metric': 'precision', 'reduce': 'mean'}



.. GENERATED FROM PYTHON SOURCE LINES 71-76

Define a Condition
==================
We can define a condition to validate that our model performance score is above or below a certain threshold.
The condition is defined as a function that takes the results of the check as input and
returns a ConditionResult object.

.. GENERATED FROM PYTHON SOURCE LINES 76-83

.. code-block:: default


    check = SingleDatasetScalarPerformance()
    check.add_condition_greater_than(0.5)
    result = check.run(train_ds, mnist_model)
    result.show(show_additional_outputs=False)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Validating Input:
    |     | 0/1 [00:00<?, ? /s]    Validating Input:
    |#####| 1/1 [00:00<00:00, 33.98 /s]
    Ingesting Batches:
    |                                                                                                                                                             | 0/157 [00:00<?, ? Batch/s]
    Ingesting Batches:
    |#########                                                                                                                                                    | 9/157 [00:00<00:01, 85.96 Batch/s]
    Ingesting Batches:
    |##################                                                                                                                                           | 18/157 [00:00<00:01, 84.69 Batch/s]
    Ingesting Batches:
    |###########################                                                                                                                                  | 27/157 [00:00<00:01, 83.46 Batch/s]
    Ingesting Batches:
    |####################################                                                                                                                         | 36/157 [00:00<00:01, 82.23 Batch/s]
    Ingesting Batches:
    |#############################################                                                                                                                | 45/157 [00:00<00:01, 82.19 Batch/s]
    Ingesting Batches:
    |######################################################                                                                                                       | 54/157 [00:00<00:01, 80.27 Batch/s]
    Ingesting Batches:
    |###############################################################                                                                                              | 63/157 [00:00<00:01, 77.04 Batch/s]
    Ingesting Batches:
    |########################################################################                                                                                     | 72/157 [00:00<00:01, 79.46 Batch/s]
    Ingesting Batches:
    |################################################################################                                                                             | 80/157 [00:00<00:00, 78.77 Batch/s]
    Ingesting Batches:
    |#########################################################################################                                                                    | 89/157 [00:01<00:00, 81.07 Batch/s]
    Ingesting Batches:
    |##################################################################################################                                                           | 98/157 [00:01<00:00, 80.25 Batch/s]
    Ingesting Batches:
    |###########################################################################################################                                                  | 107/157 [00:01<00:00, 78.79 Batch/s]
    Ingesting Batches:
    |###################################################################################################################9                                         | 116/157 [00:01<00:00, 81.13 Batch/s]
    Ingesting Batches:
    |#############################################################################################################################                                | 125/157 [00:01<00:00, 81.11 Batch/s]
    Ingesting Batches:
    |######################################################################################################################################                       | 134/157 [00:01<00:00, 80.34 Batch/s]
    Ingesting Batches:
    |###############################################################################################################################################              | 143/157 [00:01<00:00, 79.40 Batch/s]
    Ingesting Batches:
    |########################################################################################################################################################     | 152/157 [00:01<00:00, 81.13 Batch/s]
    Ingesting Batches:
    |#############################################################################################################################################################| 157/157 [00:01<00:00, 81.13 Batch/s]

    Computing Check:
    |     | 0/1 [00:00<?, ? Check/s]

    Computing Check:
    |#####| 1/1 [00:00<00:00, 4364.52 Check/s]                                                     
                                                                                                                                                                                                                           

                                                               

.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <!--
        ~ ----------------------------------------------------------------------------
        ~ Copyright (C) 2021-2022 Deepchecks (https://www.deepchecks.com)
        ~
        ~ This file is part of Deepchecks.
        ~ Deepchecks is distributed under the terms of the GNU Affero General
        ~ Public License (version 3 or later).
        ~ You should have received a copy of the GNU Affero General Public License
        ~ along with Deepchecks.  If not, see <http://www.gnu.org/licenses/>.
        ~ ----------------------------------------------------------------------------
        ~
    -->
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Single Dataset Scalar Performance</title>
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
                font-size: 1rem;
                line-height: 1.5;
                color: #212529;
                text-align: left;
                max-width: 1200px;
                margin: auto;
            }

            div.nbinput.container div.prompt *,
            div.nboutput.container div.prompt *,
            div.nbinput.container div.input_area pre,
            div.nboutput.container div.output_area pre,
            div.nbinput.container div.input_area .highlight,
            div.nboutput.container div.output_area .highlight {
                border: none;
                padding: 0;
                margin: 0;
                box-shadow: none;
            }

            div.nbinput.container > div[class*=highlight],
            div.nboutput.container > div[class*=highlight] {
                margin: 0;
            }

            div.nbinput.container div.prompt *,
            div.nboutput.container div.prompt * {
                background: none;
            }

            div.nboutput.container div.output_area .highlight,
            div.nboutput.container div.output_area pre {
                background: unset;
            }

            div.nboutput.container div.output_area div.highlight {
                color: unset;  /* override Pygments text color */
            }

            /* avoid gaps between output lines */
            div.nboutput.container div[class*=highlight] pre {
                line-height: normal;
            }

            /* input/output containers */
            div.nbinput.container,
            div.nboutput.container {
                display: -webkit-flex;
                display: flex;
                align-items: flex-start;
                margin: 0;
                width: 100%;
            }
            @media (max-width: 540px) {
                div.nbinput.container,
                div.nboutput.container {
                    flex-direction: column;
                }
            }

            /* input container */
            div.nbinput.container {
                padding-top: 5px;
            }

            /* last container */
            div.nblast.container {
                padding-bottom: 5px;
            }

            /* input prompt */
            div.nbinput.container div.prompt pre {
                color: #307FC1;
            }

            /* output prompt */
            div.nboutput.container div.prompt pre {
                color: #BF5B3D;
            }

            /* all prompts */
            div.nbinput.container div.prompt,
            div.nboutput.container div.prompt {
                width: 4.5ex;
                padding-top: 5px;
                position: relative;
                user-select: none;
            }

            div.nbinput.container div.prompt > div,
            div.nboutput.container div.prompt > div {
                position: absolute;
                right: 0;
                margin-right: 0.3ex;
            }

            @media (max-width: 540px) {
                div.nbinput.container div.prompt,
                div.nboutput.container div.prompt {
                    width: unset;
                    text-align: left;
                    padding: 0.4em;
                }
                div.nboutput.container div.prompt.empty {
                    padding: 0;
                }

                div.nbinput.container div.prompt > div,
                div.nboutput.container div.prompt > div {
                    position: unset;
                }
            }

            /* disable scrollbars on prompts */
            div.nbinput.container div.prompt pre,
            div.nboutput.container div.prompt pre {
                overflow: hidden;
            }

            /* input/output area */
            div.nbinput.container div.input_area,
            div.nboutput.container div.output_area {
                -webkit-flex: 1;
                flex: 1;
                overflow: auto;
            }
            @media (max-width: 540px) {
                div.nbinput.container div.input_area,
                div.nboutput.container div.output_area {
                    width: 100%;
                }
            }

            /* input area */
            div.nbinput.container div.input_area {
                border: 1px solid #e0e0e0;
                border-radius: 2px;
                /*background: #f5f5f5;*/
            }

            /* override MathJax center alignment in output cells */
            div.nboutput.container div[class*=MathJax] {
                text-align: left !important;
            }

            /* override sphinx.ext.imgmath center alignment in output cells */
            div.nboutput.container div.math p {
                text-align: left;
            }

            /* standard error */
            div.nboutput.container div.output_area.stderr {
                background: #fdd;
            }

            /* ANSI colors */
            .ansi-black-fg { color: #3E424D; }
            .ansi-black-bg { background-color: #3E424D; }
            .ansi-black-intense-fg { color: #282C36; }
            .ansi-black-intense-bg { background-color: #282C36; }
            .ansi-red-fg { color: #E75C58; }
            .ansi-red-bg { background-color: #E75C58; }
            .ansi-red-intense-fg { color: #B22B31; }
            .ansi-red-intense-bg { background-color: #B22B31; }
            .ansi-green-fg { color: #00A250; }
            .ansi-green-bg { background-color: #00A250; }
            .ansi-green-intense-fg { color: #007427; }
            .ansi-green-intense-bg { background-color: #007427; }
            .ansi-yellow-fg { color: #DDB62B; }
            .ansi-yellow-bg { background-color: #DDB62B; }
            .ansi-yellow-intense-fg { color: #B27D12; }
            .ansi-yellow-intense-bg { background-color: #B27D12; }
            .ansi-blue-fg { color: #208FFB; }
            .ansi-blue-bg { background-color: #208FFB; }
            .ansi-blue-intense-fg { color: #0065CA; }
            .ansi-blue-intense-bg { background-color: #0065CA; }
            .ansi-magenta-fg { color: #D160C4; }
            .ansi-magenta-bg { background-color: #D160C4; }
            .ansi-magenta-intense-fg { color: #A03196; }
            .ansi-magenta-intense-bg { background-color: #A03196; }
            .ansi-cyan-fg { color: #60C6C8; }
            .ansi-cyan-bg { background-color: #60C6C8; }
            .ansi-cyan-intense-fg { color: #258F8F; }
            .ansi-cyan-intense-bg { background-color: #258F8F; }
            .ansi-white-fg { color: #C5C1B4; }
            .ansi-white-bg { background-color: #C5C1B4; }
            .ansi-white-intense-fg { color: #A1A6B2; }
            .ansi-white-intense-bg { background-color: #A1A6B2; }

            .ansi-default-inverse-fg { color: #FFFFFF; }
            .ansi-default-inverse-bg { background-color: #000000; }

            .ansi-bold { font-weight: bold; }
            .ansi-underline { text-decoration: underline; }


            div.nbinput.container div.input_area div[class*=highlight] > pre,
            div.nboutput.container div.output_area div[class*=highlight] > pre,
            div.nboutput.container div.output_area div[class*=highlight].math,
            div.nboutput.container div.output_area.rendered_html,
            div.nboutput.container div.output_area > div.output_javascript,
            div.nboutput.container div.output_area:not(.rendered_html) > img{
                padding: 5px;
                margin: 0;
            }

            /* fix copybtn overflow problem in chromium (needed for 'sphinx_copybutton') */
            div.nbinput.container div.input_area > div[class^='highlight'],
            div.nboutput.container div.output_area > div[class^='highlight']{
                overflow-y: hidden;
            }

            /* hide copybtn icon on prompts (needed for 'sphinx_copybutton') */
            .prompt .copybtn {
                display: none;
            }

            /* Some additional styling taken form the Jupyter notebook CSS */
            div.rendered_html table {
            border: none;
            border-collapse: collapse;
            border-spacing: 0;
            color: black;
            font-size: 12px;
            table-layout: fixed;
            }
            div.rendered_html thead {
            border-bottom: 1px solid black;
            vertical-align: bottom;
            }
            div.rendered_html tr,
            div.rendered_html th,
            div.rendered_html td {
            text-align: right;
            vertical-align: middle;
            padding: 0.5em 0.5em;
            line-height: normal;
            white-space: normal;
            max-width: none;
            border: none;
            }
            div.rendered_html th {
            font-weight: bold;
            }
            div.rendered_html tbody tr:nth-child(odd) {
            background: #f5f5f5;
            }
            div.rendered_html tbody tr:hover {
            background: rgba(66, 165, 245, 0.2);
            }
        </style>
        <script>
            (!window.navigator.onLine ? alert('needs internet connection') : '');
        </script>
    </head>
    <body>
    

    <!-- Load require.js. Delete this if your page already loads require.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js" integrity="sha256-Ae2Vz/4ePdIu6ZyI/5ZGsYnb+m0JlOmKPjt6XZ9JJkA=" crossorigin="anonymous"></script>
    <script src="https://unpkg.com/@jupyter-widgets/html-manager@^0.20.1/dist/embed-amd.js" crossorigin="anonymous"></script>

    <script type="application/vnd.jupyter.widget-state+json">
    {
      "version_major": 2,
      "version_minor": 0,
      "state": {
        "ed4673c7da4e4a83956cf1db6fdbba05": {
          "model_name": "VBoxModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [
              "rendered_html",
              "jp-RenderedHTMLCommon",
              "jp-RenderedHTML",
              "jp-OutputArea-output"
            ],
            "children": [
              "IPY_MODEL_ff689b39d0c14622a452de7fb05f8422",
              "IPY_MODEL_62e593cc8c7d4077ba6e6cd0aab7fde0",
              "IPY_MODEL_49b7cd48fa0f44bba6bcdfb1f5355a59"
            ],
            "layout": "IPY_MODEL_788b90a1880545119e0831acdc40c5d9"
          }
        },
        "ff689b39d0c14622a452de7fb05f8422": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_c7426dd958f14464ae01faa12b64370b",
            "style": "IPY_MODEL_043343c4e9144794acf4cc6d471212a4",
            "value": "<h4><b>Single Dataset Scalar Performance</b></h4>"
          }
        },
        "c7426dd958f14464ae01faa12b64370b": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "043343c4e9144794acf4cc6d471212a4": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "62e593cc8c7d4077ba6e6cd0aab7fde0": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_bded36eafea548d0b332e505baebd63a",
            "style": "IPY_MODEL_36cd7e666bac4c398d83f6cf6eede942",
            "value": "<p>Calculate a performance metric as a scalar for a given model and a given dataset.</p>"
          }
        },
        "bded36eafea548d0b332e505baebd63a": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "36cd7e666bac4c398d83f6cf6eede942": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "49b7cd48fa0f44bba6bcdfb1f5355a59": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_7acff492f070429cbec6ef50bc0e99b4",
            "style": "IPY_MODEL_dd5a66f54f9a4861bee549176d170404",
            "value": "<h5><b>Conditions Summary</b></h5><style type=\"text/css\">\n#T_bb717_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_bb717_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_bb717_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_bb717_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_bb717_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_bb717_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Status</th>\n      <th class=\"col_heading level0 col1\" >Condition</th>\n      <th class=\"col_heading level0 col2\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_bb717_row0_col0\" class=\"data row0 col0\" ><div style=\"color: green;text-align: center\">\u2713</div></td>\n      <td id=\"T_bb717_row0_col1\" class=\"data row0 col1\" >Score is greater than 0.5</td>\n      <td id=\"T_bb717_row0_col2\" class=\"data row0 col2\" >The score accuracy is 0.9825</td>\n    </tr>\n  </tbody>\n</table>\n"
          }
        },
        "7acff492f070429cbec6ef50bc0e99b4": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "dd5a66f54f9a4861bee549176d170404": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "788b90a1880545119e0831acdc40c5d9": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        }
      }
    }
    </script>
    <script type="application/vnd.jupyter.widget-view+json">
    {"version_major": 2, "version_minor": 0, "model_id": "ed4673c7da4e4a83956cf1db6fdbba05"}
    </script>

    </body>
    </html>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  6.009 seconds)


.. _sphx_glr_download_checks_gallery_vision_model_evaluation_plot_single_dataset_scalar_performance.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_single_dataset_scalar_performance.py <plot_single_dataset_scalar_performance.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_single_dataset_scalar_performance.ipynb <plot_single_dataset_scalar_performance.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
