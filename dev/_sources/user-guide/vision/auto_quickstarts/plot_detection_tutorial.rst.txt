
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "user-guide/vision/auto_quickstarts/plot_detection_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_user-guide_vision_auto_quickstarts_plot_detection_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_user-guide_vision_auto_quickstarts_plot_detection_tutorial.py:


.. _vision_detection_tutorial:

==========================
Object Detection Tutorial
==========================

In this tutorial, you will learn how to validate your **object detection model** using deepchecks test suites.
You can read more about the different checks and suites for computer vision use cases at the
:doc:`examples section  </checks_gallery/vision/index>`

If you just want to see the output of this tutorial, jump to the :ref:`observing the results <vision_segmentation_tutorial__observing_the_result>` section.

An object detection tasks usually consist of two parts:

- Object Localization, where the model predicts the location of an object in the image,
- Object Classification, where the model predicts the class of the detected object.

The common output of an object detection model is a list of bounding boxes around the objects, and
their classes.

.. code-block:: bash

    # Before we start, if you don't have deepchecks vision package installed yet, run:
    import sys
    !{sys.executable} -m pip install "deepchecks[vision]" --quiet --upgrade # --user

    # or install using pip from your python environment

.. GENERATED FROM PYTHON SOURCE LINES 32-34

Defining the data and model
===========================

.. GENERATED FROM PYTHON SOURCE LINES 34-56

.. code-block:: default


    # Importing the required packages
    import os
    import urllib.request
    import xml.etree.ElementTree as ET
    import zipfile
    from functools import partial

    import albumentations as A
    import matplotlib.pyplot as plt
    import numpy as np
    import torch
    import torchvision
    from albumentations.pytorch import ToTensorV2
    from PIL import Image
    from torch import nn
    from torch.utils.data import DataLoader, Dataset
    from torchvision.models.detection import _utils as det_utils
    from torchvision.models.detection.ssdlite import SSDLiteClassificationHead

    from deepchecks.vision.detection_data import DetectionData








.. GENERATED FROM PYTHON SOURCE LINES 57-68

Load Data
~~~~~~~~~
The model in this tutorial is used to detect tomatoes in images. The model is trained on a dataset consisted of
895 images of tomatoes, with bounding box annotations provided in PASCAL VOC format.
All annotations belong to a single class: tomato.

.. note::
    The dataset is available at the following link:
    https://www.kaggle.com/andrewmvd/tomato-detection

    We thank the authors of the dataset for providing the dataset.

.. GENERATED FROM PYTHON SOURCE LINES 68-141

.. code-block:: default


    url = 'https://figshare.com/ndownloader/files/34488599'
    urllib.request.urlretrieve(url, 'tomato-detection.zip')

    with zipfile.ZipFile('tomato-detection.zip', 'r') as zip_ref:
        zip_ref.extractall('.')

    class TomatoDataset(Dataset):
        def __init__(self, root, transforms):
            self.root = root
            self.transforms = transforms

            self.images = list(sorted(os.listdir(os.path.join(root, 'images'))))
            self.annotations = list(sorted(os.listdir(os.path.join(root, 'annotations'))))

        def __getitem__(self, idx):
            img_path = os.path.join(self.root, "images", self.images[idx])
            ann_path = os.path.join(self.root, "annotations", self.annotations[idx])
            img = Image.open(img_path).convert("RGB")
            bboxes = []
            labels = []
            with open(ann_path, 'r') as f:
                tree = ET.parse(f)
                root = tree.getroot()
                size = root.find('size')
                w = int(size.find('width').text)
                h = int(size.find('height').text)

                for obj in root.iter('object'):
                    difficult = obj.find('difficult').text
                    if int(difficult) == 1:
                        continue
                    cls_id = 1
                    xmlbox = obj.find('bndbox')
                    b = [float(xmlbox.find('xmin').text), float(xmlbox.find('ymin').text), float(xmlbox.find('xmax').text),
                            float(xmlbox.find('ymax').text)]
                    bboxes.append(b)
                    labels.append(cls_id)

            bboxes = torch.as_tensor(np.array(bboxes), dtype=torch.float32)
            labels = torch.as_tensor(np.array(labels), dtype=torch.int64)

            if self.transforms is not None:
                res = self.transforms(image=np.array(img), bboxes=bboxes, class_labels=labels)

            target = {
                'boxes': [torch.Tensor(x) for x in res['bboxes']],
                'labels': res['class_labels']
            }

            img = res['image']

            return img, target

        def __len__(self):
            return len(self.images)

    data_transforms = A.Compose([
        A.Resize(height=256, width=256),
        A.CenterCrop(height=224, width=224),
        A.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)),
        ToTensorV2(),
    ], bbox_params=A.BboxParams(format='pascal_voc', label_fields=['class_labels']))

    dataset = TomatoDataset(root=os.path.join(os.path.curdir, 'tomato-detection/data'),
                            transforms=data_transforms)
    train_set, test_set = torch.utils.data.random_split(dataset,
                                                        [int(len(dataset)*0.9), len(dataset)-int(len(dataset)*0.9)],
                                                        generator=torch.Generator().manual_seed(42))
    test_set.transforms = A.Compose([ToTensorV2()])
    train_loader = DataLoader(train_set, batch_size=64, collate_fn=(lambda batch: tuple(zip(*batch))))
    test_loader = DataLoader(test_set, batch_size=64, collate_fn=(lambda batch: tuple(zip(*batch))))








.. GENERATED FROM PYTHON SOURCE LINES 142-145

Visualize a Few Images
~~~~~~~~~~~~~~~~~~~~~~
Let's visualize a few training images so as to understand the data augmentation.

.. GENERATED FROM PYTHON SOURCE LINES 145-180

.. code-block:: default


    def prepare(inp):
        """Imshow for Tensor."""
        inp = inp.numpy().transpose((1, 2, 0))
        mean = np.array([0.485, 0.456, 0.406])
        std = np.array([0.229, 0.224, 0.225])
        inp = std * inp + mean
        inp = np.clip(inp, 0, 1) * 255
        inp = inp.transpose((2,0,1))
        return torch.tensor(inp, dtype=torch.uint8)

    import torchvision.transforms.functional as F


    def show(imgs):
        if not isinstance(imgs, list):
            imgs = [imgs]
        fig, axs = plt.subplots(ncols=len(imgs), squeeze=False, figsize=(20,20))
        for i, img in enumerate(imgs):
            img = img.detach()
            img = F.to_pil_image(img)
            axs[0, i].imshow(np.asarray(img))
            axs[0, i].set(xticklabels=[], yticklabels=[], xticks=[], yticks=[])

    from torchvision.utils import draw_bounding_boxes

    data = next(iter(train_loader))
    inp, targets = data[0][:4], data[1][:4]


    result = [draw_bounding_boxes(prepare(inp[i]), torch.stack(targets[i]['boxes']),
                                  colors=['yellow'] * torch.stack(targets[i]['boxes']).shape[0], width=5)
              for i in range(len(targets))]
    show(result)




.. image-sg:: /user-guide/vision/auto_quickstarts/images/sphx_glr_plot_detection_tutorial_001.png
   :alt: plot detection tutorial
   :srcset: /user-guide/vision/auto_quickstarts/images/sphx_glr_plot_detection_tutorial_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 181-192

.. image :: /_static/images/tutorials/tomatoes.png
    :alt: Tomatoes with bbox

Downloading a Pre-trained Model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In this tutorial, we will download a pre-trained SSDlite model and a MobileNetV3 Large backbone
from the official PyTorch repository. For more details, please refer to the
`official documentation <https://pytorch.org/vision/stable/generated/torchvision.models.detection.ssdlite320_mobilenet_v3_large.html#torchvision.models.detection.ssdlite320_mobilenet_v3_large>`_.

After downloading the model, we will fine-tune it for our particular classes. We will do it by replacing the pre-trained
head with a new one that matches our needs.

.. GENERATED FROM PYTHON SOURCE LINES 192-204

.. code-block:: default


    device = torch.device("cuda") if torch.cuda.is_available() else torch.device("cpu")

    model = torchvision.models.detection.ssdlite320_mobilenet_v3_large(pretrained=True)

    in_channels = det_utils.retrieve_out_channels(model.backbone, (320, 320))
    num_anchors = model.anchor_generator.num_anchors_per_location()
    norm_layer = partial(nn.BatchNorm2d, eps=0.001, momentum=0.03)

    model.head.classification_head = SSDLiteClassificationHead(in_channels, num_anchors, 2, norm_layer)
    model.to(device)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading: "https://download.pytorch.org/models/ssdlite320_mobilenet_v3_large_coco-a79551df.pth" to /home/runner/.cache/torch/hub/checkpoints/ssdlite320_mobilenet_v3_large_coco-a79551df.pth
      0%|          | 0.00/13.4M [00:00<?, ?B/s]     37%|###7      | 4.97M/13.4M [00:00<00:00, 52.0MB/s]    100%|##########| 13.4M/13.4M [00:00<00:00, 80.3MB/s]

    SSD(
      (backbone): SSDLiteFeatureExtractorMobileNet(
        (features): Sequential(
          (0): Sequential(
            (0): ConvNormActivation(
              (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (1): BatchNorm2d(16, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): Hardswish()
            )
            (1): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                  (1): BatchNorm2d(16, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (1): ConvNormActivation(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(16, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (2): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(16, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (1): ConvNormActivation(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
                  (1): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (2): ConvNormActivation(
                  (0): Conv2d(64, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(24, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (3): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(24, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(72, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (1): ConvNormActivation(
                  (0): Conv2d(72, 72, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=72, bias=False)
                  (1): BatchNorm2d(72, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (2): ConvNormActivation(
                  (0): Conv2d(72, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(24, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (4): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(24, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(72, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (1): ConvNormActivation(
                  (0): Conv2d(72, 72, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=72, bias=False)
                  (1): BatchNorm2d(72, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (2): SqueezeExcitation(
                  (avgpool): AdaptiveAvgPool2d(output_size=1)
                  (fc1): Conv2d(72, 24, kernel_size=(1, 1), stride=(1, 1))
                  (fc2): Conv2d(24, 72, kernel_size=(1, 1), stride=(1, 1))
                  (activation): ReLU()
                  (scale_activation): Hardsigmoid()
                )
                (3): ConvNormActivation(
                  (0): Conv2d(72, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(40, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (5): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(40, 120, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(120, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (1): ConvNormActivation(
                  (0): Conv2d(120, 120, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=120, bias=False)
                  (1): BatchNorm2d(120, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (2): SqueezeExcitation(
                  (avgpool): AdaptiveAvgPool2d(output_size=1)
                  (fc1): Conv2d(120, 32, kernel_size=(1, 1), stride=(1, 1))
                  (fc2): Conv2d(32, 120, kernel_size=(1, 1), stride=(1, 1))
                  (activation): ReLU()
                  (scale_activation): Hardsigmoid()
                )
                (3): ConvNormActivation(
                  (0): Conv2d(120, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(40, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (6): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(40, 120, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(120, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (1): ConvNormActivation(
                  (0): Conv2d(120, 120, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=120, bias=False)
                  (1): BatchNorm2d(120, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (2): SqueezeExcitation(
                  (avgpool): AdaptiveAvgPool2d(output_size=1)
                  (fc1): Conv2d(120, 32, kernel_size=(1, 1), stride=(1, 1))
                  (fc2): Conv2d(32, 120, kernel_size=(1, 1), stride=(1, 1))
                  (activation): ReLU()
                  (scale_activation): Hardsigmoid()
                )
                (3): ConvNormActivation(
                  (0): Conv2d(120, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(40, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (7): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(240, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (1): ConvNormActivation(
                  (0): Conv2d(240, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=240, bias=False)
                  (1): BatchNorm2d(240, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (2): ConvNormActivation(
                  (0): Conv2d(240, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(80, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (8): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(80, 200, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(200, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (1): ConvNormActivation(
                  (0): Conv2d(200, 200, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=200, bias=False)
                  (1): BatchNorm2d(200, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (2): ConvNormActivation(
                  (0): Conv2d(200, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(80, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (9): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(80, 184, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(184, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (1): ConvNormActivation(
                  (0): Conv2d(184, 184, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=184, bias=False)
                  (1): BatchNorm2d(184, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (2): ConvNormActivation(
                  (0): Conv2d(184, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(80, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (10): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(80, 184, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(184, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (1): ConvNormActivation(
                  (0): Conv2d(184, 184, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=184, bias=False)
                  (1): BatchNorm2d(184, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (2): ConvNormActivation(
                  (0): Conv2d(184, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(80, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (11): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(480, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (1): ConvNormActivation(
                  (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)
                  (1): BatchNorm2d(480, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (2): SqueezeExcitation(
                  (avgpool): AdaptiveAvgPool2d(output_size=1)
                  (fc1): Conv2d(480, 120, kernel_size=(1, 1), stride=(1, 1))
                  (fc2): Conv2d(120, 480, kernel_size=(1, 1), stride=(1, 1))
                  (activation): ReLU()
                  (scale_activation): Hardsigmoid()
                )
                (3): ConvNormActivation(
                  (0): Conv2d(480, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(112, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (12): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(672, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (1): ConvNormActivation(
                  (0): Conv2d(672, 672, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=672, bias=False)
                  (1): BatchNorm2d(672, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (2): SqueezeExcitation(
                  (avgpool): AdaptiveAvgPool2d(output_size=1)
                  (fc1): Conv2d(672, 168, kernel_size=(1, 1), stride=(1, 1))
                  (fc2): Conv2d(168, 672, kernel_size=(1, 1), stride=(1, 1))
                  (activation): ReLU()
                  (scale_activation): Hardsigmoid()
                )
                (3): ConvNormActivation(
                  (0): Conv2d(672, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(112, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (13): ConvNormActivation(
              (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(672, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): Hardswish()
            )
          )
          (1): Sequential(
            (0): Sequential(
              (1): ConvNormActivation(
                (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=672, bias=False)
                (1): BatchNorm2d(672, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): Hardswish()
              )
              (2): SqueezeExcitation(
                (avgpool): AdaptiveAvgPool2d(output_size=1)
                (fc1): Conv2d(672, 168, kernel_size=(1, 1), stride=(1, 1))
                (fc2): Conv2d(168, 672, kernel_size=(1, 1), stride=(1, 1))
                (activation): ReLU()
                (scale_activation): Hardsigmoid()
              )
              (3): ConvNormActivation(
                (0): Conv2d(672, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(80, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              )
            )
            (1): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(480, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (1): ConvNormActivation(
                  (0): Conv2d(480, 480, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=480, bias=False)
                  (1): BatchNorm2d(480, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (2): SqueezeExcitation(
                  (avgpool): AdaptiveAvgPool2d(output_size=1)
                  (fc1): Conv2d(480, 120, kernel_size=(1, 1), stride=(1, 1))
                  (fc2): Conv2d(120, 480, kernel_size=(1, 1), stride=(1, 1))
                  (activation): ReLU()
                  (scale_activation): Hardsigmoid()
                )
                (3): ConvNormActivation(
                  (0): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(80, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (2): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(480, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (1): ConvNormActivation(
                  (0): Conv2d(480, 480, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=480, bias=False)
                  (1): BatchNorm2d(480, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (2): SqueezeExcitation(
                  (avgpool): AdaptiveAvgPool2d(output_size=1)
                  (fc1): Conv2d(480, 120, kernel_size=(1, 1), stride=(1, 1))
                  (fc2): Conv2d(120, 480, kernel_size=(1, 1), stride=(1, 1))
                  (activation): ReLU()
                  (scale_activation): Hardsigmoid()
                )
                (3): ConvNormActivation(
                  (0): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(80, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (3): ConvNormActivation(
              (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(480, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): Hardswish()
            )
          )
        )
        (extra): ModuleList(
          (0): Sequential(
            (0): ConvNormActivation(
              (0): Conv2d(480, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
            (1): ConvNormActivation(
              (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256, bias=False)
              (1): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
            (2): ConvNormActivation(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
          )
          (1): Sequential(
            (0): ConvNormActivation(
              (0): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
            (1): ConvNormActivation(
              (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=128, bias=False)
              (1): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
            (2): ConvNormActivation(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
          )
          (2): Sequential(
            (0): ConvNormActivation(
              (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
            (1): ConvNormActivation(
              (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=128, bias=False)
              (1): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
            (2): ConvNormActivation(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
          )
          (3): Sequential(
            (0): ConvNormActivation(
              (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
            (1): ConvNormActivation(
              (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
              (1): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
            (2): ConvNormActivation(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
          )
        )
      )
      (anchor_generator): DefaultBoxGenerator(aspect_ratios=[[2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3]], clip=True, scales=[0.2, 0.35, 0.5, 0.65, 0.8, 0.95, 1.0], steps=None)
      (head): SSDLiteHead(
        (classification_head): SSDLiteClassificationHead(
          (module_list): ModuleList(
            (0): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(672, 672, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=672, bias=False)
                (1): BatchNorm2d(672, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(672, 12, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)
                (1): BatchNorm2d(480, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(480, 12, kernel_size=(1, 1), stride=(1, 1))
            )
            (2): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512, bias=False)
                (1): BatchNorm2d(512, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(512, 12, kernel_size=(1, 1), stride=(1, 1))
            )
            (3): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256, bias=False)
                (1): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
            )
            (4): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256, bias=False)
                (1): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
            )
            (5): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
                (1): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(128, 12, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
        (regression_head): SSDLiteRegressionHead(
          (module_list): ModuleList(
            (0): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(672, 672, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=672, bias=False)
                (1): BatchNorm2d(672, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(672, 24, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)
                (1): BatchNorm2d(480, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(480, 24, kernel_size=(1, 1), stride=(1, 1))
            )
            (2): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512, bias=False)
                (1): BatchNorm2d(512, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(512, 24, kernel_size=(1, 1), stride=(1, 1))
            )
            (3): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256, bias=False)
                (1): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(256, 24, kernel_size=(1, 1), stride=(1, 1))
            )
            (4): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256, bias=False)
                (1): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(256, 24, kernel_size=(1, 1), stride=(1, 1))
            )
            (5): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
                (1): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(128, 24, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
      )
      (transform): GeneralizedRCNNTransform(
          Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])
          Resize(min_size=(320,), max_size=320, mode='bilinear')
      )
    )



.. GENERATED FROM PYTHON SOURCE LINES 205-208

Loading Pre-trained Weights
~~~~~~~~~~~~~~~~~~~~~~~~~~~
For this tutorial we will not include the training code itself, but will download and load pre-trained weights.

.. GENERATED FROM PYTHON SOURCE LINES 208-212

.. code-block:: default


    model.load_state_dict(torch.load('tomato-detection/ssd_model.pth'))
    _ = model.eval()








.. GENERATED FROM PYTHON SOURCE LINES 213-221

Validating the Model With Deepchecks
=====================================
Now, after we have the training data, test data and the model, we can validate the model with
deepchecks test suites.

Visualize the Data Loader and the Model Outputs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
First we'll make sure we are familiar with the data loader and the model outputs.

.. GENERATED FROM PYTHON SOURCE LINES 221-233

.. code-block:: default


    batch = next(iter(train_loader))

    print("Batch type is: ", type(batch))
    print("First element is: ", type(batch[0]), "with len of ", len(batch[0]))
    print("Example output of an image shape from the dataloader ", batch[0][0].shape)
    print("Image values", batch[0][0])
    print("-"*80)

    print("Second element is: ", type(batch[1]), "with len of ", len(batch[1]))
    print("Example output of a label from the dataloader ", batch[1][0])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Batch type is:  <class 'tuple'>
    First element is:  <class 'tuple'> with len of  64
    Example output of an image shape from the dataloader  torch.Size([3, 224, 224])
    Image values tensor([[[-1.79253, -1.82678, -1.82678,  ...,  1.39267,  1.34130,  1.32417],
             [-1.72403, -1.79253, -1.80966,  ...,  1.35842,  1.32417,  1.34130],
             [-1.75828, -1.74116, -1.70691,  ...,  1.32417,  1.34130,  1.35842],
             ...,
             [-1.84391, -1.82678, -1.75828,  ...,  0.62206,  0.19394, -0.35405],
             [-1.80966, -1.79253, -1.72403,  ...,  0.81043,  0.72481,  0.34806],
             [-1.79253, -1.84391, -1.75828,  ...,  0.81043,  0.82755,  0.69056]],

            [[-1.38796, -1.45798, -1.45798,  ...,  1.51821,  1.46569,  1.46569],
             [-1.38796, -1.47549, -1.52801,  ...,  1.50070,  1.46569,  1.48319],
             [-1.42297, -1.47549, -1.49300,  ...,  1.46569,  1.50070,  1.50070],
             ...,
             [-1.70308, -1.68557, -1.61555,  ...,  0.67787,  0.22269, -0.33753],
             [-1.68557, -1.66807, -1.58053,  ...,  0.87045,  0.74790,  0.38025],
             [-1.68557, -1.70308, -1.61555,  ...,  0.87045,  0.85294,  0.71289]],

            [[-1.57786, -1.61272, -1.61272,  ...,  1.66397,  1.61168,  1.59425],
             [-1.54301, -1.59529, -1.64758,  ...,  1.62911,  1.59425,  1.59425],
             [-1.59529, -1.59529, -1.61272,  ...,  1.59425,  1.61168,  1.62911],
             ...,
             [-1.63015, -1.59529, -1.52558,  ...,  0.46135,  0.02562, -0.53211],
             [-1.59529, -1.54301, -1.47329,  ...,  0.72279,  0.61821,  0.21734],
             [-1.59529, -1.59529, -1.50815,  ...,  0.72279,  0.72279,  0.56593]]])
    --------------------------------------------------------------------------------
    Second element is:  <class 'tuple'> with len of  64
    Example output of a label from the dataloader  {'boxes': [tensor([  0.00000,  75.13600,  39.68000, 165.75999]), tensor([ 0.00000,  0.00000, 94.08000, 93.56800])], 'labels': [tensor(1), tensor(1)]}




.. GENERATED FROM PYTHON SOURCE LINES 234-247

Implementing the DetectionData class
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The checks in the package validate the model & data by calculating various quantities over the data, labels and
predictions. In order to do that, those must be in a pre-defined format, according to the task type.
The first step is to implement a class that enables deepchecks to interact with your model and data and transform
them to this pre-defined format, which is set for each task type.
In this tutorial, we will implement the object detection task type by implementing a class that inherits from the
:class:`deepchecks.vision.detection_data.DetectionData` class.

The DetectionData class contains additional data and general methods intended for easy access to relevant metadata
for object detection ML models validation.
To learn more about the expected format please visit the API reference for the
:class:`deepchecks.vision.detection_data.DetectionData` class.

.. GENERATED FROM PYTHON SOURCE LINES 247-320

.. code-block:: default


    from deepchecks.vision.detection_data import DetectionData


    class TomatoData(DetectionData):

        def __init__(self, *args, **kwargs):
            super().__init__(*args, **kwargs)

        def batch_to_images(self, batch):
            """
            Convert a batch of data to images in the expected format. The expected format is an iterable of cv2 images,
            where each image is a numpy array of shape (height, width, channels). The numbers in the array should be in the
            range [0, 255] in a uint8 format.
            """
            inp = torch.stack(list(batch[0])).cpu().detach().numpy().transpose((0, 2, 3, 1))
            mean = [0.485, 0.456, 0.406]
            std = [0.229, 0.224, 0.225]
            # Un-normalize the images
            inp = std * inp + mean
            inp = np.clip(inp, 0, 1)
            return inp * 255

        def batch_to_labels(self, batch):
            """
            Convert a batch of data to labels in the expected format. The expected format is a list of tensors of length N,
            where N is the number of samples. Each tensor element is in a shape of [B, 5], where B is the number of bboxes
            in the image, and each bounding box is in the structure of [class_id, x, y, w, h].
            """
            tensor_annotations = batch[1]
            label = []
            for annotation in tensor_annotations:
                if len(annotation["boxes"]):
                    bbox = torch.stack(annotation["boxes"])
                    # Convert the Pascal VOC xyxy format to xywh format
                    bbox[:, 2:] = bbox[:, 2:] - bbox[:, :2]
                    # The label shape is [class_id, x, y, w, h]
                    label.append(
                        torch.concat([torch.stack(annotation["labels"]).reshape((-1, 1)), bbox], dim=1)
                    )
                else:
                    # If it's an empty image, we need to add an empty label
                    label.append(torch.tensor([]))
            return label

        def infer_on_batch(self, batch, model, device):
            """
            Returns the predictions for a batch of data. The expected format is a list of tensors of shape length N, where N
            is the number of samples. Each tensor element is in a shape of [B, 6], where B is the number of bboxes in the
            predictions, and each bounding box is in the structure of [x, y, w, h, score, class_id].
            """
            nm_thrs = 0.2
            score_thrs = 0.7
            imgs = list(img.to(device) for img in batch[0])
            # Getting the predictions of the model on the batch
            with torch.no_grad():
                preds = model(imgs)
            processed_pred = []
            for pred in preds:
                # Performoing non-maximum suppression on the detections
                keep_boxes = torchvision.ops.nms(pred['boxes'], pred['scores'], nm_thrs)
                score_filter = pred['scores'][keep_boxes] > score_thrs

                # get the filtered result
                test_boxes = pred['boxes'][keep_boxes][score_filter].reshape((-1, 4))
                test_boxes[:, 2:] = test_boxes[:, 2:] - test_boxes[:, :2]  # xyxy to xywh
                test_labels = pred['labels'][keep_boxes][score_filter]
                test_scores = pred['scores'][keep_boxes][score_filter]

                processed_pred.append(
                    torch.concat([test_boxes, test_scores.reshape((-1, 1)), test_labels.reshape((-1, 1))], dim=1))
            return processed_pred








.. GENERATED FROM PYTHON SOURCE LINES 321-322

After defining the task class, we can validate it by running the following code:

.. GENERATED FROM PYTHON SOURCE LINES 322-336

.. code-block:: default


    # We have a single label here, which is the tomato class
    # The label_map is a dictionary that maps the class id to the class name, for display purposes.
    LABEL_MAP = {
        1: 'Tomato'
    }
    training_data = TomatoData(data_loader=train_loader, label_map=LABEL_MAP)
    test_data = TomatoData(data_loader=test_loader, label_map=LABEL_MAP)

    training_data.validate_format(model, device=device)
    test_data.validate_format(model, device=device)

    # And observe the output:





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Deepchecks will try to validate the extractors given...
    torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
    Structure validation
    --------------------
    Label formatter: Pass!
    Prediction formatter: Pass!
    Image formatter: Pass!

    Content validation
    ------------------
    For validating the content within the structure you have to manually observe the classes, image, label and prediction.
    Examples of classes observed in the batch's labels: [[1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1], [1]]
    Visual images & label & prediction: should open in a new window
    *******************************************************************************
    This machine does not support GUI
    The formatted image was saved in:
    /home/runner/work/deepchecks/deepchecks/docs/source/user-guide/vision/quickstarts/deepchecks_formatted_image (4).jpg
    Visual examples of an image with prediction and label data. Label is red, prediction is blue, and deepchecks loves you.
    validate_extractors can be set to skip the image saving or change the save path
    *******************************************************************************
    Deepchecks will try to validate the extractors given...
    Structure validation
    --------------------
    Label formatter: Pass!
    Prediction formatter: Pass!
    Image formatter: Pass!

    Content validation
    ------------------
    For validating the content within the structure you have to manually observe the classes, image, label and prediction.
    Examples of classes observed in the batch's labels: [[1, 1, 1, 1], [1], [1, 1, 1, 1, 1, 1, 1], [1], [1]]
    Visual images & label & prediction: should open in a new window
    *******************************************************************************
    This machine does not support GUI
    The formatted image was saved in:
    /home/runner/work/deepchecks/deepchecks/docs/source/user-guide/vision/quickstarts/deepchecks_formatted_image (5).jpg
    Visual examples of an image with prediction and label data. Label is red, prediction is blue, and deepchecks loves you.
    validate_extractors can be set to skip the image saving or change the save path
    *******************************************************************************

    True



.. GENERATED FROM PYTHON SOURCE LINES 337-341

Running Deepchecks' suite on our data and model!
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Now that we have defined the task class, we can validate the model with the deepchecks' model evaluation suite.
This can be done with this simple few lines of code:

.. GENERATED FROM PYTHON SOURCE LINES 341-347

.. code-block:: default


    from deepchecks.vision.suites import model_evaluation

    suite = model_evaluation()
    result = suite.run(training_data, test_data, model, device=device)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The ImageSegmentPerformance check is deprecated and will be removed in the 0.11 version. Please use the WeakSegmentsPerformance check instead.
    The ModelErrorAnalysis check is deprecated and will be removed in the 0.11 version. Please use the WeakSegmentsPerformance check instead.
    Validating Input:
    |     | 0/1 [Time: 00:00]    Validating Input:
    |#####| 1/1 [Time: 00:05]    Validating Input:
    |#####| 1/1 [Time: 00:05]
    Ingesting Batches - Train Dataset:
    |             | 0/13 [Time: 00:00]
    Ingesting Batches - Train Dataset:
    |#            | 1/13 [Time: 00:03]
    Ingesting Batches - Train Dataset:
    |##           | 2/13 [Time: 00:07]
    Ingesting Batches - Train Dataset:
    |###          | 3/13 [Time: 00:10]
    Ingesting Batches - Train Dataset:
    |####         | 4/13 [Time: 00:14]
    Ingesting Batches - Train Dataset:
    |#####        | 5/13 [Time: 00:17]
    Ingesting Batches - Train Dataset:
    |######       | 6/13 [Time: 00:21]
    Ingesting Batches - Train Dataset:
    |#######      | 7/13 [Time: 00:24]
    Ingesting Batches - Train Dataset:
    |########     | 8/13 [Time: 00:28]
    Ingesting Batches - Train Dataset:
    |#########    | 9/13 [Time: 00:31]
    Ingesting Batches - Train Dataset:
    |##########   | 10/13 [Time: 00:35]
    Ingesting Batches - Train Dataset:
    |###########  | 11/13 [Time: 00:38]
    Ingesting Batches - Train Dataset:
    |############ | 12/13 [Time: 00:42]
    Ingesting Batches - Train Dataset:
    |#############| 13/13 [Time: 00:44]
    Ingesting Batches - Train Dataset:
    |#############| 13/13 [Time: 00:44]

    Computing Single Dataset Checks - Train Dataset:
    |     | 0/4 [Time: 00:00]

    Computing Single Dataset Checks - Train Dataset:
    |#2   | 1/4 [Time: 00:00, Check=Mean Average Precision Report]

    Computing Single Dataset Checks - Train Dataset:
    |##5  | 2/4 [Time: 00:00, Check=Mean Average Recall Report]   

    Computing Single Dataset Checks - Train Dataset:
    |#####| 4/4 [Time: 00:05, Check=Image Segment Performance] 

    Computing Single Dataset Checks - Train Dataset:
    |#####| 4/4 [Time: 00:05, Check=Image Segment Performance]


    Ingesting Batches - Test Dataset:
    |     | 0/2 [Time: 00:00]


    Ingesting Batches - Test Dataset:
    |##5  | 1/2 [Time: 00:03]


    Ingesting Batches - Test Dataset:
    |#####| 2/2 [Time: 00:04]


    Ingesting Batches - Test Dataset:
    |#####| 2/2 [Time: 00:04]



    Computing Single Dataset Checks - Test Dataset:
    |     | 0/4 [Time: 00:00]



    Computing Single Dataset Checks - Test Dataset:
    |###7 | 3/4 [Time: 00:00, Check=Confusion Matrix Report]



    Computing Single Dataset Checks - Test Dataset:
    |#####| 4/4 [Time: 00:00, Check=Image Segment Performance]




    Computing Checks:
    |     | 0/4 [Time: 00:00]




    Computing Checks:
    |     | 0/4 [Time: 00:00, Check=Class Performance]




    Computing Checks:
    |#2   | 1/4 [Time: 00:00, Check=Class Performance]




    Computing Checks:
    |#2   | 1/4 [Time: 00:00, Check=Train Test Prediction Drift]




    Computing Checks:
    |##5  | 2/4 [Time: 00:00, Check=Train Test Prediction Drift]




    Computing Checks:
    |##5  | 2/4 [Time: 00:00, Check=Simple Model Comparison]    




    Computing Checks:
    |##5  | 2/4 [Time: 00:00, Check=Model Error Analysis]   Default parameter min_samples_leaf will change in version 2.6.See https://github.com/scikit-learn-contrib/category_encoders/issues/327
    Default parameter smoothing will change in version 2.6.See https://github.com/scikit-learn-contrib/category_encoders/issues/327





    Computing Checks:
    |#####| 4/4 [Time: 00:00, Check=Model Error Analysis]




    Computing Checks:
    |#####| 4/4 [Time: 00:00, Check=Model Error Analysis]                                           
                                                                          

                                                                                                               


                                                               



                                                                                                              




                                                                           



.. GENERATED FROM PYTHON SOURCE LINES 348-353

We also have suites for:
:func:`data integrity <deepchecks.vision.suites.default_suites.data_integrity>`
- validating a single dataset and
:func:`train test validation <deepchecks.vision.suites.default_suites.train_test_validation>` -
validating the dataset split

.. GENERATED FROM PYTHON SOURCE LINES 355-360

.. _observing_the_result:

Observing the results:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The results can be saved as a html file with the following code:

.. GENERATED FROM PYTHON SOURCE LINES 360-363

.. code-block:: default


    result.save_as_html('output.html')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    'output (3).html'



.. GENERATED FROM PYTHON SOURCE LINES 364-365

Or, if working inside a notebook, the output can be displayed directly by simply printing the result object:

.. GENERATED FROM PYTHON SOURCE LINES 365-367

.. code-block:: default


    result





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <!--
        ~ ----------------------------------------------------------------------------
        ~ Copyright (C) 2021-2022 Deepchecks (https://www.deepchecks.com)
        ~
        ~ This file is part of Deepchecks.
        ~ Deepchecks is distributed under the terms of the GNU Affero General
        ~ Public License (version 3 or later).
        ~ You should have received a copy of the GNU Affero General Public License
        ~ along with Deepchecks.  If not, see <http://www.gnu.org/licenses/>.
        ~ ----------------------------------------------------------------------------
        ~
    -->
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Model Evaluation Suite</title>
        <link rel="icon" type="image/x-icon" href="https://deepchecks.com/wp-content/themes/deepchecks/assets/favicons/favicon.ico">
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
                font-size: 1rem;
                line-height: 1.5;
                color: #212529;
                text-align: left;
                max-width: 1200px;
                margin: auto;
                background-color: white;
            }

            div.nbinput.container div.prompt *,
            div.nboutput.container div.prompt *,
            div.nbinput.container div.input_area pre,
            div.nboutput.container div.output_area pre,
            div.nbinput.container div.input_area .highlight,
            div.nboutput.container div.output_area .highlight {
                border: none;
                padding: 0;
                margin: 0;
                box-shadow: none;
            }

            div.nbinput.container > div[class*=highlight],
            div.nboutput.container > div[class*=highlight] {
                margin: 0;
            }

            div.nbinput.container div.prompt *,
            div.nboutput.container div.prompt * {
                background: none;
            }

            div.nboutput.container div.output_area .highlight,
            div.nboutput.container div.output_area pre {
                background: unset;
            }

            div.nboutput.container div.output_area div.highlight {
                color: unset;  /* override Pygments text color */
            }

            /* avoid gaps between output lines */
            div.nboutput.container div[class*=highlight] pre {
                line-height: normal;
            }

            /* input/output containers */
            div.nbinput.container,
            div.nboutput.container {
                display: -webkit-flex;
                display: flex;
                align-items: flex-start;
                margin: 0;
                width: 100%;
            }
            @media (max-width: 540px) {
                div.nbinput.container,
                div.nboutput.container {
                    flex-direction: column;
                }
            }

            /* input container */
            div.nbinput.container {
                padding-top: 5px;
            }

            /* last container */
            div.nblast.container {
                padding-bottom: 5px;
            }

            /* input prompt */
            div.nbinput.container div.prompt pre {
                color: #307FC1;
            }

            /* output prompt */
            div.nboutput.container div.prompt pre {
                color: #BF5B3D;
            }

            /* all prompts */
            div.nbinput.container div.prompt,
            div.nboutput.container div.prompt {
                width: 4.5ex;
                padding-top: 5px;
                position: relative;
                user-select: none;
            }

            div.nbinput.container div.prompt > div,
            div.nboutput.container div.prompt > div {
                position: absolute;
                right: 0;
                margin-right: 0.3ex;
            }

            @media (max-width: 540px) {
                div.nbinput.container div.prompt,
                div.nboutput.container div.prompt {
                    width: unset;
                    text-align: left;
                    padding: 0.4em;
                }
                div.nboutput.container div.prompt.empty {
                    padding: 0;
                }

                div.nbinput.container div.prompt > div,
                div.nboutput.container div.prompt > div {
                    position: unset;
                }
            }

            /* disable scrollbars on prompts */
            div.nbinput.container div.prompt pre,
            div.nboutput.container div.prompt pre {
                overflow: hidden;
            }

            /* input/output area */
            div.nbinput.container div.input_area,
            div.nboutput.container div.output_area {
                -webkit-flex: 1;
                flex: 1;
                overflow: auto;
            }
            @media (max-width: 540px) {
                div.nbinput.container div.input_area,
                div.nboutput.container div.output_area {
                    width: 100%;
                }
            }

            /* input area */
            div.nbinput.container div.input_area {
                border: 1px solid #e0e0e0;
                border-radius: 2px;
                /*background: #f5f5f5;*/
            }

            /* override MathJax center alignment in output cells */
            div.nboutput.container div[class*=MathJax] {
                text-align: left !important;
            }

            /* override sphinx.ext.imgmath center alignment in output cells */
            div.nboutput.container div.math p {
                text-align: left;
            }

            /* standard error */
            div.nboutput.container div.output_area.stderr {
                background: #fdd;
            }

            /* ANSI colors */
            .ansi-black-fg { color: #3E424D; }
            .ansi-black-bg { background-color: #3E424D; }
            .ansi-black-intense-fg { color: #282C36; }
            .ansi-black-intense-bg { background-color: #282C36; }
            .ansi-red-fg { color: #E75C58; }
            .ansi-red-bg { background-color: #E75C58; }
            .ansi-red-intense-fg { color: #B22B31; }
            .ansi-red-intense-bg { background-color: #B22B31; }
            .ansi-green-fg { color: #00A250; }
            .ansi-green-bg { background-color: #00A250; }
            .ansi-green-intense-fg { color: #007427; }
            .ansi-green-intense-bg { background-color: #007427; }
            .ansi-yellow-fg { color: #DDB62B; }
            .ansi-yellow-bg { background-color: #DDB62B; }
            .ansi-yellow-intense-fg { color: #B27D12; }
            .ansi-yellow-intense-bg { background-color: #B27D12; }
            .ansi-blue-fg { color: #208FFB; }
            .ansi-blue-bg { background-color: #208FFB; }
            .ansi-blue-intense-fg { color: #0065CA; }
            .ansi-blue-intense-bg { background-color: #0065CA; }
            .ansi-magenta-fg { color: #D160C4; }
            .ansi-magenta-bg { background-color: #D160C4; }
            .ansi-magenta-intense-fg { color: #A03196; }
            .ansi-magenta-intense-bg { background-color: #A03196; }
            .ansi-cyan-fg { color: #60C6C8; }
            .ansi-cyan-bg { background-color: #60C6C8; }
            .ansi-cyan-intense-fg { color: #258F8F; }
            .ansi-cyan-intense-bg { background-color: #258F8F; }
            .ansi-white-fg { color: #C5C1B4; }
            .ansi-white-bg { background-color: #C5C1B4; }
            .ansi-white-intense-fg { color: #A1A6B2; }
            .ansi-white-intense-bg { background-color: #A1A6B2; }

            .ansi-default-inverse-fg { color: #FFFFFF; }
            .ansi-default-inverse-bg { background-color: #000000; }

            .ansi-bold { font-weight: bold; }
            .ansi-underline { text-decoration: underline; }


            div.nbinput.container div.input_area div[class*=highlight] > pre,
            div.nboutput.container div.output_area div[class*=highlight] > pre,
            div.nboutput.container div.output_area div[class*=highlight].math,
            div.nboutput.container div.output_area.rendered_html,
            div.nboutput.container div.output_area > div.output_javascript,
            div.nboutput.container div.output_area:not(.rendered_html) > img{
                padding: 5px;
                margin: 0;
            }

            /* fix copybtn overflow problem in chromium (needed for 'sphinx_copybutton') */
            div.nbinput.container div.input_area > div[class^='highlight'],
            div.nboutput.container div.output_area > div[class^='highlight']{
                overflow-y: hidden;
            }

            /* hide copybtn icon on prompts (needed for 'sphinx_copybutton') */
            .prompt .copybtn {
                display: none;
            }

            /* Some additional styling taken form the Jupyter notebook CSS */
            div.rendered_html table {
            border: none;
            border-collapse: collapse;
            border-spacing: 0;
            color: black;
            font-size: 12px;
            table-layout: fixed;
            }
            div.rendered_html thead {
            border-bottom: 1px solid black;
            vertical-align: bottom;
            }
            div.rendered_html tr,
            div.rendered_html th,
            div.rendered_html td {
            text-align: right;
            vertical-align: middle;
            padding: 0.5em 0.5em;
            line-height: normal;
            white-space: normal;
            max-width: none;
            border: none;
            }
            div.rendered_html th {
            font-weight: bold;
            }
            div.rendered_html tbody tr:nth-child(odd) {
            background: #f5f5f5;
            }
            div.rendered_html tbody tr:hover {
            background: rgba(66, 165, 245, 0.2);
            }
        </style>
    </head>
    <body>
        <script src="https://unpkg.com/@jupyter-widgets/html-manager@^0.20.1/dist/embed.js" crossorigin="anonymous"></script>
    

    <script type="application/vnd.jupyter.widget-state+json">
    {"version_major": 2, "version_minor": 0, "state": {"ddbe9715fc2942a4a074dc3e02607ed4": {"model_name": "AccordionModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "_titles": {"0": "Model Evaluation Suite"}, "children": ["IPY_MODEL_d749427b56c34e058ca6dad13a669dd2"], "layout": "IPY_MODEL_ee0b16ca32754a77b1fc41fbf126614c"}}, "d749427b56c34e058ca6dad13a669dd2": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_0cea0c52a93d448eb7ec7286acab6821", "IPY_MODEL_eee69b2486bf4de494d386d86e87133b", "IPY_MODEL_eaff94cd5d5a4c7ea6d3ddd46211ff19", "IPY_MODEL_c1aad8912a1b4ebcbc44a29bd2eef064", "IPY_MODEL_6ea00567bae84457bd05046b86faac85"], "layout": "IPY_MODEL_8d1cc23b876b4aa59e18adb34e144a1c"}}, "0cea0c52a93d448eb7ec7286acab6821": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_af3794865bd14f579c6bd56266ed1625", "style": "IPY_MODEL_103c9e3ffb644e2d8d35c5f35963d55a", "value": "\n            <h1 id=\"summary_UH17J8QO09VS9KKH4A3YJTU7F\">Model Evaluation Suite</h1>\n            <p>\n                The suite is composed of various checks such as: Image Segment Performance, Simple Model Comparison, Train Test Prediction Drift, etc...<br>\n                Each check may contain conditions (which will result in pass / fail / warning / error\n                , represented by \n<span style=\"color: green;display:inline-block\">\u2713</span> /\n<span style=\"color: red;display:inline-block\">\u2716</span> /\n<span style=\"color: orange;font-weight:bold;display:inline-block\">!</span> /\n<span style=\"color: firebrick;font-weight:bold;display:inline-block\">\u2048</span>\n) as well as other outputs such as plots or tables.<br>\n                Suites, checks and conditions can all be modified. Read more about\n                <a href=https://docs.deepchecks.com/en/stable/examples/guides/create_a_custom_suite.html?utm_source=display_output&utm_medium=referral&utm_campaign=suite_link target=\"_blank\">custom suites</a>.\n            </p>\n\n"}}, "af3794865bd14f579c6bd56266ed1625": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "103c9e3ffb644e2d8d35c5f35963d55a": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "eee69b2486bf4de494d386d86e87133b": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_bd3108a93c1c464499e240ef00dd7b0f", "IPY_MODEL_686506d005cb455498dfe844d096f251"], "layout": "IPY_MODEL_749048a1b33347ae8a69661262d963e9"}}, "bd3108a93c1c464499e240ef00dd7b0f": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_61985c13c979453a9521ff74d14a334e", "style": "IPY_MODEL_8b9a7b9743eb4114bc12aea8205a0d48", "value": "<span id=\"summary_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\"></span>"}}, "61985c13c979453a9521ff74d14a334e": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "8b9a7b9743eb4114bc12aea8205a0d48": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "686506d005cb455498dfe844d096f251": {"model_name": "AccordionModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "_titles": {"0": "Didn't Pass"}, "children": ["IPY_MODEL_2b9bc25cf7ba4ba18ab3735b52391b1b"], "layout": "IPY_MODEL_5c1154af0a9f4e2aaa460a8de0ccdc2e", "selected_index": null}}, "2b9bc25cf7ba4ba18ab3735b52391b1b": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_528a18cdf16d4d8188fca3e05005df97", "IPY_MODEL_dc54b2a6440d49af84e009b01c230f42", "IPY_MODEL_b66f33fab3ff4310a8b083d232157c9b", "IPY_MODEL_aee4ff5d95ce44f6b35675d9b33b030e", "IPY_MODEL_81298e29a0ed432a9f85763e167b5372", "IPY_MODEL_aee4ff5d95ce44f6b35675d9b33b030e", "IPY_MODEL_9a044a7cc40e449687efb9eea187559b", "IPY_MODEL_aee4ff5d95ce44f6b35675d9b33b030e", "IPY_MODEL_7e130471d8ca4c37ada50b8b29687839", "IPY_MODEL_aee4ff5d95ce44f6b35675d9b33b030e", "IPY_MODEL_ac26a2d46714432ba0b4b56a97db9306"], "layout": "IPY_MODEL_31dd9699d8c94bfdadc8ecb9eaa8101b"}}, "528a18cdf16d4d8188fca3e05005df97": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_703b9dfdacbb41069dc837524c849390", "style": "IPY_MODEL_2575062ca5c34e82a57d02de254509aa", "value": "<style type=\"text/css\">\n#T_f61cc_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_f61cc_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_f61cc_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_f61cc_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_f61cc_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_f61cc_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Status</th>\n      <th class=\"col_heading level0 col1\" >Check</th>\n      <th class=\"col_heading level0 col2\" >Condition</th>\n      <th class=\"col_heading level0 col3\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_f61cc_row0_col0\" class=\"data row0 col0\" ><div style=\"color: red;text-align: center\">\u2716</div></td>\n      <td id=\"T_f61cc_row0_col1\" class=\"data row0 col1\" ><a href=\"#ClassPerformance_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\">Class Performance</a></td>\n      <td id=\"T_f61cc_row0_col2\" class=\"data row0 col2\" >Train-Test scores relative degradation is less than 0.1</td>\n      <td id=\"T_f61cc_row0_col3\" class=\"data row0 col3\" >2 scores failed. Found max degradation of 49.42% for metric Average Precision and class Tomato.</td>\n    </tr>\n    <tr>\n      <td id=\"T_f61cc_row1_col0\" class=\"data row1 col0\" ><div style=\"color: red;text-align: center\">\u2716</div></td>\n      <td id=\"T_f61cc_row1_col1\" class=\"data row1 col1\" ><a href=\"#MeanAveragePrecisionReport-TestDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\">Mean Average Precision Report - Test Dataset</a></td>\n      <td id=\"T_f61cc_row1_col2\" class=\"data row1 col2\" >mAP score is greater than 0.3</td>\n      <td id=\"T_f61cc_row1_col3\" class=\"data row1 col3\" >mAP score is: 0.01</td>\n    </tr>\n    <tr>\n      <td id=\"T_f61cc_row2_col0\" class=\"data row2 col0\" ><div style=\"color: red;text-align: center\">\u2716</div></td>\n      <td id=\"T_f61cc_row2_col1\" class=\"data row2 col1\" ><a href=\"#MeanAveragePrecisionReport-TrainDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\">Mean Average Precision Report - Train Dataset</a></td>\n      <td id=\"T_f61cc_row2_col2\" class=\"data row2 col2\" >mAP score is greater than 0.3</td>\n      <td id=\"T_f61cc_row2_col3\" class=\"data row2 col3\" >mAP score is: 0.03</td>\n    </tr>\n    <tr>\n      <td id=\"T_f61cc_row3_col0\" class=\"data row3 col0\" ><div style=\"color: red;text-align: center\">\u2716</div></td>\n      <td id=\"T_f61cc_row3_col1\" class=\"data row3 col1\" ><a href=\"#ImageSegmentPerformance-TestDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\">Image Segment Performance - Test Dataset</a></td>\n      <td id=\"T_f61cc_row3_col2\" class=\"data row3 col2\" >Segment's ratio between score to mean is greater than 80%</td>\n      <td id=\"T_f61cc_row3_col3\" class=\"data row3 col3\" >Properties with failed segments: Brightness: {'Range': '(-inf, 0.33)', 'Metric': 'Average Precision', 'Ratio': 0.11}, Mean Blue Relative Intensity: {'Range': '[0.2, 0.23)', 'Metric': 'Average Precision', 'Ratio': 0.29}, Mean Green Relative Intensity: {'Range': '[0.41, 0.45)', 'Metric': 'Average Reca...</td>\n    </tr>\n    <tr>\n      <td id=\"T_f61cc_row4_col0\" class=\"data row4 col0\" ><div style=\"color: red;text-align: center\">\u2716</div></td>\n      <td id=\"T_f61cc_row4_col1\" class=\"data row4 col1\" ><a href=\"#ImageSegmentPerformance-TrainDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\">Image Segment Performance - Train Dataset</a></td>\n      <td id=\"T_f61cc_row4_col2\" class=\"data row4 col2\" >Segment's ratio between score to mean is greater than 80%</td>\n      <td id=\"T_f61cc_row4_col3\" class=\"data row4 col3\" >Properties with failed segments: Brightness: {'Range': '[0.32, 0.38)', 'Metric': 'Average Recall', 'Ratio': 0.53}, Mean Blue Relative Intensity: {'Range': '(-inf, 0.2)', 'Metric': 'Average Recall', 'Ratio': 0.68}, Mean Green Relative Intensity: {'Range': '[0.45, 0.48)', 'Metric': 'Average Precision'...</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "703b9dfdacbb41069dc837524c849390": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "2575062ca5c34e82a57d02de254509aa": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "dc54b2a6440d49af84e009b01c230f42": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_6333f42914494b10b501a13778665604", "style": "IPY_MODEL_067fb0a7b9124e0f9d6fb7896b70a943", "value": "<hr style=\"background-color: #eee;border: 0 none;color: #eee;height: 4px;\">"}}, "6333f42914494b10b501a13778665604": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "067fb0a7b9124e0f9d6fb7896b70a943": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "b66f33fab3ff4310a8b083d232157c9b": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "children": ["IPY_MODEL_d22b8668ef0b43ff82a3a564a4339427", "IPY_MODEL_6beeb32abc414b9e9ab1f6b315452988", "IPY_MODEL_e369aa6736b44d4f98a3235b579942eb", "IPY_MODEL_14ecba1a97ed4160beb7c4d435e5c61a"], "layout": "IPY_MODEL_dd6428d02e914fde8522fd44edf02c66"}}, "d22b8668ef0b43ff82a3a564a4339427": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_ec2da48e90ac4845bc366ada85b4619c", "style": "IPY_MODEL_7523f11957a34383a95fecf6fb61e34d", "value": "<h4 id=\"ClassPerformance_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\"><b>Class Performance</b></h4>"}}, "ec2da48e90ac4845bc366ada85b4619c": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "7523f11957a34383a95fecf6fb61e34d": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "6beeb32abc414b9e9ab1f6b315452988": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_554eab56c539486dba4388e9b72d91db", "style": "IPY_MODEL_966efdab04d242a5a39cf725a94e3a23", "value": "<p>Summarize given metrics on a dataset and model. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_class_performance.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"}}, "554eab56c539486dba4388e9b72d91db": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "966efdab04d242a5a39cf725a94e3a23": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "e369aa6736b44d4f98a3235b579942eb": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_4499b7b3a2e24708985cad78823818ce", "style": "IPY_MODEL_54046adfde2844148a50f3cbb70b5e39", "value": "<h5><b>Conditions Summary</b></h5><style type=\"text/css\">\n#T_847b1_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_847b1_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_847b1_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_847b1_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_847b1_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_847b1_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Status</th>\n      <th class=\"col_heading level0 col1\" >Condition</th>\n      <th class=\"col_heading level0 col2\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_847b1_row0_col0\" class=\"data row0 col0\" ><div style=\"color: red;text-align: center\">\u2716</div></td>\n      <td id=\"T_847b1_row0_col1\" class=\"data row0 col1\" >Train-Test scores relative degradation is less than 0.1</td>\n      <td id=\"T_847b1_row0_col2\" class=\"data row0 col2\" >2 scores failed. Found max degradation of 49.42% for metric Average Precision and class Tomato.</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "4499b7b3a2e24708985cad78823818ce": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "54046adfde2844148a50f3cbb70b5e39": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "14ecba1a97ed4160beb7c4d435e5c61a": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_c7677b88c7504450bd37b8a618a2d8b2", "IPY_MODEL_6d10ecff4e8941b99fb2d4120291ef42", "IPY_MODEL_70b2a19d759b46f7a00f3cdced516095"], "layout": "IPY_MODEL_f94131e06abe489682b5f8c92b6c07f1"}}, "c7677b88c7504450bd37b8a618a2d8b2": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_52ec3340c5cb4b81b674f3dcfffc0232", "style": "IPY_MODEL_ed3a521b42274303bcdc8569c4238f72", "value": "<h5><b>Additional Outputs</b></h5>"}}, "52ec3340c5cb4b81b674f3dcfffc0232": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "ed3a521b42274303bcdc8569c4238f72": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "6d10ecff4e8941b99fb2d4120291ef42": {"model_name": "FigureModel", "model_module": "jupyterlab-plotly", "model_module_version": "^5.11.0", "state": {"_config": {"plotlyServerURL": "https://plot.ly"}, "_data": [{"alignmentgroup": "True", "bingroup": "x", "histfunc": "sum", "hovertemplate": "Dataset=Train<br>Metric=Average Recall<br>Class Name=%{x}<br>sum of Value=%{y}<extra></extra>", "legendgroup": "Train", "marker": {"color": "#00008b", "pattern": {"shape": ""}}, "name": "Train", "offsetgroup": "Train", "orientation": "v", "showlegend": true, "x": ["Tomato"], "xaxis": "x", "y": {"dtype": "float64", "shape": [1]}, "yaxis": "y", "type": "histogram", "uid": "c14133a5-5312-42bc-a274-85bb476d7325"}, {"alignmentgroup": "True", "bingroup": "x", "histfunc": "sum", "hovertemplate": "Dataset=Train<br>Metric=Average Precision<br>Class Name=%{x}<br>sum of Value=%{y}<extra></extra>", "legendgroup": "Train", "marker": {"color": "#00008b", "pattern": {"shape": ""}}, "name": "Train", "offsetgroup": "Train", "orientation": "v", "showlegend": false, "x": ["Tomato"], "xaxis": "x2", "y": {"dtype": "float64", "shape": [1]}, "yaxis": "y2", "type": "histogram", "uid": "6c04c4ef-4d7a-4a12-b28f-6068258a7f75"}, {"alignmentgroup": "True", "bingroup": "x", "histfunc": "sum", "hovertemplate": "Dataset=Test<br>Metric=Average Recall<br>Class Name=%{x}<br>sum of Value=%{y}<extra></extra>", "legendgroup": "Test", "marker": {"color": "#69b3a2", "pattern": {"shape": ""}}, "name": "Test", "offsetgroup": "Test", "orientation": "v", "showlegend": true, "x": ["Tomato"], "xaxis": "x", "y": {"dtype": "float64", "shape": [1]}, "yaxis": "y", "type": "histogram", "uid": "d3682fce-1919-428b-8841-1f56d8afe989"}, {"alignmentgroup": "True", "bingroup": "x", "histfunc": "sum", "hovertemplate": "Dataset=Test<br>Metric=Average Precision<br>Class Name=%{x}<br>sum of Value=%{y}<extra></extra>", "legendgroup": "Test", "marker": {"color": "#69b3a2", "pattern": {"shape": ""}}, "name": "Test", "offsetgroup": "Test", "orientation": "v", "showlegend": false, "x": ["Tomato"], "xaxis": "x2", "y": {"dtype": "float64", "shape": [1]}, "yaxis": "y2", "type": "histogram", "uid": "42e4daeb-b6c1-4cba-8899-122f083cd877"}], "_dom_classes": [], "_js2py_layoutDelta": {}, "_js2py_pointsCallback": {}, "_js2py_relayout": {}, "_js2py_restyle": {}, "_js2py_traceDeltas": {}, "_js2py_update": {}, "_layout": {"annotations": [{"showarrow": false, "text": "Average Recall", "x": 0.2375, "xanchor": "center", "xref": "paper", "y": 1.0, "yanchor": "bottom", "yref": "paper"}, {"showarrow": false, "text": "Average Precision", "x": 0.7625, "xanchor": "center", "xref": "paper", "y": 1.0, "yanchor": "bottom", "yref": "paper"}], "barmode": "group", "legend": {"title": {"text": "Dataset"}, "tracegroupgap": 0}, "margin": {"t": 60}, "template": {"data": {"barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "barpolar"}], "bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "bar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram": [{"marker": {"pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "histogram"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatter": [{"fillpattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}, "type": "scatter"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "xaxis": {"anchor": "y", "domain": [0.0, 0.475], "title": {"text": "Class"}, "type": "category"}, "yaxis": {"anchor": "x", "domain": [0.0, 1.0], "showticklabels": true, "title": {"text": "Value"}}, "xaxis2": {"anchor": "y2", "domain": [0.525, 1.0], "matches": "x", "title": {"text": "Class"}, "type": "category"}, "yaxis2": {"anchor": "x2", "domain": [0.0, 1.0], "showticklabels": true, "title": {"text": "Value"}}}, "_py2js_addTraces": {}, "_py2js_animate": {}, "_py2js_deleteTraces": {}, "_py2js_moveTraces": {}, "_py2js_relayout": {}, "_py2js_removeLayoutProps": {}, "_py2js_removeTraceProps": {}, "_py2js_restyle": {}, "_py2js_update": {}, "_view_count": 0}, "buffers": [{"encoding": "base64", "path": ["_data", 0, "y", "buffer"], "data": "a7nPcI9Srz8="}, {"encoding": "base64", "path": ["_data", 1, "y", "buffer"], "data": "Nr3odJkgnT8="}, {"encoding": "base64", "path": ["_data", 2, "y", "buffer"], "data": "gaoocvZKpj8="}, {"encoding": "base64", "path": ["_data", 3, "y", "buffer"], "data": "XTbPw752jT8="}]}, "70b2a19d759b46f7a00f3cdced516095": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_3cd2a9a064f24a14a0a89cd1920487b5", "style": "IPY_MODEL_a245159b99014e52963dd1e55bd1c5fe", "value": "<br><a href=\"#summary_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\" style=\"font-size: 14px;\">Go to top</a>"}}, "3cd2a9a064f24a14a0a89cd1920487b5": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "a245159b99014e52963dd1e55bd1c5fe": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "f94131e06abe489682b5f8c92b6c07f1": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "dd6428d02e914fde8522fd44edf02c66": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "aee4ff5d95ce44f6b35675d9b33b030e": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_c18b62a6622e40c39b98004dd8573b2f", "style": "IPY_MODEL_46c8b6373bf0487eaca83637cfcbe6bc", "value": "<hr style=\"background-color: #eee;border: 0 none;color: #eee;height: 4px;\">"}}, "c18b62a6622e40c39b98004dd8573b2f": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "46c8b6373bf0487eaca83637cfcbe6bc": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "81298e29a0ed432a9f85763e167b5372": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "children": ["IPY_MODEL_5d8aceedb6b84edaa173fe886d29a024", "IPY_MODEL_2741dd95ef7641ef9c2cfaa95e499f2b", "IPY_MODEL_d301761754d3438b9f56766f9d9e2250", "IPY_MODEL_b4f58bdaef6043c1a338ead46df9344c"], "layout": "IPY_MODEL_5887d902bc7647248b0b6ba5c4ca3153"}}, "5d8aceedb6b84edaa173fe886d29a024": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_340b24bf969f4e86a2e09d4ae3c51a8c", "style": "IPY_MODEL_7d8820bc54804fec9e4e9ea4e3a74466", "value": "<h4 id=\"MeanAveragePrecisionReport-TestDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\"><b>Mean Average Precision Report - Test Dataset</b></h4>"}}, "340b24bf969f4e86a2e09d4ae3c51a8c": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "7d8820bc54804fec9e4e9ea4e3a74466": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "2741dd95ef7641ef9c2cfaa95e499f2b": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_ee892599192841ca82adb32a629a5ac0", "style": "IPY_MODEL_566070c01005470db49c4522e4fee5f7", "value": "<p>Summarize mean average precision metrics on a dataset and model per IoU and bounding box area. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_mean_average_precision_report.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"}}, "ee892599192841ca82adb32a629a5ac0": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "566070c01005470db49c4522e4fee5f7": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "d301761754d3438b9f56766f9d9e2250": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_5e11cd0c4f354ccfbf3b0b9bd578a723", "style": "IPY_MODEL_88b5fe25a0a34bca9476120be2ebb99e", "value": "<h5><b>Conditions Summary</b></h5><style type=\"text/css\">\n#T_d900f_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_d900f_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_d900f_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_d900f_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_d900f_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_d900f_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Status</th>\n      <th class=\"col_heading level0 col1\" >Condition</th>\n      <th class=\"col_heading level0 col2\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_d900f_row0_col0\" class=\"data row0 col0\" ><div style=\"color: red;text-align: center\">\u2716</div></td>\n      <td id=\"T_d900f_row0_col1\" class=\"data row0 col1\" >mAP score is greater than 0.3</td>\n      <td id=\"T_d900f_row0_col2\" class=\"data row0 col2\" >mAP score is: 0.01</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "5e11cd0c4f354ccfbf3b0b9bd578a723": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "88b5fe25a0a34bca9476120be2ebb99e": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "b4f58bdaef6043c1a338ead46df9344c": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_e420cfb5ce674316952a834277b149c0", "IPY_MODEL_08b9e4cfee714cd3a967343f14a2c2a0", "IPY_MODEL_4eed8a387bf247069b05d7c68ff662bf", "IPY_MODEL_ef07f08e86924aaca6b4e93141b5e3ed"], "layout": "IPY_MODEL_fdd384dc966c4c518935d9af2bff456b"}}, "e420cfb5ce674316952a834277b149c0": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_257bae59fa514fae9ec3fe998f77a6e9", "style": "IPY_MODEL_c3712935a7d743a193652b44d4a3b267", "value": "<h5><b>Additional Outputs</b></h5>"}}, "257bae59fa514fae9ec3fe998f77a6e9": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "c3712935a7d743a193652b44d4a3b267": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "08b9e4cfee714cd3a967343f14a2c2a0": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_f7ca46a040f9447fa74630b8d70f4376", "style": "IPY_MODEL_9b3e531051a64300a09f37c11d932a22", "value": "<style type=\"text/css\">\n#T_b9a50_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_b9a50_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_b9a50_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_b9a50_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_b9a50_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_b9a50_\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th class=\"col_heading level0 col0\" >mAP@[.50::.95] (avg.%)</th>\n      <th class=\"col_heading level0 col1\" >mAP@.50 (%)</th>\n      <th class=\"col_heading level0 col2\" >mAP@.75 (%)</th>\n    </tr>\n    <tr>\n      <th class=\"index_name level0\" >Area size</th>\n      <th class=\"blank col0\" >&nbsp;</th>\n      <th class=\"blank col1\" >&nbsp;</th>\n      <th class=\"blank col2\" >&nbsp;</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_b9a50_level0_row0\" class=\"row_heading level0 row0\" >All</th>\n      <td id=\"T_b9a50_row0_col0\" class=\"data row0 col0\" >0.01</td>\n      <td id=\"T_b9a50_row0_col1\" class=\"data row0 col1\" >0.05</td>\n      <td id=\"T_b9a50_row0_col2\" class=\"data row0 col2\" >0.01</td>\n    </tr>\n    <tr>\n      <th id=\"T_b9a50_level0_row1\" class=\"row_heading level0 row1\" >Small (area < 32^2)</th>\n      <td id=\"T_b9a50_row1_col0\" class=\"data row1 col0\" >0.00</td>\n      <td id=\"T_b9a50_row1_col1\" class=\"data row1 col1\" >0.01</td>\n      <td id=\"T_b9a50_row1_col2\" class=\"data row1 col2\" >0.00</td>\n    </tr>\n    <tr>\n      <th id=\"T_b9a50_level0_row2\" class=\"row_heading level0 row2\" >Medium (32^2 < area < 96^2)</th>\n      <td id=\"T_b9a50_row2_col0\" class=\"data row2 col0\" >0.06</td>\n      <td id=\"T_b9a50_row2_col1\" class=\"data row2 col1\" >0.20</td>\n      <td id=\"T_b9a50_row2_col2\" class=\"data row2 col2\" >0.02</td>\n    </tr>\n    <tr>\n      <th id=\"T_b9a50_level0_row3\" class=\"row_heading level0 row3\" >Large (area < 96^2)</th>\n      <td id=\"T_b9a50_row3_col0\" class=\"data row3 col0\" >0.00</td>\n      <td id=\"T_b9a50_row3_col1\" class=\"data row3 col1\" >0.00</td>\n      <td id=\"T_b9a50_row3_col2\" class=\"data row3 col2\" >0.00</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "f7ca46a040f9447fa74630b8d70f4376": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "9b3e531051a64300a09f37c11d932a22": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "4eed8a387bf247069b05d7c68ff662bf": {"model_name": "FigureModel", "model_module": "jupyterlab-plotly", "model_module_version": "^5.11.0", "state": {"_config": {"plotlyServerURL": "https://plot.ly"}, "_data": [{"hovertemplate": "IoU threshold=%{x}<br>mAP (%)=%{y}<extra></extra>", "legendgroup": "", "line": {"color": "#636efa", "dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines", "name": "", "orientation": "v", "showlegend": false, "x": {"dtype": "float64", "shape": [10]}, "xaxis": "x", "y": {"dtype": "float64", "shape": [10]}, "yaxis": "y", "type": "scatter", "uid": "a75e2880-1432-46e6-a67e-6a194b8813a9"}], "_dom_classes": [], "_js2py_layoutDelta": {}, "_js2py_pointsCallback": {}, "_js2py_relayout": {}, "_js2py_restyle": {}, "_js2py_traceDeltas": {}, "_js2py_update": {}, "_layout": {"legend": {"tracegroupgap": 0}, "template": {"data": {"barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "barpolar"}], "bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "bar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram": [{"marker": {"pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "histogram"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatter": [{"fillpattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}, "type": "scatter"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "title": {"text": "Mean Average Precision over increasing IoU thresholds"}, "xaxis": {"anchor": "y", "domain": [0.0, 1.0], "title": {"text": "IoU threshold"}}, "yaxis": {"anchor": "x", "domain": [0.0, 1.0], "title": {"text": "mAP (%)"}}}, "_py2js_addTraces": {}, "_py2js_animate": {}, "_py2js_deleteTraces": {}, "_py2js_moveTraces": {}, "_py2js_relayout": {}, "_py2js_removeLayoutProps": {}, "_py2js_removeTraceProps": {}, "_py2js_restyle": {}, "_py2js_update": {}, "_view_count": 0}, "buffers": [{"encoding": "base64", "path": ["_data", 0, "x", "buffer"], "data": "AAAAAAAA4D+amZmZmZnhPzMzMzMzM+M/zczMzMzM5D9mZmZmZmbmPwAAAAAAAOg/mpmZmZmZ6T8zMzMzMzPrP8zMzMzMzOw/ZmZmZmZm7j8="}, {"encoding": "base64", "path": ["_data", 0, "y", "buffer"], "data": "BgvmbtEZqz+QrX77JeSgPw/SHG8RMZg/FzPxFFFKkD+d5TgXdvSFP90AvT0pBnc/cGmN5aPcWj+g9wM0ODY8PwAAAAAAAAAAAAAAAAAAAAA="}]}, "ef07f08e86924aaca6b4e93141b5e3ed": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_2d05f9c7fe204810a5d8a3dbfae4355a", "style": "IPY_MODEL_14dfa09056cc42b090a092e5b813d24b", "value": "<br><a href=\"#summary_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\" style=\"font-size: 14px;\">Go to top</a>"}}, "2d05f9c7fe204810a5d8a3dbfae4355a": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "14dfa09056cc42b090a092e5b813d24b": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "fdd384dc966c4c518935d9af2bff456b": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "5887d902bc7647248b0b6ba5c4ca3153": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "9a044a7cc40e449687efb9eea187559b": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "children": ["IPY_MODEL_d4c4dd5d8821489ca1e7965f66784b2c", "IPY_MODEL_cd3dd0c3392946ebba9ab8d77c569a35", "IPY_MODEL_5e755f1b8a6f4bacb6660a0ca108593a", "IPY_MODEL_9fc6fb51a4454e799a324193c3353d49"], "layout": "IPY_MODEL_eb8d489280054c9cad6963945cf3af88"}}, "d4c4dd5d8821489ca1e7965f66784b2c": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_6abf6877980143f282ecffee95ea7961", "style": "IPY_MODEL_75e30402c9864b4ba0ce6360ff509758", "value": "<h4 id=\"MeanAveragePrecisionReport-TrainDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\"><b>Mean Average Precision Report - Train Dataset</b></h4>"}}, "6abf6877980143f282ecffee95ea7961": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "75e30402c9864b4ba0ce6360ff509758": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "cd3dd0c3392946ebba9ab8d77c569a35": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_9dee4bcce4cd4526bb60322362afe98a", "style": "IPY_MODEL_4f981323c39546c4a9273eae621c72cb", "value": "<p>Summarize mean average precision metrics on a dataset and model per IoU and bounding box area. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_mean_average_precision_report.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"}}, "9dee4bcce4cd4526bb60322362afe98a": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "4f981323c39546c4a9273eae621c72cb": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "5e755f1b8a6f4bacb6660a0ca108593a": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_1debf843eb364ba3b86ff0b5f774986f", "style": "IPY_MODEL_c5ae57be86ff4d4c8e0959706e83948f", "value": "<h5><b>Conditions Summary</b></h5><style type=\"text/css\">\n#T_629bc_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_629bc_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_629bc_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_629bc_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_629bc_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_629bc_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Status</th>\n      <th class=\"col_heading level0 col1\" >Condition</th>\n      <th class=\"col_heading level0 col2\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_629bc_row0_col0\" class=\"data row0 col0\" ><div style=\"color: red;text-align: center\">\u2716</div></td>\n      <td id=\"T_629bc_row0_col1\" class=\"data row0 col1\" >mAP score is greater than 0.3</td>\n      <td id=\"T_629bc_row0_col2\" class=\"data row0 col2\" >mAP score is: 0.03</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "1debf843eb364ba3b86ff0b5f774986f": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "c5ae57be86ff4d4c8e0959706e83948f": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "9fc6fb51a4454e799a324193c3353d49": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_e68ca240aec04a968a1a549ee43e411e", "IPY_MODEL_847cc02812fe4f878994fc752cd97106", "IPY_MODEL_9b43d7fa88d044efbdd58b36b0daca1e", "IPY_MODEL_c9c8652d7224479c93c850c105ccd87d"], "layout": "IPY_MODEL_7788cb0063c1431d905bfec37f2bc308"}}, "e68ca240aec04a968a1a549ee43e411e": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_a4efe48a8f5d4a38b7d4b5a728ab1bf3", "style": "IPY_MODEL_db57faa6afa24c51ac5d3fa6d019b121", "value": "<h5><b>Additional Outputs</b></h5>"}}, "a4efe48a8f5d4a38b7d4b5a728ab1bf3": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "db57faa6afa24c51ac5d3fa6d019b121": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "847cc02812fe4f878994fc752cd97106": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_72ab9b76893c416d9ea2472edfd49cd1", "style": "IPY_MODEL_34a78fde20ec4f8294e115d08aa95bbb", "value": "<style type=\"text/css\">\n#T_c3f8f_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_c3f8f_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_c3f8f_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_c3f8f_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_c3f8f_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_c3f8f_\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th class=\"col_heading level0 col0\" >mAP@[.50::.95] (avg.%)</th>\n      <th class=\"col_heading level0 col1\" >mAP@.50 (%)</th>\n      <th class=\"col_heading level0 col2\" >mAP@.75 (%)</th>\n    </tr>\n    <tr>\n      <th class=\"index_name level0\" >Area size</th>\n      <th class=\"blank col0\" >&nbsp;</th>\n      <th class=\"blank col1\" >&nbsp;</th>\n      <th class=\"blank col2\" >&nbsp;</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_c3f8f_level0_row0\" class=\"row_heading level0 row0\" >All</th>\n      <td id=\"T_c3f8f_row0_col0\" class=\"data row0 col0\" >0.03</td>\n      <td id=\"T_c3f8f_row0_col1\" class=\"data row0 col1\" >0.07</td>\n      <td id=\"T_c3f8f_row0_col2\" class=\"data row0 col2\" >0.02</td>\n    </tr>\n    <tr>\n      <th id=\"T_c3f8f_level0_row1\" class=\"row_heading level0 row1\" >Small (area < 32^2)</th>\n      <td id=\"T_c3f8f_row1_col0\" class=\"data row1 col0\" >0.00</td>\n      <td id=\"T_c3f8f_row1_col1\" class=\"data row1 col1\" >0.00</td>\n      <td id=\"T_c3f8f_row1_col2\" class=\"data row1 col2\" >0.00</td>\n    </tr>\n    <tr>\n      <th id=\"T_c3f8f_level0_row2\" class=\"row_heading level0 row2\" >Medium (32^2 < area < 96^2)</th>\n      <td id=\"T_c3f8f_row2_col0\" class=\"data row2 col0\" >0.10</td>\n      <td id=\"T_c3f8f_row2_col1\" class=\"data row2 col1\" >0.27</td>\n      <td id=\"T_c3f8f_row2_col2\" class=\"data row2 col2\" >0.06</td>\n    </tr>\n    <tr>\n      <th id=\"T_c3f8f_level0_row3\" class=\"row_heading level0 row3\" >Large (area < 96^2)</th>\n      <td id=\"T_c3f8f_row3_col0\" class=\"data row3 col0\" >0.02</td>\n      <td id=\"T_c3f8f_row3_col1\" class=\"data row3 col1\" >0.04</td>\n      <td id=\"T_c3f8f_row3_col2\" class=\"data row3 col2\" >0.02</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "72ab9b76893c416d9ea2472edfd49cd1": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "34a78fde20ec4f8294e115d08aa95bbb": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "9b43d7fa88d044efbdd58b36b0daca1e": {"model_name": "FigureModel", "model_module": "jupyterlab-plotly", "model_module_version": "^5.11.0", "state": {"_config": {"plotlyServerURL": "https://plot.ly"}, "_data": [{"hovertemplate": "IoU threshold=%{x}<br>mAP (%)=%{y}<extra></extra>", "legendgroup": "", "line": {"color": "#636efa", "dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines", "name": "", "orientation": "v", "showlegend": false, "x": {"dtype": "float64", "shape": [10]}, "xaxis": "x", "y": {"dtype": "float64", "shape": [10]}, "yaxis": "y", "type": "scatter", "uid": "31e116f2-769e-41d1-b753-d46c6aae084f"}], "_dom_classes": [], "_js2py_layoutDelta": {}, "_js2py_pointsCallback": {}, "_js2py_relayout": {}, "_js2py_restyle": {}, "_js2py_traceDeltas": {}, "_js2py_update": {}, "_layout": {"legend": {"tracegroupgap": 0}, "template": {"data": {"barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "barpolar"}], "bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "bar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram": [{"marker": {"pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "histogram"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatter": [{"fillpattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}, "type": "scatter"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "title": {"text": "Mean Average Precision over increasing IoU thresholds"}, "xaxis": {"anchor": "y", "domain": [0.0, 1.0], "title": {"text": "IoU threshold"}}, "yaxis": {"anchor": "x", "domain": [0.0, 1.0], "title": {"text": "mAP (%)"}}}, "_py2js_addTraces": {}, "_py2js_animate": {}, "_py2js_deleteTraces": {}, "_py2js_moveTraces": {}, "_py2js_relayout": {}, "_py2js_removeLayoutProps": {}, "_py2js_removeTraceProps": {}, "_py2js_restyle": {}, "_py2js_update": {}, "_view_count": 0}, "buffers": [{"encoding": "base64", "path": ["_data", 0, "x", "buffer"], "data": "AAAAAAAA4D+amZmZmZnhPzMzMzMzM+M/zczMzMzM5D9mZmZmZmbmPwAAAAAAAOg/mpmZmZmZ6T8zMzMzMzPrP8zMzMzMzOw/ZmZmZmZm7j8="}, {"encoding": "base64", "path": ["_data", 0, "y", "buffer"], "data": "BSFOmC5zsT8514rrNLyqP2iHz+I3DqU/v5hhfP1PoD+QNvwyd9uZP3+pzGst+ZM//fA+IwNojj+OtiyKbl+HP/GgbeQr0YQ/+tliZfhGhD8="}]}, "c9c8652d7224479c93c850c105ccd87d": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_684f34e2144f4291bfdde2eaa11a8edd", "style": "IPY_MODEL_72d67120f57944be99f77a4f71bb215a", "value": "<br><a href=\"#summary_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\" style=\"font-size: 14px;\">Go to top</a>"}}, "684f34e2144f4291bfdde2eaa11a8edd": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "72d67120f57944be99f77a4f71bb215a": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "7788cb0063c1431d905bfec37f2bc308": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "eb8d489280054c9cad6963945cf3af88": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "7e130471d8ca4c37ada50b8b29687839": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "children": ["IPY_MODEL_63439d3e884a48e980d908cb43a201e9", "IPY_MODEL_d5a5a37abe5944a2b7f7fdab3fc2a783", "IPY_MODEL_ac9e86e86a874e888046685e03a3883d", "IPY_MODEL_0a247a2e526e4c6e8e04c22fdc8cb84f"], "layout": "IPY_MODEL_d2793e2c51be4f87abd25a95c849a125"}}, "63439d3e884a48e980d908cb43a201e9": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_9df045a44fc141fcbaff01993bf9d28b", "style": "IPY_MODEL_5b870d140bce4d43a8ac86bb68236bcc", "value": "<h4 id=\"ImageSegmentPerformance-TestDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\"><b>Image Segment Performance - Test Dataset</b></h4>"}}, "9df045a44fc141fcbaff01993bf9d28b": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "5b870d140bce4d43a8ac86bb68236bcc": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "d5a5a37abe5944a2b7f7fdab3fc2a783": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_995bb2b15b644d5f9da8c7133256bafc", "style": "IPY_MODEL_76f02516786b4372bda3bc26e05a27c9", "value": "<p>Segment the data by various properties of the image, and compare the performance of the segments. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_image_segment_performance.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"}}, "995bb2b15b644d5f9da8c7133256bafc": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "76f02516786b4372bda3bc26e05a27c9": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "ac9e86e86a874e888046685e03a3883d": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_e05e2bc2569d4eba8b36f755a2697920", "style": "IPY_MODEL_3ff9538fd1ca40ca9f3d65a5f0ce5bfc", "value": "<h5><b>Conditions Summary</b></h5><style type=\"text/css\">\n#T_d4647_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_d4647_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_d4647_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_d4647_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_d4647_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_d4647_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Status</th>\n      <th class=\"col_heading level0 col1\" >Condition</th>\n      <th class=\"col_heading level0 col2\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_d4647_row0_col0\" class=\"data row0 col0\" ><div style=\"color: red;text-align: center\">\u2716</div></td>\n      <td id=\"T_d4647_row0_col1\" class=\"data row0 col1\" >Segment's ratio between score to mean is greater than 80%</td>\n      <td id=\"T_d4647_row0_col2\" class=\"data row0 col2\" >Properties with failed segments: Brightness: {'Range': '(-inf, 0.33)', 'Metric': 'Average Precision', 'Ratio': 0.11}, Mean Blue Relative Intensity: {'Range': '[0.2, 0.23)', 'Metric': 'Average Precision', 'Ratio': 0.29}, Mean Green Relative Intensity: {'Range': '[0.41, 0.45)', 'Metric': 'Average Recall', 'Ratio': 0.28}, Mean Red Relative Intensity: {'Range': '(-inf, 0.31)', 'Metric': 'Average Precision', 'Ratio': 0.03}, RMS Contrast: {'Range': '[0.16, 0.19)', 'Metric': 'Average Precision', 'Ratio': 0.45}</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "e05e2bc2569d4eba8b36f755a2697920": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "3ff9538fd1ca40ca9f3d65a5f0ce5bfc": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "0a247a2e526e4c6e8e04c22fdc8cb84f": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_fe1a340680514152862a9de479151cff", "IPY_MODEL_38ca0f57ddab44b098ed326d16bbe23d", "IPY_MODEL_15809008e2374d58a62849aac01aaa9c"], "layout": "IPY_MODEL_35cc1c85b61a45bdb7a704c1641ae7a8"}}, "fe1a340680514152862a9de479151cff": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_7802684f9ab5413f9fa09c01b29a96a8", "style": "IPY_MODEL_886cf6174d0b44d08b514144a3acc958", "value": "<h5><b>Additional Outputs</b></h5>"}}, "7802684f9ab5413f9fa09c01b29a96a8": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "886cf6174d0b44d08b514144a3acc958": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "38ca0f57ddab44b098ed326d16bbe23d": {"model_name": "FigureModel", "model_module": "jupyterlab-plotly", "model_module_version": "^5.11.0", "state": {"_config": {"plotlyServerURL": "https://plot.ly"}, "_data": [{"alignmentgroup": "True", "customdata": [[18], [18], [18], [18], [18]], "hovertemplate": "Metric=Average Precision<br>Property=Brightness<br>Range=%{x}<br>Value=%{y}<br>Number of samples=%{customdata[0]}<extra></extra>", "legendgroup": "Average Precision", "marker": {"color": "rgb(102, 197, 204)", "pattern": {"shape": ""}}, "name": "Average Precision", "offsetgroup": "Average Precision", "orientation": "v", "showlegend": true, "textposition": "auto", "width": 0.2, "x": ["(-inf, 0.33)", "[0.33, 0.38)", "[0.38, 0.44)", "[0.44, 0.52)", "[0.52, inf)"], "xaxis": "x", "y": {"dtype": "float64", "shape": [5]}, "yaxis": "y", "type": "bar", "uid": "12bd15e0-6ad3-4460-83c4-da47e21c754e"}, {"alignmentgroup": "True", "customdata": [[18], [18], [18], [18], [18]], "hovertemplate": "Metric=Average Precision<br>Property=RMS Contrast<br>Range=%{x}<br>Value=%{y}<br>Number of samples=%{customdata[0]}<extra></extra>", "legendgroup": "Average Precision", "marker": {"color": "rgb(102, 197, 204)", "pattern": {"shape": ""}}, "name": "Average Precision", "offsetgroup": "Average Precision", "orientation": "v", "showlegend": false, "textposition": "auto", "width": 0.2, "x": ["(-inf, 0.13)", "[0.13, 0.16)", "[0.16, 0.19)", "[0.19, 0.23)", "[0.23, inf)"], "xaxis": "x2", "y": {"dtype": "float64", "shape": [5]}, "yaxis": "y2", "type": "bar", "uid": "bb155a00-bda8-4d6b-b56d-d9854c115eed"}, {"alignmentgroup": "True", "customdata": [[18], [18], [18], [18], [18]], "hovertemplate": "Metric=Average Precision<br>Property=Mean Blue Relative Intensity<br>Range=%{x}<br>Value=%{y}<br>Number of samples=%{customdata[0]}<extra></extra>", "legendgroup": "Average Precision", "marker": {"color": "rgb(102, 197, 204)", "pattern": {"shape": ""}}, "name": "Average Precision", "offsetgroup": "Average Precision", "orientation": "v", "showlegend": false, "textposition": "auto", "width": 0.2, "x": ["(-inf, 0.2)", "[0.2, 0.23)", "[0.23, 0.26)", "[0.26, 0.29)", "[0.29, inf)"], "xaxis": "x3", "y": {"dtype": "float64", "shape": [5]}, "yaxis": "y3", "type": "bar", "uid": "5c0b5c02-a1c0-4d1f-89b2-4075d6814366"}], "_dom_classes": [], "_js2py_layoutDelta": {}, "_js2py_pointsCallback": {}, "_js2py_relayout": {}, "_js2py_restyle": {}, "_js2py_traceDeltas": {}, "_js2py_update": {}, "_layout": {"annotations": [{"showarrow": false, "text": "Brightness", "x": 0.14666666666666667, "xanchor": "center", "xref": "paper", "y": 1.0, "yanchor": "bottom", "yref": "paper"}, {"showarrow": false, "text": "RMS Contrast", "x": 0.49, "xanchor": "center", "xref": "paper", "y": 1.0, "yanchor": "bottom", "yref": "paper"}, {"showarrow": false, "text": "Mean Blue Relative Intensity", "x": 0.8333333333333333, "xanchor": "center", "xref": "paper", "y": 1.0, "yanchor": "bottom", "yref": "paper"}, {"showarrow": false, "text": "Average Precision", "textangle": 90, "x": 0.98, "xanchor": "left", "xref": "paper", "y": 0.5, "yanchor": "middle", "yref": "paper"}], "barmode": "group", "legend": {"title": {"text": "Metric"}, "tracegroupgap": 0}, "template": {"data": {"barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "barpolar"}], "bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "bar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram": [{"marker": {"pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "histogram"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatter": [{"fillpattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}, "type": "scatter"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "title": {"text": "Metric Score Per Property Value Segment (showing top 3 properties by diffrence in segments)"}, "xaxis": {"anchor": "y", "domain": [0.0, 0.29333333333333333], "type": "category"}, "yaxis": {"anchor": "x", "domain": [0.0, 1.0], "showticklabels": true}, "xaxis2": {"anchor": "y2", "domain": [0.3433333333333333, 0.6366666666666667], "type": "category"}, "yaxis2": {"anchor": "x2", "domain": [0.0, 1.0], "matches": "y", "showticklabels": true}, "xaxis3": {"anchor": "y3", "domain": [0.6866666666666666, 0.98], "type": "category"}, "yaxis3": {"anchor": "x3", "domain": [0.0, 1.0], "matches": "y", "showticklabels": true}}, "_py2js_addTraces": {}, "_py2js_animate": {}, "_py2js_deleteTraces": {}, "_py2js_moveTraces": {}, "_py2js_relayout": {}, "_py2js_removeLayoutProps": {}, "_py2js_removeTraceProps": {}, "_py2js_restyle": {}, "_py2js_update": {}, "_view_count": 0}, "buffers": [{"encoding": "base64", "path": ["_data", 0, "y", "buffer"], "data": "UOFT4sEBZD+6EJcGS8x1P2gkhY/WApw/UGgMQnwpoz/NSkZvchKmPw=="}, {"encoding": "base64", "path": ["_data", 1, "y", "buffer"], "data": "qjdGlZCXij9xnsMvsMiFP1b//Ih7IIM/ls5SDDJMrT8aPbEx4+6NPw=="}, {"encoding": "base64", "path": ["_data", 2, "y", "buffer"], "data": "SYq3yNbwgD9CQ0U/Qtd/PxDD/6MD8Is/5zzwEx41mT/6j4Ubqhi0Pw=="}]}, "15809008e2374d58a62849aac01aaa9c": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_257f9d7fa953476197734f7eb8690d28", "style": "IPY_MODEL_17bb27b08601494baca279c942cbde30", "value": "<br><a href=\"#summary_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\" style=\"font-size: 14px;\">Go to top</a>"}}, "257f9d7fa953476197734f7eb8690d28": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "17bb27b08601494baca279c942cbde30": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "35cc1c85b61a45bdb7a704c1641ae7a8": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "d2793e2c51be4f87abd25a95c849a125": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "ac26a2d46714432ba0b4b56a97db9306": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "children": ["IPY_MODEL_92793e90550e47608f54e72db1f0a3e6", "IPY_MODEL_85b76192be404768b5c578c8d46d04de", "IPY_MODEL_a1934f39240646209361e594b91f848f", "IPY_MODEL_3f39b6ddaa094cb3bd19c38050593bb7"], "layout": "IPY_MODEL_747ce802cc5b49569913e960153cf1c0"}}, "92793e90550e47608f54e72db1f0a3e6": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_aedb30f26505406a9f8527a7fc2d4354", "style": "IPY_MODEL_8670c5749eab482f9590797f8561a350", "value": "<h4 id=\"ImageSegmentPerformance-TrainDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\"><b>Image Segment Performance - Train Dataset</b></h4>"}}, "aedb30f26505406a9f8527a7fc2d4354": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "8670c5749eab482f9590797f8561a350": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "85b76192be404768b5c578c8d46d04de": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_18903112e3aa4dff9438d596a6774baa", "style": "IPY_MODEL_a31354229eb34eccb8c7d9858e52206a", "value": "<p>Segment the data by various properties of the image, and compare the performance of the segments. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_image_segment_performance.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"}}, "18903112e3aa4dff9438d596a6774baa": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "a31354229eb34eccb8c7d9858e52206a": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "a1934f39240646209361e594b91f848f": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_a070a704af1548c3a737e254f0414877", "style": "IPY_MODEL_daddd601d946413ba8f90246cfdb1d7f", "value": "<h5><b>Conditions Summary</b></h5><style type=\"text/css\">\n#T_a0f52_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_a0f52_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_a0f52_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_a0f52_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_a0f52_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_a0f52_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Status</th>\n      <th class=\"col_heading level0 col1\" >Condition</th>\n      <th class=\"col_heading level0 col2\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_a0f52_row0_col0\" class=\"data row0 col0\" ><div style=\"color: red;text-align: center\">\u2716</div></td>\n      <td id=\"T_a0f52_row0_col1\" class=\"data row0 col1\" >Segment's ratio between score to mean is greater than 80%</td>\n      <td id=\"T_a0f52_row0_col2\" class=\"data row0 col2\" >Properties with failed segments: Brightness: {'Range': '[0.32, 0.38)', 'Metric': 'Average Recall', 'Ratio': 0.53}, Mean Blue Relative Intensity: {'Range': '(-inf, 0.2)', 'Metric': 'Average Recall', 'Ratio': 0.68}, Mean Green Relative Intensity: {'Range': '[0.45, 0.48)', 'Metric': 'Average Precision', 'Ratio': 0.54}, Mean Red Relative Intensity: {'Range': '(-inf, 0.31)', 'Metric': 'Average Recall', 'Ratio': 0.71}, RMS Contrast: {'Range': '[0.17, 0.2)', 'Metric': 'Average Precision', 'Ratio': 0.64}</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "a070a704af1548c3a737e254f0414877": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "daddd601d946413ba8f90246cfdb1d7f": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "3f39b6ddaa094cb3bd19c38050593bb7": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_98ba203d2f494fb69c1982536528f585", "IPY_MODEL_067f8ffa273d44699067208a50540598", "IPY_MODEL_c9f6323028554302aebae530a3eb04e0"], "layout": "IPY_MODEL_a8778263d70f4986a0908567dcfa3940"}}, "98ba203d2f494fb69c1982536528f585": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_5d515319092249b7a06dfc925de080f3", "style": "IPY_MODEL_84b132a03b884ef3939b9a6b5c1337d9", "value": "<h5><b>Additional Outputs</b></h5>"}}, "5d515319092249b7a06dfc925de080f3": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "84b132a03b884ef3939b9a6b5c1337d9": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "067f8ffa273d44699067208a50540598": {"model_name": "FigureModel", "model_module": "jupyterlab-plotly", "model_module_version": "^5.11.0", "state": {"_config": {"plotlyServerURL": "https://plot.ly"}, "_data": [{"alignmentgroup": "True", "customdata": [[161], [161], [161], [161], [161]], "hovertemplate": "Metric=Average Precision<br>Property=RMS Contrast<br>Range=%{x}<br>Value=%{y}<br>Number of samples=%{customdata[0]}<extra></extra>", "legendgroup": "Average Precision", "marker": {"color": "rgb(102, 197, 204)", "pattern": {"shape": ""}}, "name": "Average Precision", "offsetgroup": "Average Precision", "orientation": "v", "showlegend": true, "textposition": "auto", "width": 0.2, "x": ["(-inf, 0.13)", "[0.13, 0.17)", "[0.17, 0.2)", "[0.2, 0.22)", "[0.22, inf)"], "xaxis": "x", "y": {"dtype": "float64", "shape": [5]}, "yaxis": "y", "type": "bar", "uid": "a083d961-9f09-4415-9bd3-ab72b77c6a57"}, {"alignmentgroup": "True", "customdata": [[161], [161], [161], [161], [161]], "hovertemplate": "Metric=Average Precision<br>Property=Mean Red Relative Intensity<br>Range=%{x}<br>Value=%{y}<br>Number of samples=%{customdata[0]}<extra></extra>", "legendgroup": "Average Precision", "marker": {"color": "rgb(102, 197, 204)", "pattern": {"shape": ""}}, "name": "Average Precision", "offsetgroup": "Average Precision", "orientation": "v", "showlegend": false, "textposition": "auto", "width": 0.2, "x": ["(-inf, 0.31)", "[0.31, 0.33)", "[0.33, 0.34)", "[0.34, 0.36)", "[0.36, inf)"], "xaxis": "x2", "y": {"dtype": "float64", "shape": [5]}, "yaxis": "y2", "type": "bar", "uid": "485f4661-808e-4bd3-a96d-3621f9bd7f83"}, {"alignmentgroup": "True", "customdata": [[161], [161], [161], [161], [161]], "hovertemplate": "Metric=Average Precision<br>Property=Mean Green Relative Intensity<br>Range=%{x}<br>Value=%{y}<br>Number of samples=%{customdata[0]}<extra></extra>", "legendgroup": "Average Precision", "marker": {"color": "rgb(102, 197, 204)", "pattern": {"shape": ""}}, "name": "Average Precision", "offsetgroup": "Average Precision", "orientation": "v", "showlegend": false, "textposition": "auto", "width": 0.2, "x": ["(-inf, 0.36)", "[0.36, 0.41)", "[0.41, 0.45)", "[0.45, 0.48)", "[0.48, inf)"], "xaxis": "x3", "y": {"dtype": "float64", "shape": [5]}, "yaxis": "y3", "type": "bar", "uid": "a22aedbb-315c-43df-b69c-33de0bdf5578"}], "_dom_classes": [], "_js2py_layoutDelta": {}, "_js2py_pointsCallback": {}, "_js2py_relayout": {}, "_js2py_restyle": {}, "_js2py_traceDeltas": {}, "_js2py_update": {}, "_layout": {"annotations": [{"showarrow": false, "text": "RMS Contrast", "x": 0.14666666666666667, "xanchor": "center", "xref": "paper", "y": 1.0, "yanchor": "bottom", "yref": "paper"}, {"showarrow": false, "text": "Mean Red Relative Intensity", "x": 0.49, "xanchor": "center", "xref": "paper", "y": 1.0, "yanchor": "bottom", "yref": "paper"}, {"showarrow": false, "text": "Mean Green Relative Intensity", "x": 0.8333333333333333, "xanchor": "center", "xref": "paper", "y": 1.0, "yanchor": "bottom", "yref": "paper"}, {"showarrow": false, "text": "Average Precision", "textangle": 90, "x": 0.98, "xanchor": "left", "xref": "paper", "y": 0.5, "yanchor": "middle", "yref": "paper"}], "barmode": "group", "legend": {"title": {"text": "Metric"}, "tracegroupgap": 0}, "template": {"data": {"barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "barpolar"}], "bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "bar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram": [{"marker": {"pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "histogram"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatter": [{"fillpattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}, "type": "scatter"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "title": {"text": "Metric Score Per Property Value Segment (showing top 3 properties by diffrence in segments)"}, "xaxis": {"anchor": "y", "domain": [0.0, 0.29333333333333333], "type": "category"}, "yaxis": {"anchor": "x", "domain": [0.0, 1.0], "showticklabels": true}, "xaxis2": {"anchor": "y2", "domain": [0.3433333333333333, 0.6366666666666667], "type": "category"}, "yaxis2": {"anchor": "x2", "domain": [0.0, 1.0], "matches": "y", "showticklabels": true}, "xaxis3": {"anchor": "y3", "domain": [0.6866666666666666, 0.98], "type": "category"}, "yaxis3": {"anchor": "x3", "domain": [0.0, 1.0], "matches": "y", "showticklabels": true}}, "_py2js_addTraces": {}, "_py2js_animate": {}, "_py2js_deleteTraces": {}, "_py2js_moveTraces": {}, "_py2js_relayout": {}, "_py2js_removeLayoutProps": {}, "_py2js_removeTraceProps": {}, "_py2js_restyle": {}, "_py2js_update": {}, "_view_count": 0}, "buffers": [{"encoding": "base64", "path": ["_data", 0, "y", "buffer"], "data": "JXRcXuJalz+r47LAByaWPzYUli4HK5I/Iz8Q103dnz/G/oETTdimPw=="}, {"encoding": "base64", "path": ["_data", 1, "y", "buffer"], "data": "yjHMU8Kbkz+KLQLnymqTP3ea8WbsTJQ/HCKWQnsdlD8hb5+BaSGoPw=="}, {"encoding": "base64", "path": ["_data", 2, "y", "buffer"], "data": "YsKDDHeUpz/rH3r8KfagP/balbPxtJM/5SBNxni8jT+R12fT6YSWPw=="}]}, "c9f6323028554302aebae530a3eb04e0": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_f8f8aab0fce3437cb9382d5fa11da90e", "style": "IPY_MODEL_f40694ffccf54d54a44d9f4a4f41201b", "value": "<br><a href=\"#summary_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\" style=\"font-size: 14px;\">Go to top</a>"}}, "f8f8aab0fce3437cb9382d5fa11da90e": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "f40694ffccf54d54a44d9f4a4f41201b": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "a8778263d70f4986a0908567dcfa3940": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "747ce802cc5b49569913e960153cf1c0": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "31dd9699d8c94bfdadc8ecb9eaa8101b": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "5c1154af0a9f4e2aaa460a8de0ccdc2e": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "749048a1b33347ae8a69661262d963e9": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "eaff94cd5d5a4c7ea6d3ddd46211ff19": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_0e33928274ae4177ac37678e12fdaa66", "IPY_MODEL_64253ed74c5b45f1b441e9292a81b314"], "layout": "IPY_MODEL_21e29843ea904e40b9a4a558ce0869fe"}}, "0e33928274ae4177ac37678e12fdaa66": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_53984de4f25b4f6b8de16598258bc609", "style": "IPY_MODEL_50a84a63434b452dac092a95f80fd9cf", "value": "<span id=\"summary_UH17J8QO09VS9KKH4A3YJTU7F-section-I3DO7\"></span>"}}, "53984de4f25b4f6b8de16598258bc609": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "50a84a63434b452dac092a95f80fd9cf": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "64253ed74c5b45f1b441e9292a81b314": {"model_name": "AccordionModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "_titles": {"0": "Passed"}, "children": ["IPY_MODEL_c5c717acee1546fba2681c6fd17c372c"], "layout": "IPY_MODEL_f1ceaab6cdea41cc83863f99f0e80d7d", "selected_index": null}}, "c5c717acee1546fba2681c6fd17c372c": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_8c97c5b7a1e2430092bd43347d79c9fd", "IPY_MODEL_594df808cde449518faad32f77b4ccee", "IPY_MODEL_bfd9f88d09d4427281a6092c71c5bae5"], "layout": "IPY_MODEL_7350963a55244413a37b26b4521fca83"}}, "8c97c5b7a1e2430092bd43347d79c9fd": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_2bfa9f954e18436bb40884d6e7d94161", "style": "IPY_MODEL_a0cadf4874f4421ea128bb43cdaf5c31", "value": "<style type=\"text/css\">\n#T_6264d_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_6264d_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_6264d_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_6264d_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_6264d_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_6264d_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Status</th>\n      <th class=\"col_heading level0 col1\" >Check</th>\n      <th class=\"col_heading level0 col2\" >Condition</th>\n      <th class=\"col_heading level0 col3\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_6264d_row0_col0\" class=\"data row0 col0\" ><div style=\"color: green;text-align: center\">\u2713</div></td>\n      <td id=\"T_6264d_row0_col1\" class=\"data row0 col1\" ><a href=\"#TrainTestPredictionDrift_UH17J8QO09VS9KKH4A3YJTU7F-section-I3DO7\">Train Test Prediction Drift</a></td>\n      <td id=\"T_6264d_row0_col2\" class=\"data row0 col2\" >categorical drift score < 0.15 and numerical drift score < 0.075 for prediction drift</td>\n      <td id=\"T_6264d_row0_col3\" class=\"data row0 col3\" >Passed for 3 prediction properties out of 3 prediction properties.\nFound prediction property \"Samples Per Class\" has the highest categorical drift score: 0\nFound prediction property \"Bounding Box Area (in pixels)\" has the highest numerical drift score: 0.05</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "2bfa9f954e18436bb40884d6e7d94161": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "a0cadf4874f4421ea128bb43cdaf5c31": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "594df808cde449518faad32f77b4ccee": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_1e5ca5d40f194d279785fb6b61403792", "style": "IPY_MODEL_2879757a474c40d280759d1e175cedee", "value": "<hr style=\"background-color: #eee;border: 0 none;color: #eee;height: 4px;\">"}}, "1e5ca5d40f194d279785fb6b61403792": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "2879757a474c40d280759d1e175cedee": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "bfd9f88d09d4427281a6092c71c5bae5": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "children": ["IPY_MODEL_7973a6c11f7445d99e5fca207387a40c", "IPY_MODEL_b358f89c0bbf4b6da74265e44abbbdba", "IPY_MODEL_e34e37381611413ea378d4487f760bcd", "IPY_MODEL_2f82dcc1b5094258bfe6bcfc6bfdcb01"], "layout": "IPY_MODEL_d2428e0e9f6d4249810a9fc8b0b29b10"}}, "7973a6c11f7445d99e5fca207387a40c": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_e4de50fe6dbc4888ae198071c0a005f9", "style": "IPY_MODEL_ebb582a4b15742afa005848cfa3e4a75", "value": "<h4 id=\"TrainTestPredictionDrift_UH17J8QO09VS9KKH4A3YJTU7F-section-I3DO7\"><b>Train Test Prediction Drift</b></h4>"}}, "e4de50fe6dbc4888ae198071c0a005f9": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "ebb582a4b15742afa005848cfa3e4a75": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "b358f89c0bbf4b6da74265e44abbbdba": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_7ec510b19de34cbdabec9138197f792b", "style": "IPY_MODEL_07f7228b52794aec851a375bcbc71f07", "value": "<p>    Calculate prediction drift between train dataset and test dataset, using statistical measures. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_train_test_prediction_drift.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"}}, "7ec510b19de34cbdabec9138197f792b": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "07f7228b52794aec851a375bcbc71f07": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "e34e37381611413ea378d4487f760bcd": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_a618047eaf69405a8172c304abef6008", "style": "IPY_MODEL_8adb5890faf04a8bb4f09c699a15e843", "value": "<h5><b>Conditions Summary</b></h5><style type=\"text/css\">\n#T_df7c9_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_df7c9_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_df7c9_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_df7c9_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_df7c9_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_df7c9_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Status</th>\n      <th class=\"col_heading level0 col1\" >Condition</th>\n      <th class=\"col_heading level0 col2\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_df7c9_row0_col0\" class=\"data row0 col0\" ><div style=\"color: green;text-align: center\">\u2713</div></td>\n      <td id=\"T_df7c9_row0_col1\" class=\"data row0 col1\" >categorical drift score < 0.15 and numerical drift score < 0.075 for prediction drift</td>\n      <td id=\"T_df7c9_row0_col2\" class=\"data row0 col2\" >Passed for 3 prediction properties out of 3 prediction properties.\nFound prediction property \"Samples Per Class\" has the highest categorical drift score: 0\nFound prediction property \"Bounding Box Area (in pixels)\" has the highest numerical drift score: 0.05</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "a618047eaf69405a8172c304abef6008": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "8adb5890faf04a8bb4f09c699a15e843": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "2f82dcc1b5094258bfe6bcfc6bfdcb01": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_a25f28b7c4284f89bf387eb26ac8fc0b", "IPY_MODEL_b97195fb7ca44e7d9ff548b489456a03", "IPY_MODEL_515eb3a844494c90a5d1012db7cba6e0", "IPY_MODEL_1ca5b707cfc74003969a230b42bfa584", "IPY_MODEL_84293c648cb843ae8873d9e28d0449ca", "IPY_MODEL_2007340eabe9462798654b3c45d89018", "IPY_MODEL_b8f1df2c4f174e70ac54e55064014d5b"], "layout": "IPY_MODEL_0dc39b003c024e8ea358cb2b316aa01d"}}, "a25f28b7c4284f89bf387eb26ac8fc0b": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_6c2801238327422a889985ed5be6e3eb", "style": "IPY_MODEL_67543503d6174bf9bcbe1e1e5b845247", "value": "<h5><b>Additional Outputs</b></h5>"}}, "6c2801238327422a889985ed5be6e3eb": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "67543503d6174bf9bcbe1e1e5b845247": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "b97195fb7ca44e7d9ff548b489456a03": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_cde9123b0d38482d8fc94b3fa1b71ce4", "style": "IPY_MODEL_158d6ddf3b9e44498fa1f40b0c085499", "value": "<div><span>The Drift score is a measure for the difference between two distributions. In this check, drift is measured for the distribution of the following prediction properties: ['Samples Per Class', 'Bounding Box Area (in pixels)', 'Number of Bounding Boxes Per Image']. </span></div>"}}, "cde9123b0d38482d8fc94b3fa1b71ce4": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "158d6ddf3b9e44498fa1f40b0c085499": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "515eb3a844494c90a5d1012db7cba6e0": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_236a7bfd78b44309baeec61f9c9d9318", "style": "IPY_MODEL_e950966b3c054ffbaca0a9d1975f9f7d", "value": "<div>For discrete distribution plots, showing the top 10 categories with largest difference between train and test.</div>"}}, "236a7bfd78b44309baeec61f9c9d9318": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "e950966b3c054ffbaca0a9d1975f9f7d": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "1ca5b707cfc74003969a230b42bfa584": {"model_name": "FigureModel", "model_module": "jupyterlab-plotly", "model_module_version": "^5.11.0", "state": {"_config": {"plotlyServerURL": "https://plot.ly"}, "_data": [{"base": 0, "marker": {"color": "#01B8AA"}, "offsetgroup": "0", "orientation": "h", "showlegend": false, "x": [0.04909983289982629], "xaxis": "x", "y": ["Drift Score"], "yaxis": "y", "type": "bar", "uid": "689e2e3b-5b9a-476f-a149-d7fc4c53fada"}, {"fill": "tozeroy", "line": {"color": "#00008b", "shape": "spline"}, "name": "Train Dataset", "x": [0.0, 40.57234451293945, 88.40034179687501, 101.94984039306641, 142.885078125, 144.57436096191407, 209.68835510253908, 210.84809470663265, 233.3550714111328, 255.44640502929687, 277.5053771972656, 286.138935546875, 337.81747192382807, 341.54990844726564, 375.3567028808594, 391.6453649902344, 421.6961894132653, 435.5433337402344, 476.99168090820314, 477.0551733398436, 532.7958935546876, 550.8075854492188, 609.4138110351562, 610.4113647460938, 632.544284119898, 674.1289916992188, 687.7242089843751, 729.5895654296875, 790.2676708984377, 822.4559155273437, 843.3923788265306, 874.9538818359376, 967.7557666015625, 989.3529272460937, 1047.158798828125, 1054.2404735331634, 1059.1815087890625, 1146.2523876953126, 1189.4223876953126, 1239.7685546875, 1265.088568239796, 1310.629248046875, 1315.47939453125, 1382.8502880859376, 1405.4354980468752, 1434.7302783203127, 1475.9366629464284, 1485.2040722656252, 1508.4928369140625, 1533.6705048230351, 1541.8587548828125, 1561.3465576171875, 1602.7967529296877, 1609.080810546875, 1609.080810546875, 1648.795517578125, 1659.3760205078127, 1666.134924816991, 1686.7847576530612, 1706.5015576171875, 1714.1850244140628, 1730.3003662109375, 1757.8273046875, 1772.892802734375, 1808.639404296875, 1808.639404296875, 1809.9861474609377, 1844.8886083984373, 1852.6264892578124, 1873.8375830078128, 1894.84630859375, 1897.632852359694, 1921.667861328125, 1934.5618359375, 1936.8492041015627, 1975.7114892578124, 1981.9228271484374, 2022.8222265625002, 2027.868525390625, 2059.975859375, 2064.825390625, 2089.370546875, 2108.4809470663267, 2111.687177734375, 2130.0811328125, 2159.62873046875, 2188.644189453125, 2204.190009765625, 2235.8789062500005, 2251.7717968750003, 2252.12998046875, 2284.6782519531253, 2312.38740234375, 2319.329041772959, 2353.8146484375, 2379.2007324218753, 2387.1789550781255, 2443.326240234375, 2470.8709375000003, 2500.2277246093745, 2514.27498046875, 2530.177136479592, 2537.6693359375, 2564.443701171875, 2587.2828515625006, 2623.5709472656254, 2674.396259765625, 2677.584912109375, 2741.0252311862246, 2780.139609375001, 2794.009824218751, 2895.4793359375003, 2951.873325892857, 3017.5436328125, 3083.181962890628, 3162.7214205994896, 3289.70162109375, 3373.5695153061224, 3454.780908203125, 3584.417610012755, 3795.265704719388, 4006.1137994260203, 4216.9618941326535, 4427.809988839285, 4638.658083545918, 4849.506178252551, 5060.354272959184, 5271.202367665816, 5482.050462372449, 5692.898557079082, 5903.746651785714, 6114.5947464923465, 6325.442841198979, 6536.290935905612, 6747.139030612245, 6957.987125318878, 7168.83522002551, 7379.683314732143, 7590.531409438776, 7801.379504145408, 8012.2275988520405, 8223.075693558674, 8433.923788265307, 8644.771882971938, 8855.61997767857, 9066.468072385203, 9277.316167091836, 9488.164261798469, 9699.012356505102, 9909.860451211734, 10120.708545918367, 10331.556640625], "xaxis": "x2", "y": {"dtype": "float64", "shape": [152]}, "yaxis": "y2", "type": "scatter", "uid": "b8f5da14-9b76-49a0-969f-c974fa394999"}, {"line": {"color": "#00008b", "dash": "dash"}, "mode": "lines+markers", "name": "Train Mean", "x": [1533.6705048230351, 1533.6705048230351], "xaxis": "x2", "y": [0, 0.0003529046444468393], "yaxis": "y2", "type": "scatter", "uid": "796be528-ba17-4e7e-a0be-98264e4343af"}, {"line": {"color": "#00008b"}, "mode": "lines", "name": "Train Median", "x": [1609.080810546875, 1609.080810546875], "xaxis": "x2", "y": [0, 0.0003733876784879912], "yaxis": "y2", "type": "scatter", "uid": "820d17f5-218f-420b-9c44-62b1014ec99f"}, {"fill": "tozeroy", "line": {"color": "#69b3a2", "shape": "spline"}, "name": "Test Dataset", "x": [0.0, 40.57234451293945, 88.40034179687501, 101.94984039306641, 142.885078125, 144.57436096191407, 209.68835510253908, 210.84809470663265, 233.3550714111328, 255.44640502929687, 277.5053771972656, 286.138935546875, 337.81747192382807, 341.54990844726564, 375.3567028808594, 391.6453649902344, 421.6961894132653, 435.5433337402344, 476.99168090820314, 477.0551733398436, 532.7958935546876, 550.8075854492188, 609.4138110351562, 610.4113647460938, 632.544284119898, 674.1289916992188, 687.7242089843751, 729.5895654296875, 790.2676708984377, 822.4559155273437, 843.3923788265306, 874.9538818359376, 967.7557666015625, 989.3529272460937, 1047.158798828125, 1054.2404735331634, 1059.1815087890625, 1146.2523876953126, 1189.4223876953126, 1239.7685546875, 1265.088568239796, 1310.629248046875, 1315.47939453125, 1382.8502880859376, 1405.4354980468752, 1434.7302783203127, 1475.9366629464284, 1485.2040722656252, 1508.4928369140625, 1533.6705048230351, 1541.8587548828125, 1561.3465576171875, 1602.7967529296877, 1609.080810546875, 1609.080810546875, 1648.795517578125, 1659.3760205078127, 1666.134924816991, 1686.7847576530612, 1706.5015576171875, 1714.1850244140628, 1730.3003662109375, 1757.8273046875, 1772.892802734375, 1808.639404296875, 1808.639404296875, 1809.9861474609377, 1844.8886083984373, 1852.6264892578124, 1873.8375830078128, 1894.84630859375, 1897.632852359694, 1921.667861328125, 1934.5618359375, 1936.8492041015627, 1975.7114892578124, 1981.9228271484374, 2022.8222265625002, 2027.868525390625, 2059.975859375, 2064.825390625, 2089.370546875, 2108.4809470663267, 2111.687177734375, 2130.0811328125, 2159.62873046875, 2188.644189453125, 2204.190009765625, 2235.8789062500005, 2251.7717968750003, 2252.12998046875, 2284.6782519531253, 2312.38740234375, 2319.329041772959, 2353.8146484375, 2379.2007324218753, 2387.1789550781255, 2443.326240234375, 2470.8709375000003, 2500.2277246093745, 2514.27498046875, 2530.177136479592, 2537.6693359375, 2564.443701171875, 2587.2828515625006, 2623.5709472656254, 2674.396259765625, 2677.584912109375, 2741.0252311862246, 2780.139609375001, 2794.009824218751, 2895.4793359375003, 2951.873325892857, 3017.5436328125, 3083.181962890628, 3162.7214205994896, 3289.70162109375, 3373.5695153061224, 3454.780908203125, 3584.417610012755, 3795.265704719388, 4006.1137994260203, 4216.9618941326535, 4427.809988839285, 4638.658083545918, 4849.506178252551, 5060.354272959184, 5271.202367665816, 5482.050462372449, 5692.898557079082, 5903.746651785714, 6114.5947464923465, 6325.442841198979, 6536.290935905612, 6747.139030612245, 6957.987125318878, 7168.83522002551, 7379.683314732143, 7590.531409438776, 7801.379504145408, 8012.2275988520405, 8223.075693558674, 8433.923788265307, 8644.771882971938, 8855.61997767857, 9066.468072385203, 9277.316167091836, 9488.164261798469, 9699.012356505102, 9909.860451211734, 10120.708545918367, 10331.556640625], "xaxis": "x2", "y": {"dtype": "float64", "shape": [152]}, "yaxis": "y2", "type": "scatter", "uid": "4111c572-a824-4485-96ee-b93e5ba52388"}, {"line": {"color": "#69b3a2", "dash": "dash"}, "mode": "lines+markers", "name": "Test Mean", "x": [1666.134924816991, 1666.134924816991], "xaxis": "x2", "y": [0, 0.0004169810240095183], "yaxis": "y2", "type": "scatter", "uid": "5a1af078-7f35-412c-85a0-d9d117759247"}, {"line": {"color": "#69b3a2"}, "mode": "lines", "name": "Test Median", "x": [1808.639404296875, 1808.639404296875], "xaxis": "x2", "y": [0, 0.0004779631531220677], "yaxis": "y2", "type": "scatter", "uid": "f2f9aac0-6718-4599-baf0-b4e5d998a2c9"}], "_dom_classes": [], "_js2py_layoutDelta": {}, "_js2py_pointsCallback": {}, "_js2py_relayout": {}, "_js2py_restyle": {}, "_js2py_traceDeltas": {}, "_js2py_update": {}, "_layout": {"annotations": [{"font": {"size": 16}, "showarrow": false, "text": "Drift Score (Earth Mover's Distance)", "x": 0.5, "xanchor": "center", "xref": "paper", "y": 1.0000000000000002, "yanchor": "bottom", "yref": "paper"}, {"font": {"size": 16}, "showarrow": false, "text": "Distribution Plot", "x": 0.5, "xanchor": "center", "xref": "paper", "y": 0.7200000000000001, "yanchor": "bottom", "yref": "paper"}], "bargroupgap": 0, "height": 400, "legend": {"title": {"text": "Legend"}, "y": 0.6, "yanchor": "top"}, "template": {"data": {"barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "barpolar"}], "bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "bar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram": [{"marker": {"pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "histogram"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatter": [{"fillpattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}, "type": "scatter"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "title": {"text": "Bounding Box Area (in pixels)", "x": 0.5, "xanchor": "center"}, "xaxis": {"anchor": "y", "domain": [0.0, 1.0], "dtick": 0.05, "fixedrange": true, "gridcolor": "black", "linecolor": "black", "range": [0, 0.4], "showgrid": false}, "yaxis": {"anchor": "x", "autorange": true, "color": "black", "domain": [0.9200000000000002, 1.0], "fixedrange": true, "rangemode": "normal", "showgrid": false, "showline": false, "showticklabels": false, "zeroline": false}, "xaxis2": {"anchor": "y2", "domain": [0.0, 1.0], "fixedrange": false, "range": [40.57234451293945, 3454.780908203125], "title": {"text": "Bounding Box Area (in pixels)"}}, "yaxis2": {"anchor": "x2", "domain": [0.0, 0.7200000000000001], "fixedrange": true, "title": {"text": "Probability Density"}}}, "_py2js_addTraces": {}, "_py2js_animate": {}, "_py2js_deleteTraces": {}, "_py2js_moveTraces": {}, "_py2js_relayout": {}, "_py2js_removeLayoutProps": {}, "_py2js_removeTraceProps": {}, "_py2js_restyle": {}, "_py2js_update": {}, "_view_count": 0}, "buffers": [{"encoding": "base64", "path": ["_data", 1, "y", "buffer"], "data": "IVcLYJiZKj9DD6Oyre0tP5y4cO9I1DA/gQ1vm+1TMT9Tn1UcXboyP3ttqDEryDI/VtZGpxyWND8z+f8rAZ00PxeTUbDYGDU/r69+QaN/NT8tDIexWdM1P1c3ba3u7jU/maXppr1XNj8Loe8gZVs2P4h+m6moZTY/ZK5LEZBcNj/XyEq8wjU2P1pbpakBGzY//nYxCt+tNT9d4/2WrK01P7VkhtMQ5TQ/UzxlzQCbND96VpWh+5kzP6BoyCKClTM/jUDIg1QyMz+Bkh+eCnwyP1a5N5uwQjI/xy/cwKecMT/8MHbOQNEwPxGoKLbWejA/0VHBcVlLMD9SKS32MhEwPyWCr8Uqiy8/9Ys9goaQLz/5lMRGzucvPzp0YuSf+S8/CR78kHoDMD8a02QeObMwP7VQyEFvMDE/yP+yrGbeMT84zD4q8z8yP25Ak/O//TI/E8YeveoSMz/LlJudfUc0P8lePI51szQ/2GMeMWVBNT9g+SFyawo2P+e/g0WLNzY/6s6Dq1eoNj+lwRDowSA3P8rCMIpzRzc/Qj3TbmSiNz8pMHOqEF04Pwd0Kt5neDg/B3Qq3md4OD+Ez8CmHR45P6sBPV/4Rzk/O8E0vCZiOT+duOVFS685PzOUi2yr9Dk/yAlRX38OOj95sW5QWUI6PwPE/Rw2kzo/ZxCpSxe7Oj90eGYdZAw7P3R4Zh1kDDs/XjSiQxIPOz9ucREhUUo7PyRL7vu1VDs/Mn8tFuprOz/7f7xPE3s7P26jxaZ9fDs/yQ0/K9GCOz8jZUlD0oE7Pw5hMmtSgTs/HHiWguFpOz+T+vC6gmM7P2qLlMScJzs/gP41BRUeOz+jNJQer9Y6Pz5RT3JPyjo/PcBVi3mFOj+y00Ud6Ug6P1Oi/awrPjo/DXthK3H9OT8rUKVt2oo5P5fPUSyPDjk/GWqDQJLHOD+DlbF7Ui44P06LuOyN3Tc/u65h2LTbNz+FGHF6JC83P0o80NjflTY/Y31v5bJuNj+buRrhQag1P7ltf9LnEjU//fW6dofjND/T6anRWJIzP4W5D7bI6zI/MFfpS2g6Mj85ST14xeUxP8zzXFpAhjE/QF+UfWBZMT8fLF2h0rkwPxwDKDPiMjA/OyUYQiO+Lj+hgY+a8ngsP0qnF7j+VCw/5k5P5SWXKT8swSA19vMnP5sUezz3YSc/u7imnsdkIz+UbALSw1UhP7O2zwu9NR4/bMrfsrkmGj+3Kn5l8s0VP+qZhyXLJhA/sxhx/jVlCj+csRErc6cFP2sE/vNjWP8+jn2eW5go8j5mYPWzRK/lPntIXBMesdw+FSLP3Du00z6dxL3m1nzKPqAih8xk88Q+TclsGtCXxD6XdlPstNvCPonseRQKOcI+j+0BkHYAxT4iNdqERRnDPm0Pm9eBCLk+Yt7US1t/sj6iXHC62LOzPlx9iuyQULQ+OWoarpNbsz6loLb2X5azPtS/aS3gpbI+aWe/Q6pHqj6B+rKl7YqWPgt6c3j+vXQ+ZxqtDi79Qz6ZXxd85dU9PvCxWbxv/m8+1uaO0ykHkj5b+nFfucmjPpXHj9rlJqU+w+glUusmlj4ACBrGuFh9PuYDqBXfqYY+OV7pXpxfnz7NHFn54HOmPg=="}, {"encoding": "base64", "path": ["_data", 4, "y", "buffer"], "data": "VyLedikPIz8d9rnldfMlP+xLwiE+SCk/dV8c2LcwKj+N6z9DssksP5DWY7i54yw/reky2P0yMD/k2ZYW+jkwPzQFSCftuTA/TkC3ExkpMT90VSYAk4kxP17/L+lcqzE/g7IY65tHMj+5m3oG6k8yPxXePNbEiTI/4u4UTeyaMj9EIqQEh6kyPwh/p0VBqTI/+9251WuQMj92MwN6W5AyP/TDvDRDPTI/A+a2Z/cXMj/2ogZBioExP9pA2DykfjE/0AJTN9k7MT9x4A7NUbMwPw3jcIszhDA/CEidgzHcLz/J5ValGiEuP4aPq35zPS0/g0IBzcivLD/SiR49yucrPy2qwCPGJio/NBTKMYPkKT+8Wk4aMYkpPzByue81hyk/j9BglhKHKT9UVjhvdjQqP30mgvu3Cys/z6/z+Qd3LD8Lnm9SplstPwP6wxAIQy8/fWX6CZd8Lz8azsXDGoMxP59dZDF4LzI/FqmgZ3kcMz/Jelwws380P5JgMGaA0jQ/n+yeZkWmNT8Zdt2hvI82PxLWpO9Y3DY/bC8Z0WOTNz9LWKat9hc5PwAAHK1MUjk/AAAcrUxSOT+9M5o2lLs6P00FFGHwGDs/Wt113MdTOz+hNbwZMwM8P8PhWpK3ozw/NdHh8jPgPD8ix//B9Fo9PzLg86WTHj4/nF5I1niBPj/xlYEc5FI/P/GVgRzkUj8/rzkZ9w1aPz9TIMIQOQBAPxhE6n0bEEA/d90stMw2QD+Tw6EQFlZAPx+oqu+1WUA/RfZEIelzQD/bRPfIRX5AP56x5XvYf0A/kQGW/rmOQD8NvFsKGY9AP7V/CF65hEA/AnATAPyBQD/aMnE3umlAP1jIBZIYZUA/pJuPchpKQD/gy3dZSjFAP8OAMK7TLEA/wddReKoRQD+zAeLz8cE/P/f1hsyuVz8/DsYDW+YaPz/n/vgIbJc+P51kqPvUUT4/cLMIaTxQPj+0/4wgFro9P6CbTgT3MT0/tnnetpYOPT88Tu2LiFY8PwTqEYVGxTs/Tkuhg7uVOz/yUVVXNyo6P9tHRaBlYzk/niSIrl5/OD/H4Z+7Pgw4P0At2xU8hTc/MeAPluxDNz+CA2E061E2P5ko7ih+eTU//uG/c10RND8raeBpXQEyP6YWPWa03zE/+fQmhQWGLj/IIMRbjGgrPz5cYa+nVyo/6UpR/h99Iz+VkowQ4JIgP4ffeuekERw/UpoLYeSbGD9IrQvvxvMVP1ObSFEbCRM/DVYIw5DHED+QsYvUY/YLPzychXCvrQE/g36X8KLW4z6PS5Hvc7u1PvxBfBkUYHY+CWu2KL4zJT6KlxfT20HCPeVKJuKJWkw92cmkKpDCwzxhfWzpoqUoPJeqqdctPn07IRqYipT17TvlVQ64qfKLPLQDSBE9JRc9i0fWmVQEkT0AHhfrvzb2Pfthb+ZOvkk+Oa3czT98ij6MhC1TwTC4PsyQeJFZndM+bRANcx493D5Ane5KwAvSPg/nG8HLebQ+kIC/xRKghD7BzX5ysnFCPvFFZyPzSO09WEgJG7ejhD3vDkTH19MJPQo80qo0sXw8liXAjRZM3DvubzX1hMYoOwxIdanmQWM6uXYQNaqTijlnqMMb40egOA=="}]}, "84293c648cb843ae8873d9e28d0449ca": {"model_name": "FigureModel", "model_module": "jupyterlab-plotly", "model_module_version": "^5.11.0", "state": {"_config": {"plotlyServerURL": "https://plot.ly"}, "_data": [{"base": 0, "marker": {"color": "#01B8AA"}, "offsetgroup": "0", "orientation": "h", "showlegend": false, "x": [0.020697123714912793], "xaxis": "x", "y": ["Drift Score"], "yaxis": "y", "type": "bar", "uid": "7da32a52-e025-4750-9e2a-1c2b5ae91a81"}, {"marker": {"color": "#00008b"}, "name": "Train Dataset", "x": {"dtype": "float64", "shape": [16]}, "xaxis": "x2", "y": {"dtype": "float64", "shape": [16]}, "yaxis": "y2", "type": "bar", "uid": "79712ea3-e661-4c80-85b5-3e3b18367ad9"}, {"marker": {"color": "#69b3a2"}, "name": "Test Dataset", "x": {"dtype": "float64", "shape": [16]}, "xaxis": "x2", "y": {"dtype": "float64", "shape": [16]}, "yaxis": "y2", "type": "bar", "uid": "502dcf13-013d-42ac-b4db-554aad90f7e9"}], "_dom_classes": [], "_js2py_layoutDelta": {}, "_js2py_pointsCallback": {}, "_js2py_relayout": {}, "_js2py_restyle": {}, "_js2py_traceDeltas": {}, "_js2py_update": {}, "_layout": {"annotations": [{"font": {"size": 16}, "showarrow": false, "text": "Drift Score (Earth Mover's Distance)", "x": 0.5, "xanchor": "center", "xref": "paper", "y": 1.0000000000000002, "yanchor": "bottom", "yref": "paper"}, {"font": {"size": 16}, "showarrow": false, "text": "Distribution Plot", "x": 0.5, "xanchor": "center", "xref": "paper", "y": 0.7200000000000001, "yanchor": "bottom", "yref": "paper"}], "bargroupgap": 0, "height": 400, "legend": {"title": {"text": "Legend"}, "y": 0.6, "yanchor": "top"}, "template": {"data": {"barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "barpolar"}], "bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "bar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram": [{"marker": {"pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "histogram"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatter": [{"fillpattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}, "type": "scatter"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "title": {"text": "Number of Bounding Boxes Per Image", "x": 0.5, "xanchor": "center"}, "xaxis": {"anchor": "y", "domain": [0.0, 1.0], "dtick": 0.05, "fixedrange": true, "gridcolor": "black", "linecolor": "black", "range": [0, 0.4], "showgrid": false}, "yaxis": {"anchor": "x", "autorange": true, "color": "black", "domain": [0.9200000000000002, 1.0], "fixedrange": true, "rangemode": "normal", "showgrid": false, "showline": false, "showticklabels": false, "zeroline": false}, "xaxis2": {"anchor": "y2", "domain": [0.0, 1.0], "range": [-3.4000000000000004, 20.4], "tickmode": "array", "ticks": "outside", "tickvals": {"dtype": "float64", "shape": [16]}}, "yaxis2": {"anchor": "x2", "autorange": true, "domain": [0.0, 0.7200000000000001], "fixedrange": true, "rangemode": "normal", "title": {"text": "Frequency"}}}, "_py2js_addTraces": {}, "_py2js_animate": {}, "_py2js_deleteTraces": {}, "_py2js_moveTraces": {}, "_py2js_relayout": {}, "_py2js_removeLayoutProps": {}, "_py2js_removeTraceProps": {}, "_py2js_restyle": {}, "_py2js_update": {}, "_view_count": 0}, "buffers": [{"encoding": "base64", "path": ["_data", 1, "x", "buffer"], "data": "AAAAAAAAAAAAAAAAAADwPwAAAAAAAABAAAAAAAAACEAAAAAAAAAQQAAAAAAAABRAAAAAAAAAGEAAAAAAAAAcQAAAAAAAACBAAAAAAAAAIkAAAAAAAAAkQAAAAAAAACZAAAAAAAAAKEAAAAAAAAAqQAAAAAAAACxAAAAAAAAAMUA="}, {"encoding": "base64", "path": ["_data", 1, "y", "buffer"], "data": "uQXWM9lxwj+dKnJlbYjHP8QL/wYiscc/ZCELWchCxj8Bpj7fmuW2P7kF1jPZcbI/gU8OlwGfrD+5BdYz2XGiPx2Boq0Gz5E/AaY+35rlhj8dgaKtBs+BP4+TcMZQWoQ/crgM+ORweT+Pk3DGUFpkP4+TcMZQWmQ/j5NwxlBaVD8="}, {"encoding": "base64", "path": ["_data", 2, "x", "buffer"], "data": "AAAAAAAAAAAAAAAAAADwPwAAAAAAAABAAAAAAAAACEAAAAAAAAAQQAAAAAAAABRAAAAAAAAAGEAAAAAAAAAcQAAAAAAAACBAAAAAAAAAIkAAAAAAAAAkQAAAAAAAACZAAAAAAAAAKEAAAAAAAAAqQAAAAAAAACxAAAAAAAAAMUA="}, {"encoding": "base64", "path": ["_data", 2, "y", "buffer"], "data": "F2zBFmzBxj8cx3Ecx3HMPxdswRZswbY/2IIt2IItyD8RERERERHBPxdswRZswaY/HMdxHMdxrD8RERERERGhPxdswRZswYY/F2zBFmzBlj8XbMEWbMGGPxdswRZswYY/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="}, {"encoding": "base64", "path": ["_layout", "xaxis2", "tickvals", "buffer"], "data": "AAAAAAAAAAAAAAAAAADwPwAAAAAAAABAAAAAAAAACEAAAAAAAAAQQAAAAAAAABRAAAAAAAAAGEAAAAAAAAAcQAAAAAAAACBAAAAAAAAAIkAAAAAAAAAkQAAAAAAAACZAAAAAAAAAKEAAAAAAAAAqQAAAAAAAACxAAAAAAAAAMUA="}]}, "2007340eabe9462798654b3c45d89018": {"model_name": "FigureModel", "model_module": "jupyterlab-plotly", "model_module_version": "^5.11.0", "state": {"_config": {"plotlyServerURL": "https://plot.ly"}, "_data": [{"base": 0, "marker": {"color": "#01B8AA"}, "offsetgroup": "0", "orientation": "h", "showlegend": false, "x": [0], "xaxis": "x", "y": ["Drift Score"], "yaxis": "y", "type": "bar", "uid": "47ae4986-51d0-4b5b-b6cb-34ea1af183d8"}, {"marker": {"color": "#00008b"}, "name": "Train Dataset", "x": ["Tomato"], "xaxis": "x2", "y": {"dtype": "float64", "shape": [1]}, "yaxis": "y2", "type": "bar", "uid": "58ada8a7-1bc7-4f3b-8fca-070347c698a3"}, {"marker": {"color": "#69b3a2"}, "name": "Test Dataset", "x": ["Tomato"], "xaxis": "x2", "y": {"dtype": "float64", "shape": [1]}, "yaxis": "y2", "type": "bar", "uid": "1d98d47d-2fff-4fec-8c75-1ed42589eca4"}], "_dom_classes": [], "_js2py_layoutDelta": {}, "_js2py_pointsCallback": {}, "_js2py_relayout": {}, "_js2py_restyle": {}, "_js2py_traceDeltas": {}, "_js2py_update": {}, "_layout": {"annotations": [{"font": {"size": 16}, "showarrow": false, "text": "Drift Score (Cramer's V)", "x": 0.5, "xanchor": "center", "xref": "paper", "y": 1.0000000000000002, "yanchor": "bottom", "yref": "paper"}, {"font": {"size": 16}, "showarrow": false, "text": "Distribution Plot", "x": 0.5, "xanchor": "center", "xref": "paper", "y": 0.7200000000000001, "yanchor": "bottom", "yref": "paper"}], "bargroupgap": 0, "height": 400, "legend": {"title": {"text": "Legend"}, "y": 0.6, "yanchor": "top"}, "template": {"data": {"barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "barpolar"}], "bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "bar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram": [{"marker": {"pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "histogram"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatter": [{"fillpattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}, "type": "scatter"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "title": {"text": "Samples Per Class", "x": 0.5, "xanchor": "center"}, "xaxis": {"anchor": "y", "domain": [0.0, 1.0], "dtick": 0.05, "fixedrange": true, "gridcolor": "black", "linecolor": "black", "range": [0, 0.4], "showgrid": false}, "yaxis": {"anchor": "x", "autorange": true, "color": "black", "domain": [0.9200000000000002, 1.0], "fixedrange": true, "rangemode": "normal", "showgrid": false, "showline": false, "showticklabels": false, "zeroline": false}, "xaxis2": {"anchor": "y2", "domain": [0.0, 1.0], "range": [-3, 3], "type": "category"}, "yaxis2": {"anchor": "x2", "autorange": true, "domain": [0.0, 0.7200000000000001], "fixedrange": true, "rangemode": "normal", "title": {"text": "Frequency"}}}, "_py2js_addTraces": {}, "_py2js_animate": {}, "_py2js_deleteTraces": {}, "_py2js_moveTraces": {}, "_py2js_relayout": {}, "_py2js_removeLayoutProps": {}, "_py2js_removeTraceProps": {}, "_py2js_restyle": {}, "_py2js_update": {}, "_view_count": 0}, "buffers": [{"encoding": "base64", "path": ["_data", 1, "y", "buffer"], "data": "AAAAAAAA8D8="}, {"encoding": "base64", "path": ["_data", 2, "y", "buffer"], "data": "AAAAAAAA8D8="}]}, "b8f1df2c4f174e70ac54e55064014d5b": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_a12c3fac996f40c7878ca51382a77c00", "style": "IPY_MODEL_85241a977e7c4e9399ae64622c55e4c1", "value": "<br><a href=\"#summary_UH17J8QO09VS9KKH4A3YJTU7F-section-I3DO7\" style=\"font-size: 14px;\">Go to top</a>"}}, "a12c3fac996f40c7878ca51382a77c00": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "85241a977e7c4e9399ae64622c55e4c1": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "0dc39b003c024e8ea358cb2b316aa01d": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "d2428e0e9f6d4249810a9fc8b0b29b10": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "7350963a55244413a37b26b4521fca83": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "f1ceaab6cdea41cc83863f99f0e80d7d": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "21e29843ea904e40b9a4a558ce0869fe": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "c1aad8912a1b4ebcbc44a29bd2eef064": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_3ac57ce97535411287f887541abf7e91", "IPY_MODEL_6da502e007204775b050b41786a635d1"], "layout": "IPY_MODEL_c3928c4c4a8b4eac9bcfbafb245c1789"}}, "3ac57ce97535411287f887541abf7e91": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_a6afdf65cee7430ab556d608295537bf", "style": "IPY_MODEL_ae2ad12f14dd45dcada96f480f6be9fc", "value": "<span id=\"summary_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\"></span>"}}, "a6afdf65cee7430ab556d608295537bf": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "ae2ad12f14dd45dcada96f480f6be9fc": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "6da502e007204775b050b41786a635d1": {"model_name": "AccordionModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "_titles": {"0": "Other"}, "children": ["IPY_MODEL_5e0205986f844dc496c523daa744bb9c"], "layout": "IPY_MODEL_65f11e7cbb6044c486a5673a742cc91d", "selected_index": null}}, "5e0205986f844dc496c523daa744bb9c": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_a714236c9832430a88ed5b6a5cc6ccb9", "IPY_MODEL_3c56d5a3bdd147d293381ad3f41038a9", "IPY_MODEL_31c99d349d6f4ba78c4f7e56571d6c6a", "IPY_MODEL_3bd925f75e9743d7b49488770ed49200", "IPY_MODEL_19098e657ecf4196b26755eb139ac37c", "IPY_MODEL_3bd925f75e9743d7b49488770ed49200", "IPY_MODEL_83ac9caceda2412eb439acc58cb2e7d3", "IPY_MODEL_3bd925f75e9743d7b49488770ed49200", "IPY_MODEL_ada48980efe44bab900ea0f1e40c2515"], "layout": "IPY_MODEL_f53ce7cd7b5349e482419b7dd14fce9c"}}, "a714236c9832430a88ed5b6a5cc6ccb9": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_f6625327e9f14f898534e15652937f75", "style": "IPY_MODEL_b99da9235c824d9992c2feb177455bfa", "value": "<style type=\"text/css\">\n#T_fe847_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_fe847_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_fe847_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_fe847_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_fe847_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_fe847_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Check</th>\n      <th class=\"col_heading level0 col1\" >Summary</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_fe847_row0_col0\" class=\"data row0 col0\" ><a href=\"#MeanAverageRecallReport-TestDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\">Mean Average Recall Report - Test Dataset</a></td>\n      <td id=\"T_fe847_row0_col1\" class=\"data row0 col1\" >Summarize mean average recall metrics on a dataset and model per detections and area range. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_mean_average_recall_report.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></td>\n    </tr>\n    <tr>\n      <td id=\"T_fe847_row1_col0\" class=\"data row1 col0\" ><a href=\"#MeanAverageRecallReport-TrainDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\">Mean Average Recall Report - Train Dataset</a></td>\n      <td id=\"T_fe847_row1_col1\" class=\"data row1 col1\" >Summarize mean average recall metrics on a dataset and model per detections and area range. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_mean_average_recall_report.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></td>\n    </tr>\n    <tr>\n      <td id=\"T_fe847_row2_col0\" class=\"data row2 col0\" ><a href=\"#ConfusionMatrix-TestDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\">Confusion Matrix - Test Dataset</a></td>\n      <td id=\"T_fe847_row2_col1\" class=\"data row2 col1\" >Calculate the confusion matrix of the model on the given dataset. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_confusion_matrix.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></td>\n    </tr>\n    <tr>\n      <td id=\"T_fe847_row3_col0\" class=\"data row3 col0\" ><a href=\"#ConfusionMatrix-TrainDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\">Confusion Matrix - Train Dataset</a></td>\n      <td id=\"T_fe847_row3_col1\" class=\"data row3 col1\" >Calculate the confusion matrix of the model on the given dataset. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_confusion_matrix.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></td>\n    </tr>\n  </tbody>\n</table>\n"}}, "f6625327e9f14f898534e15652937f75": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "b99da9235c824d9992c2feb177455bfa": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "3c56d5a3bdd147d293381ad3f41038a9": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_aeef7e29336c42d6ab3093204bc83e13", "style": "IPY_MODEL_f522d33611f749c1967a0a14d2f1cd66", "value": "<hr style=\"background-color: #eee;border: 0 none;color: #eee;height: 4px;\">"}}, "aeef7e29336c42d6ab3093204bc83e13": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "f522d33611f749c1967a0a14d2f1cd66": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "31c99d349d6f4ba78c4f7e56571d6c6a": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "children": ["IPY_MODEL_d5928d2321f546d6aa4e046f98571899", "IPY_MODEL_26ef162383c84ef591b991ad3726a7fa", "IPY_MODEL_046c4c28b8544ebfa4db0bcf62b252d1"], "layout": "IPY_MODEL_123940202a9d4629a60f5e696e8fa9fc"}}, "d5928d2321f546d6aa4e046f98571899": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_8146177db7d645e3995c3927ca41ed04", "style": "IPY_MODEL_f5306831074d49789d863277a2a2603c", "value": "<h4 id=\"MeanAverageRecallReport-TestDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\"><b>Mean Average Recall Report - Test Dataset</b></h4>"}}, "8146177db7d645e3995c3927ca41ed04": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "f5306831074d49789d863277a2a2603c": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "26ef162383c84ef591b991ad3726a7fa": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_6df2523d45c74132b9166ff48d12af3e", "style": "IPY_MODEL_79a4fcc91c9541dfbb20f7014672f464", "value": "<p>Summarize mean average recall metrics on a dataset and model per detections and area range. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_mean_average_recall_report.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"}}, "6df2523d45c74132b9166ff48d12af3e": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "79a4fcc91c9541dfbb20f7014672f464": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "046c4c28b8544ebfa4db0bcf62b252d1": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_44a70040fdba4de692d00e9dc5bf0eb3", "IPY_MODEL_e9c6422a344349eca3c26ab615b076cb", "IPY_MODEL_42ddb6812318426ca148b4b830652e7a"], "layout": "IPY_MODEL_218eb8d35f8448169ff66c919bb54764"}}, "44a70040fdba4de692d00e9dc5bf0eb3": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_1596b8420485438587ad3662c1deb816", "style": "IPY_MODEL_215bf01da5e74753a44438b4de996f66", "value": "<h5><b>Additional Outputs</b></h5>"}}, "1596b8420485438587ad3662c1deb816": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "215bf01da5e74753a44438b4de996f66": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "e9c6422a344349eca3c26ab615b076cb": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_0fdba55d07a84b95bf441949cd100cbe", "style": "IPY_MODEL_9c00309164fc403b87e4ec8f5ffe7d11", "value": "<style type=\"text/css\">\n#T_6b62b_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_6b62b_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_6b62b_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_6b62b_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_6b62b_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_6b62b_\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th class=\"col_heading level0 col0\" >AR@1 (%)</th>\n      <th class=\"col_heading level0 col1\" >AR@10 (%)</th>\n      <th class=\"col_heading level0 col2\" >AR@100 (%)</th>\n    </tr>\n    <tr>\n      <th class=\"index_name level0\" >Area size</th>\n      <th class=\"blank col0\" >&nbsp;</th>\n      <th class=\"blank col1\" >&nbsp;</th>\n      <th class=\"blank col2\" >&nbsp;</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_6b62b_level0_row0\" class=\"row_heading level0 row0\" >All</th>\n      <td id=\"T_6b62b_row0_col0\" class=\"data row0 col0\" >0.02</td>\n      <td id=\"T_6b62b_row0_col1\" class=\"data row0 col1\" >0.04</td>\n      <td id=\"T_6b62b_row0_col2\" class=\"data row0 col2\" >0.04</td>\n    </tr>\n    <tr>\n      <th id=\"T_6b62b_level0_row1\" class=\"row_heading level0 row1\" >Small (area < 32^2)</th>\n      <td id=\"T_6b62b_row1_col0\" class=\"data row1 col0\" >0.00</td>\n      <td id=\"T_6b62b_row1_col1\" class=\"data row1 col1\" >0.01</td>\n      <td id=\"T_6b62b_row1_col2\" class=\"data row1 col2\" >0.01</td>\n    </tr>\n    <tr>\n      <th id=\"T_6b62b_level0_row2\" class=\"row_heading level0 row2\" >Medium (32^2 < area < 96^2)</th>\n      <td id=\"T_6b62b_row2_col0\" class=\"data row2 col0\" >0.07</td>\n      <td id=\"T_6b62b_row2_col1\" class=\"data row2 col1\" >0.17</td>\n      <td id=\"T_6b62b_row2_col2\" class=\"data row2 col2\" >0.17</td>\n    </tr>\n    <tr>\n      <th id=\"T_6b62b_level0_row3\" class=\"row_heading level0 row3\" >Large (area < 96^2)</th>\n      <td id=\"T_6b62b_row3_col0\" class=\"data row3 col0\" >0.00</td>\n      <td id=\"T_6b62b_row3_col1\" class=\"data row3 col1\" >0.00</td>\n      <td id=\"T_6b62b_row3_col2\" class=\"data row3 col2\" >0.00</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "0fdba55d07a84b95bf441949cd100cbe": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "9c00309164fc403b87e4ec8f5ffe7d11": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "42ddb6812318426ca148b4b830652e7a": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_5794ac82f9aa4e8d9a4d2ccd77e106ba", "style": "IPY_MODEL_482f5307f69f413491ea88e4f95fe991", "value": "<br><a href=\"#summary_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\" style=\"font-size: 14px;\">Go to top</a>"}}, "5794ac82f9aa4e8d9a4d2ccd77e106ba": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "482f5307f69f413491ea88e4f95fe991": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "218eb8d35f8448169ff66c919bb54764": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "123940202a9d4629a60f5e696e8fa9fc": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "3bd925f75e9743d7b49488770ed49200": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_c1b7e2cfffd54ceeb39014cc26407a5e", "style": "IPY_MODEL_fafd101d15894511ba123f4e6687fb19", "value": "<hr style=\"background-color: #eee;border: 0 none;color: #eee;height: 4px;\">"}}, "c1b7e2cfffd54ceeb39014cc26407a5e": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "fafd101d15894511ba123f4e6687fb19": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "19098e657ecf4196b26755eb139ac37c": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "children": ["IPY_MODEL_7b3e12c3728e46c7b05f5810b1b0faa5", "IPY_MODEL_2c63e0f50a1249a4bf04bb4c4fa8cdd3", "IPY_MODEL_474925e03fbb49eba428325d6d441e87"], "layout": "IPY_MODEL_dcd73436f64d423a9e482ca05186f4df"}}, "7b3e12c3728e46c7b05f5810b1b0faa5": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_58f2787b5c2e40eaaf60df3ef3cacb1d", "style": "IPY_MODEL_0767dd43030148d8bcadba394fea07e7", "value": "<h4 id=\"MeanAverageRecallReport-TrainDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\"><b>Mean Average Recall Report - Train Dataset</b></h4>"}}, "58f2787b5c2e40eaaf60df3ef3cacb1d": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "0767dd43030148d8bcadba394fea07e7": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "2c63e0f50a1249a4bf04bb4c4fa8cdd3": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_2424dde1f25a4259befaae38a5337436", "style": "IPY_MODEL_f0a73856adbc4ddc9abf85f14bef0969", "value": "<p>Summarize mean average recall metrics on a dataset and model per detections and area range. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_mean_average_recall_report.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"}}, "2424dde1f25a4259befaae38a5337436": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "f0a73856adbc4ddc9abf85f14bef0969": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "474925e03fbb49eba428325d6d441e87": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_ccf86230d7304b4ba5a6ffbe485aed4e", "IPY_MODEL_6dd38b0607b44ccf9963a3e8fe9b8277", "IPY_MODEL_4bec3316d59d451f8de4c01f5fb97639"], "layout": "IPY_MODEL_e1de2f9354304d1eaaecec0b670aa7ec"}}, "ccf86230d7304b4ba5a6ffbe485aed4e": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_862fa930f6464d7e88d6d663433630bf", "style": "IPY_MODEL_0d3a048eb7ba4c0990d4538af9662eaa", "value": "<h5><b>Additional Outputs</b></h5>"}}, "862fa930f6464d7e88d6d663433630bf": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "0d3a048eb7ba4c0990d4538af9662eaa": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "6dd38b0607b44ccf9963a3e8fe9b8277": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_f808a2b3240b41fc9409e8cbea04dff1", "style": "IPY_MODEL_63bf8d394ab4440b98d8cf07c84aa9f3", "value": "<style type=\"text/css\">\n#T_9bc26_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_9bc26_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_9bc26_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_9bc26_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_9bc26_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_9bc26_\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th class=\"col_heading level0 col0\" >AR@1 (%)</th>\n      <th class=\"col_heading level0 col1\" >AR@10 (%)</th>\n      <th class=\"col_heading level0 col2\" >AR@100 (%)</th>\n    </tr>\n    <tr>\n      <th class=\"index_name level0\" >Area size</th>\n      <th class=\"blank col0\" >&nbsp;</th>\n      <th class=\"blank col1\" >&nbsp;</th>\n      <th class=\"blank col2\" >&nbsp;</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_9bc26_level0_row0\" class=\"row_heading level0 row0\" >All</th>\n      <td id=\"T_9bc26_row0_col0\" class=\"data row0 col0\" >0.02</td>\n      <td id=\"T_9bc26_row0_col1\" class=\"data row0 col1\" >0.06</td>\n      <td id=\"T_9bc26_row0_col2\" class=\"data row0 col2\" >0.06</td>\n    </tr>\n    <tr>\n      <th id=\"T_9bc26_level0_row1\" class=\"row_heading level0 row1\" >Small (area < 32^2)</th>\n      <td id=\"T_9bc26_row1_col0\" class=\"data row1 col0\" >0.00</td>\n      <td id=\"T_9bc26_row1_col1\" class=\"data row1 col1\" >0.01</td>\n      <td id=\"T_9bc26_row1_col2\" class=\"data row1 col2\" >0.01</td>\n    </tr>\n    <tr>\n      <th id=\"T_9bc26_level0_row2\" class=\"row_heading level0 row2\" >Medium (32^2 < area < 96^2)</th>\n      <td id=\"T_9bc26_row2_col0\" class=\"data row2 col0\" >0.09</td>\n      <td id=\"T_9bc26_row2_col1\" class=\"data row2 col1\" >0.22</td>\n      <td id=\"T_9bc26_row2_col2\" class=\"data row2 col2\" >0.22</td>\n    </tr>\n    <tr>\n      <th id=\"T_9bc26_level0_row3\" class=\"row_heading level0 row3\" >Large (area < 96^2)</th>\n      <td id=\"T_9bc26_row3_col0\" class=\"data row3 col0\" >0.00</td>\n      <td id=\"T_9bc26_row3_col1\" class=\"data row3 col1\" >0.02</td>\n      <td id=\"T_9bc26_row3_col2\" class=\"data row3 col2\" >0.02</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "f808a2b3240b41fc9409e8cbea04dff1": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "63bf8d394ab4440b98d8cf07c84aa9f3": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "4bec3316d59d451f8de4c01f5fb97639": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_300c95ad2c0948679ee9631522199845", "style": "IPY_MODEL_d5613e8234d14b7eb58eee3043714058", "value": "<br><a href=\"#summary_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\" style=\"font-size: 14px;\">Go to top</a>"}}, "300c95ad2c0948679ee9631522199845": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "d5613e8234d14b7eb58eee3043714058": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "e1de2f9354304d1eaaecec0b670aa7ec": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "dcd73436f64d423a9e482ca05186f4df": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "83ac9caceda2412eb439acc58cb2e7d3": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "children": ["IPY_MODEL_c0bef29155694bcfa5e9e887eb644244", "IPY_MODEL_102f85f60edb402db3effbc126b1235f", "IPY_MODEL_14a4b1550ce34671a3dbfb466c5d4156"], "layout": "IPY_MODEL_21a1cbabe0584ed780b60a8c063438f4"}}, "c0bef29155694bcfa5e9e887eb644244": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_fe375c7796bb4fb39096f70c13231597", "style": "IPY_MODEL_5458e9ba2a274df89f8234849a6a6acf", "value": "<h4 id=\"ConfusionMatrix-TestDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\"><b>Confusion Matrix - Test Dataset</b></h4>"}}, "fe375c7796bb4fb39096f70c13231597": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "5458e9ba2a274df89f8234849a6a6acf": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "102f85f60edb402db3effbc126b1235f": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_6d7a27f375954636b6df794dac25ff34", "style": "IPY_MODEL_565a7db61d004485b1aea2484e68420e", "value": "<p>Calculate the confusion matrix of the model on the given dataset. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_confusion_matrix.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"}}, "6d7a27f375954636b6df794dac25ff34": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "565a7db61d004485b1aea2484e68420e": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "14a4b1550ce34671a3dbfb466c5d4156": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_ab7fe15d3aa947ab860dff9545b288f5", "IPY_MODEL_8d6ceb9fcc2f4128890eebebe35f5d90", "IPY_MODEL_ec33256bdf66420bb0ddf298f2ed752a", "IPY_MODEL_6949e3ade2ed40e4806f0d80815a8f26", "IPY_MODEL_74376814e8c0463e9c8d0a08a52eab5e"], "layout": "IPY_MODEL_b5a99bb0c5a74bf3810edcee1bdd59d5"}}, "ab7fe15d3aa947ab860dff9545b288f5": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_0857084f018d455d8cfe694049d6d52b", "style": "IPY_MODEL_dfa5e519e55a42938f82b151ff570e56", "value": "<h5><b>Additional Outputs</b></h5>"}}, "0857084f018d455d8cfe694049d6d52b": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "dfa5e519e55a42938f82b151ff570e56": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "8d6ceb9fcc2f4128890eebebe35f5d90": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_fb910ed672fb4683986933bd8b0f1c13", "style": "IPY_MODEL_c4729ec45c2a4b8aad054aabd9965efc", "value": "<div>Showing 10 of 1 classes:</div>"}}, "fb910ed672fb4683986933bd8b0f1c13": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "c4729ec45c2a4b8aad054aabd9965efc": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "ec33256bdf66420bb0ddf298f2ed752a": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_77de75f1683042c98dcf22d5fa58c1b6", "style": "IPY_MODEL_31824a698c874673b1562ed24f5c96c7", "value": "<div>\"No overlapping\" categories are labels and prediction which did not have a matching label/prediction.<br>For example a predictions that did not have a sufficiently overlapping label bounding box will appear under \"No overlapping\" category in the True Value axis (y-axis).</div>"}}, "77de75f1683042c98dcf22d5fa58c1b6": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "31824a698c874673b1562ed24f5c96c7": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "6949e3ade2ed40e4806f0d80815a8f26": {"model_name": "FigureModel", "model_module": "jupyterlab-plotly", "model_module_version": "^5.11.0", "state": {"_config": {"plotlyServerURL": "https://plot.ly"}, "_data": [{"colorbar": {"title": {"text": "% out of<br>True Values"}}, "text": [[49.0, 369.0], [84.0, 0.0]], "texttemplate": "%{z}%<br>(%{text})", "x": ["Tomato", "No overlapping"], "y": ["Tomato", "No overlapping"], "z": [["11.72", "88.28"], ["100", "0"]], "type": "heatmap", "uid": "27d1b3d7-f9c5-427d-9e43-3deeff5cfe37"}], "_dom_classes": [], "_js2py_layoutDelta": {}, "_js2py_pointsCallback": {}, "_js2py_relayout": {}, "_js2py_restyle": {}, "_js2py_traceDeltas": {}, "_js2py_update": {}, "_layout": {"height": 600, "template": {"data": {"barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "barpolar"}], "bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "bar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram": [{"marker": {"pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "histogram"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatter": [{"fillpattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}, "type": "scatter"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "title": {"text": "Percent Out of True Values (Count)"}, "xaxis": {"constrain": "domain", "scaleanchor": "y", "title": {"text": "Predicted Value"}, "type": "category"}, "yaxis": {"autorange": "reversed", "constrain": "domain", "title": {"text": "True value"}, "type": "category"}}, "_py2js_addTraces": {}, "_py2js_animate": {}, "_py2js_deleteTraces": {}, "_py2js_moveTraces": {}, "_py2js_relayout": {}, "_py2js_removeLayoutProps": {}, "_py2js_removeTraceProps": {}, "_py2js_restyle": {}, "_py2js_update": {}, "_view_count": 0}}, "74376814e8c0463e9c8d0a08a52eab5e": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_315e7581289a4cfc84850be04aa170ae", "style": "IPY_MODEL_ba2624917d9e4b838cb5d5c38539cbe9", "value": "<br><a href=\"#summary_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\" style=\"font-size: 14px;\">Go to top</a>"}}, "315e7581289a4cfc84850be04aa170ae": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "ba2624917d9e4b838cb5d5c38539cbe9": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "b5a99bb0c5a74bf3810edcee1bdd59d5": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "21a1cbabe0584ed780b60a8c063438f4": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "ada48980efe44bab900ea0f1e40c2515": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "children": ["IPY_MODEL_487f0ffb96c04506bde95acbec6e5cfc", "IPY_MODEL_64652fdb8cce45f18addba422581781f", "IPY_MODEL_11d8ea83940b4c999dfca2879b0b153c"], "layout": "IPY_MODEL_113b6389c075416abfad021483cdf32f"}}, "487f0ffb96c04506bde95acbec6e5cfc": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_5d841202176a4195a3f5379a5b1b5234", "style": "IPY_MODEL_c411f35ba5c9465db6840c03ddf20d06", "value": "<h4 id=\"ConfusionMatrix-TrainDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\"><b>Confusion Matrix - Train Dataset</b></h4>"}}, "5d841202176a4195a3f5379a5b1b5234": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "c411f35ba5c9465db6840c03ddf20d06": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "64652fdb8cce45f18addba422581781f": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_479d89f8f00f41a699d0f91f008c5f9f", "style": "IPY_MODEL_8399dc09f2e84abc8bf87c0e6eba09fe", "value": "<p>Calculate the confusion matrix of the model on the given dataset. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_confusion_matrix.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"}}, "479d89f8f00f41a699d0f91f008c5f9f": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "8399dc09f2e84abc8bf87c0e6eba09fe": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "11d8ea83940b4c999dfca2879b0b153c": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_65e035bb39014a8fb4971b11059206c3", "IPY_MODEL_37ea84f7ff27407d9cb379d1f8da0b63", "IPY_MODEL_6a95abef000c4464a2b708cd4ebfec33", "IPY_MODEL_307b444ef6eb4e538b3370ab023f5ca4", "IPY_MODEL_a16554f2a75549db84a0cc53812e24e8"], "layout": "IPY_MODEL_7200ad1a148544f9971df652e0ac4b31"}}, "65e035bb39014a8fb4971b11059206c3": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_0da90463d9df4cb7af7896011602e36d", "style": "IPY_MODEL_1364df1e00294aec917a886db787671b", "value": "<h5><b>Additional Outputs</b></h5>"}}, "0da90463d9df4cb7af7896011602e36d": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "1364df1e00294aec917a886db787671b": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "37ea84f7ff27407d9cb379d1f8da0b63": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_434c108c15714262be8be124116a884a", "style": "IPY_MODEL_002e693513aa443681bcd9f0c80ff00f", "value": "<div>Showing 10 of 1 classes:</div>"}}, "434c108c15714262be8be124116a884a": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "002e693513aa443681bcd9f0c80ff00f": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "6a95abef000c4464a2b708cd4ebfec33": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_a62687b35bc2437eb125106b5731298b", "style": "IPY_MODEL_3152be4d1cd74baf9dbb95e906d9ee84", "value": "<div>\"No overlapping\" categories are labels and prediction which did not have a matching label/prediction.<br>For example a predictions that did not have a sufficiently overlapping label bounding box will appear under \"No overlapping\" category in the True Value axis (y-axis).</div>"}}, "a62687b35bc2437eb125106b5731298b": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "3152be4d1cd74baf9dbb95e906d9ee84": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "307b444ef6eb4e538b3370ab023f5ca4": {"model_name": "FigureModel", "model_module": "jupyterlab-plotly", "model_module_version": "^5.11.0", "state": {"_config": {"plotlyServerURL": "https://plot.ly"}, "_data": [{"colorbar": {"title": {"text": "% out of<br>True Values"}}, "text": [[535.0, 3527.0], [958.0, 0.0]], "texttemplate": "%{z}%<br>(%{text})", "x": ["Tomato", "No overlapping"], "y": ["Tomato", "No overlapping"], "z": [["13.17", "86.83"], ["100", "0"]], "type": "heatmap", "uid": "d32f7118-1fcb-41d3-ba21-0dbd5a6fd1f3"}], "_dom_classes": [], "_js2py_layoutDelta": {}, "_js2py_pointsCallback": {}, "_js2py_relayout": {}, "_js2py_restyle": {}, "_js2py_traceDeltas": {}, "_js2py_update": {}, "_layout": {"height": 600, "template": {"data": {"barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "barpolar"}], "bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "bar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram": [{"marker": {"pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "histogram"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatter": [{"fillpattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}, "type": "scatter"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "title": {"text": "Percent Out of True Values (Count)"}, "xaxis": {"constrain": "domain", "scaleanchor": "y", "title": {"text": "Predicted Value"}, "type": "category"}, "yaxis": {"autorange": "reversed", "constrain": "domain", "title": {"text": "True value"}, "type": "category"}}, "_py2js_addTraces": {}, "_py2js_animate": {}, "_py2js_deleteTraces": {}, "_py2js_moveTraces": {}, "_py2js_relayout": {}, "_py2js_removeLayoutProps": {}, "_py2js_removeTraceProps": {}, "_py2js_restyle": {}, "_py2js_update": {}, "_view_count": 0}}, "a16554f2a75549db84a0cc53812e24e8": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_27b818c83c65400e97f2993e9706bd4e", "style": "IPY_MODEL_d7906a016877465283caee1d7409e7d6", "value": "<br><a href=\"#summary_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\" style=\"font-size: 14px;\">Go to top</a>"}}, "27b818c83c65400e97f2993e9706bd4e": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "d7906a016877465283caee1d7409e7d6": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "7200ad1a148544f9971df652e0ac4b31": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "113b6389c075416abfad021483cdf32f": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "f53ce7cd7b5349e482419b7dd14fce9c": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "65f11e7cbb6044c486a5673a742cc91d": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "c3928c4c4a8b4eac9bcfbafb245c1789": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "6ea00567bae84457bd05046b86faac85": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_c524ca3caaab476bbf719b199c7d182a", "IPY_MODEL_b1d7c7ae693f405aa1dfa5fbdb9ef0ee"], "layout": "IPY_MODEL_8bed832c99554b9ab165d17dcd375500"}}, "c524ca3caaab476bbf719b199c7d182a": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_b76061a498c049a4acc6588c3270648f", "style": "IPY_MODEL_3cef24fc37a34dddbdc626be292ef094"}}, "b76061a498c049a4acc6588c3270648f": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "3cef24fc37a34dddbdc626be292ef094": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "b1d7c7ae693f405aa1dfa5fbdb9ef0ee": {"model_name": "AccordionModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "_titles": {"0": "Didn't Run"}, "children": ["IPY_MODEL_a57f80d77a0f4dc2b674dfda03d57efc"], "layout": "IPY_MODEL_81846cf650f54f67a19d67a69f8c8139", "selected_index": null}}, "a57f80d77a0f4dc2b674dfda03d57efc": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_72d90b49445346e28e9b77b36f06b5f3", "style": "IPY_MODEL_ffc3281a6e994613b1020896ef41d89b", "value": "<style type=\"text/css\">\n#T_697ef_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_697ef_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_697ef_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_697ef_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_697ef_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_697ef_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Check</th>\n      <th class=\"col_heading level0 col1\" >Reason</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_697ef_row0_col0\" class=\"data row0 col0\" >Simple Model Comparison</td>\n      <td id=\"T_697ef_row0_col1\" class=\"data row0 col1\" >Check is irrelevant for task of type TaskType.OBJECT_DETECTION</td>\n    </tr>\n    <tr>\n      <td id=\"T_697ef_row1_col0\" class=\"data row1 col0\" >Model Error Analysis</td>\n      <td id=\"T_697ef_row1_col1\" class=\"data row1 col1\" >DeepchecksProcessError: Unable to train meaningful error model (r^2 score: 0.2)</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "72d90b49445346e28e9b77b36f06b5f3": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "ffc3281a6e994613b1020896ef41d89b": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "81846cf650f54f67a19d67a69f8c8139": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "8bed832c99554b9ab165d17dcd375500": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "8d1cc23b876b4aa59e18adb34e144a1c": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "ee0b16ca32754a77b1fc41fbf126614c": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}}}
    </script>
    <script type="application/vnd.jupyter.widget-view+json">
    {"version_major": 2, "version_minor": 0, "model_id": "ddbe9715fc2942a4a074dc3e02607ed4"}
    </script>

    </body>
    </html>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  25.549 seconds)


.. _sphx_glr_download_user-guide_vision_auto_quickstarts_plot_detection_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_detection_tutorial.py <plot_detection_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_detection_tutorial.ipynb <plot_detection_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
