
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "user-guide/vision/auto_quickstarts/plot_detection_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_user-guide_vision_auto_quickstarts_plot_detection_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_user-guide_vision_auto_quickstarts_plot_detection_tutorial.py:


.. _vision_detection_tutorial:

==========================
Object Detection Tutorial
==========================

In this tutorial, you will learn how to validate your **object detection model** using deepchecks test suites.
You can read more about the different checks and suites for computer vision use cases at the
:doc:`examples section  </checks_gallery/vision/index>`

If you just want to see the output of this tutorial, jump to the :ref:`observing the results <vision_segmentation_tutorial__observing_the_result>` section.

An object detection tasks usually consist of two parts:

- Object Localization, where the model predicts the location of an object in the image,
- Object Classification, where the model predicts the class of the detected object.

The common output of an object detection model is a list of bounding boxes around the objects, and
their classes.

.. code-block:: bash

    # Before we start, if you don't have deepchecks vision package installed yet, run:
    import sys
    !{sys.executable} -m pip install "deepchecks[vision]" --quiet --upgrade # --user

    # or install using pip from your python environment

.. GENERATED FROM PYTHON SOURCE LINES 32-34

Defining the data and model
===========================

.. GENERATED FROM PYTHON SOURCE LINES 34-56

.. code-block:: default


    # Importing the required packages
    import os
    import urllib.request
    import xml.etree.ElementTree as ET
    import zipfile
    from functools import partial

    import albumentations as A
    import matplotlib.pyplot as plt
    import numpy as np
    import torch
    import torchvision
    from albumentations.pytorch import ToTensorV2
    from PIL import Image
    from torch import nn
    from torch.utils.data import DataLoader, Dataset
    from torchvision.models.detection import _utils as det_utils
    from torchvision.models.detection.ssdlite import SSDLiteClassificationHead

    from deepchecks.vision.detection_data import DetectionData








.. GENERATED FROM PYTHON SOURCE LINES 57-68

Load Data
~~~~~~~~~
The model in this tutorial is used to detect tomatoes in images. The model is trained on a dataset consisted of
895 images of tomatoes, with bounding box annotations provided in PASCAL VOC format.
All annotations belong to a single class: tomato.

.. note::
    The dataset is available at the following link:
    https://www.kaggle.com/andrewmvd/tomato-detection

    We thank the authors of the dataset for providing the dataset.

.. GENERATED FROM PYTHON SOURCE LINES 68-141

.. code-block:: default


    url = 'https://figshare.com/ndownloader/files/34488599'
    urllib.request.urlretrieve(url, 'tomato-detection.zip')

    with zipfile.ZipFile('tomato-detection.zip', 'r') as zip_ref:
        zip_ref.extractall('.')

    class TomatoDataset(Dataset):
        def __init__(self, root, transforms):
            self.root = root
            self.transforms = transforms

            self.images = list(sorted(os.listdir(os.path.join(root, 'images'))))
            self.annotations = list(sorted(os.listdir(os.path.join(root, 'annotations'))))

        def __getitem__(self, idx):
            img_path = os.path.join(self.root, "images", self.images[idx])
            ann_path = os.path.join(self.root, "annotations", self.annotations[idx])
            img = Image.open(img_path).convert("RGB")
            bboxes = []
            labels = []
            with open(ann_path, 'r') as f:
                tree = ET.parse(f)
                root = tree.getroot()
                size = root.find('size')
                w = int(size.find('width').text)
                h = int(size.find('height').text)

                for obj in root.iter('object'):
                    difficult = obj.find('difficult').text
                    if int(difficult) == 1:
                        continue
                    cls_id = 1
                    xmlbox = obj.find('bndbox')
                    b = [float(xmlbox.find('xmin').text), float(xmlbox.find('ymin').text), float(xmlbox.find('xmax').text),
                            float(xmlbox.find('ymax').text)]
                    bboxes.append(b)
                    labels.append(cls_id)

            bboxes = torch.as_tensor(np.array(bboxes), dtype=torch.float32)
            labels = torch.as_tensor(np.array(labels), dtype=torch.int64)

            if self.transforms is not None:
                res = self.transforms(image=np.array(img), bboxes=bboxes, class_labels=labels)

            target = {
                'boxes': [torch.Tensor(x) for x in res['bboxes']],
                'labels': res['class_labels']
            }

            img = res['image']

            return img, target

        def __len__(self):
            return len(self.images)

    data_transforms = A.Compose([
        A.Resize(height=256, width=256),
        A.CenterCrop(height=224, width=224),
        A.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)),
        ToTensorV2(),
    ], bbox_params=A.BboxParams(format='pascal_voc', label_fields=['class_labels']))

    dataset = TomatoDataset(root=os.path.join(os.path.curdir, 'tomato-detection/data'),
                            transforms=data_transforms)
    train_set, test_set = torch.utils.data.random_split(dataset,
                                                        [int(len(dataset)*0.9), len(dataset)-int(len(dataset)*0.9)],
                                                        generator=torch.Generator().manual_seed(42))
    test_set.transforms = A.Compose([ToTensorV2()])
    train_loader = DataLoader(train_set, batch_size=64, collate_fn=(lambda batch: tuple(zip(*batch))))
    test_loader = DataLoader(test_set, batch_size=64, collate_fn=(lambda batch: tuple(zip(*batch))))








.. GENERATED FROM PYTHON SOURCE LINES 142-145

Visualize a Few Images
~~~~~~~~~~~~~~~~~~~~~~
Let's visualize a few training images so as to understand the data augmentation.

.. GENERATED FROM PYTHON SOURCE LINES 145-180

.. code-block:: default


    def prepare(inp):
        """Imshow for Tensor."""
        inp = inp.numpy().transpose((1, 2, 0))
        mean = np.array([0.485, 0.456, 0.406])
        std = np.array([0.229, 0.224, 0.225])
        inp = std * inp + mean
        inp = np.clip(inp, 0, 1) * 255
        inp = inp.transpose((2,0,1))
        return torch.tensor(inp, dtype=torch.uint8)

    import torchvision.transforms.functional as F


    def show(imgs):
        if not isinstance(imgs, list):
            imgs = [imgs]
        fig, axs = plt.subplots(ncols=len(imgs), squeeze=False, figsize=(20,20))
        for i, img in enumerate(imgs):
            img = img.detach()
            img = F.to_pil_image(img)
            axs[0, i].imshow(np.asarray(img))
            axs[0, i].set(xticklabels=[], yticklabels=[], xticks=[], yticks=[])

    from torchvision.utils import draw_bounding_boxes

    data = next(iter(train_loader))
    inp, targets = data[0][:4], data[1][:4]


    result = [draw_bounding_boxes(prepare(inp[i]), torch.stack(targets[i]['boxes']),
                                  colors=['yellow'] * torch.stack(targets[i]['boxes']).shape[0], width=5)
              for i in range(len(targets))]
    show(result)




.. image-sg:: /user-guide/vision/auto_quickstarts/images/sphx_glr_plot_detection_tutorial_001.png
   :alt: plot detection tutorial
   :srcset: /user-guide/vision/auto_quickstarts/images/sphx_glr_plot_detection_tutorial_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 181-192

.. image :: /_static/images/tutorials/tomatoes.png
    :alt: Tomatoes with bbox

Downloading a Pre-trained Model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In this tutorial, we will download a pre-trained SSDlite model and a MobileNetV3 Large backbone
from the official PyTorch repository. For more details, please refer to the
`official documentation <https://pytorch.org/vision/stable/generated/torchvision.models.detection.ssdlite320_mobilenet_v3_large.html#torchvision.models.detection.ssdlite320_mobilenet_v3_large>`_.

After downloading the model, we will fine-tune it for our particular classes. We will do it by replacing the pre-trained
head with a new one that matches our needs.

.. GENERATED FROM PYTHON SOURCE LINES 192-204

.. code-block:: default


    device = torch.device("cuda") if torch.cuda.is_available() else torch.device("cpu")

    model = torchvision.models.detection.ssdlite320_mobilenet_v3_large(pretrained=True)

    in_channels = det_utils.retrieve_out_channels(model.backbone, (320, 320))
    num_anchors = model.anchor_generator.num_anchors_per_location()
    norm_layer = partial(nn.BatchNorm2d, eps=0.001, momentum=0.03)

    model.head.classification_head = SSDLiteClassificationHead(in_channels, num_anchors, 2, norm_layer)
    model.to(device)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading: "https://download.pytorch.org/models/ssdlite320_mobilenet_v3_large_coco-a79551df.pth" to /home/runner/.cache/torch/hub/checkpoints/ssdlite320_mobilenet_v3_large_coco-a79551df.pth
      0%|          | 0.00/13.4M [00:00<?, ?B/s]     79%|#######9  | 10.6M/13.4M [00:00<00:00, 111MB/s]    100%|##########| 13.4M/13.4M [00:00<00:00, 127MB/s]

    SSD(
      (backbone): SSDLiteFeatureExtractorMobileNet(
        (features): Sequential(
          (0): Sequential(
            (0): ConvNormActivation(
              (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (1): BatchNorm2d(16, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): Hardswish()
            )
            (1): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                  (1): BatchNorm2d(16, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (1): ConvNormActivation(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(16, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (2): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(16, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (1): ConvNormActivation(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
                  (1): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (2): ConvNormActivation(
                  (0): Conv2d(64, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(24, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (3): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(24, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(72, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (1): ConvNormActivation(
                  (0): Conv2d(72, 72, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=72, bias=False)
                  (1): BatchNorm2d(72, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (2): ConvNormActivation(
                  (0): Conv2d(72, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(24, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (4): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(24, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(72, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (1): ConvNormActivation(
                  (0): Conv2d(72, 72, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=72, bias=False)
                  (1): BatchNorm2d(72, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (2): SqueezeExcitation(
                  (avgpool): AdaptiveAvgPool2d(output_size=1)
                  (fc1): Conv2d(72, 24, kernel_size=(1, 1), stride=(1, 1))
                  (fc2): Conv2d(24, 72, kernel_size=(1, 1), stride=(1, 1))
                  (activation): ReLU()
                  (scale_activation): Hardsigmoid()
                )
                (3): ConvNormActivation(
                  (0): Conv2d(72, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(40, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (5): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(40, 120, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(120, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (1): ConvNormActivation(
                  (0): Conv2d(120, 120, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=120, bias=False)
                  (1): BatchNorm2d(120, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (2): SqueezeExcitation(
                  (avgpool): AdaptiveAvgPool2d(output_size=1)
                  (fc1): Conv2d(120, 32, kernel_size=(1, 1), stride=(1, 1))
                  (fc2): Conv2d(32, 120, kernel_size=(1, 1), stride=(1, 1))
                  (activation): ReLU()
                  (scale_activation): Hardsigmoid()
                )
                (3): ConvNormActivation(
                  (0): Conv2d(120, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(40, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (6): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(40, 120, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(120, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (1): ConvNormActivation(
                  (0): Conv2d(120, 120, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=120, bias=False)
                  (1): BatchNorm2d(120, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (2): SqueezeExcitation(
                  (avgpool): AdaptiveAvgPool2d(output_size=1)
                  (fc1): Conv2d(120, 32, kernel_size=(1, 1), stride=(1, 1))
                  (fc2): Conv2d(32, 120, kernel_size=(1, 1), stride=(1, 1))
                  (activation): ReLU()
                  (scale_activation): Hardsigmoid()
                )
                (3): ConvNormActivation(
                  (0): Conv2d(120, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(40, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (7): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(240, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (1): ConvNormActivation(
                  (0): Conv2d(240, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=240, bias=False)
                  (1): BatchNorm2d(240, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (2): ConvNormActivation(
                  (0): Conv2d(240, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(80, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (8): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(80, 200, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(200, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (1): ConvNormActivation(
                  (0): Conv2d(200, 200, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=200, bias=False)
                  (1): BatchNorm2d(200, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (2): ConvNormActivation(
                  (0): Conv2d(200, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(80, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (9): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(80, 184, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(184, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (1): ConvNormActivation(
                  (0): Conv2d(184, 184, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=184, bias=False)
                  (1): BatchNorm2d(184, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (2): ConvNormActivation(
                  (0): Conv2d(184, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(80, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (10): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(80, 184, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(184, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (1): ConvNormActivation(
                  (0): Conv2d(184, 184, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=184, bias=False)
                  (1): BatchNorm2d(184, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (2): ConvNormActivation(
                  (0): Conv2d(184, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(80, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (11): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(480, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (1): ConvNormActivation(
                  (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)
                  (1): BatchNorm2d(480, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (2): SqueezeExcitation(
                  (avgpool): AdaptiveAvgPool2d(output_size=1)
                  (fc1): Conv2d(480, 120, kernel_size=(1, 1), stride=(1, 1))
                  (fc2): Conv2d(120, 480, kernel_size=(1, 1), stride=(1, 1))
                  (activation): ReLU()
                  (scale_activation): Hardsigmoid()
                )
                (3): ConvNormActivation(
                  (0): Conv2d(480, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(112, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (12): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(672, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (1): ConvNormActivation(
                  (0): Conv2d(672, 672, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=672, bias=False)
                  (1): BatchNorm2d(672, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (2): SqueezeExcitation(
                  (avgpool): AdaptiveAvgPool2d(output_size=1)
                  (fc1): Conv2d(672, 168, kernel_size=(1, 1), stride=(1, 1))
                  (fc2): Conv2d(168, 672, kernel_size=(1, 1), stride=(1, 1))
                  (activation): ReLU()
                  (scale_activation): Hardsigmoid()
                )
                (3): ConvNormActivation(
                  (0): Conv2d(672, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(112, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (13): ConvNormActivation(
              (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(672, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): Hardswish()
            )
          )
          (1): Sequential(
            (0): Sequential(
              (1): ConvNormActivation(
                (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=672, bias=False)
                (1): BatchNorm2d(672, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): Hardswish()
              )
              (2): SqueezeExcitation(
                (avgpool): AdaptiveAvgPool2d(output_size=1)
                (fc1): Conv2d(672, 168, kernel_size=(1, 1), stride=(1, 1))
                (fc2): Conv2d(168, 672, kernel_size=(1, 1), stride=(1, 1))
                (activation): ReLU()
                (scale_activation): Hardsigmoid()
              )
              (3): ConvNormActivation(
                (0): Conv2d(672, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(80, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              )
            )
            (1): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(480, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (1): ConvNormActivation(
                  (0): Conv2d(480, 480, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=480, bias=False)
                  (1): BatchNorm2d(480, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (2): SqueezeExcitation(
                  (avgpool): AdaptiveAvgPool2d(output_size=1)
                  (fc1): Conv2d(480, 120, kernel_size=(1, 1), stride=(1, 1))
                  (fc2): Conv2d(120, 480, kernel_size=(1, 1), stride=(1, 1))
                  (activation): ReLU()
                  (scale_activation): Hardsigmoid()
                )
                (3): ConvNormActivation(
                  (0): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(80, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (2): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(480, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (1): ConvNormActivation(
                  (0): Conv2d(480, 480, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=480, bias=False)
                  (1): BatchNorm2d(480, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (2): SqueezeExcitation(
                  (avgpool): AdaptiveAvgPool2d(output_size=1)
                  (fc1): Conv2d(480, 120, kernel_size=(1, 1), stride=(1, 1))
                  (fc2): Conv2d(120, 480, kernel_size=(1, 1), stride=(1, 1))
                  (activation): ReLU()
                  (scale_activation): Hardsigmoid()
                )
                (3): ConvNormActivation(
                  (0): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(80, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (3): ConvNormActivation(
              (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(480, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): Hardswish()
            )
          )
        )
        (extra): ModuleList(
          (0): Sequential(
            (0): ConvNormActivation(
              (0): Conv2d(480, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
            (1): ConvNormActivation(
              (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256, bias=False)
              (1): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
            (2): ConvNormActivation(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
          )
          (1): Sequential(
            (0): ConvNormActivation(
              (0): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
            (1): ConvNormActivation(
              (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=128, bias=False)
              (1): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
            (2): ConvNormActivation(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
          )
          (2): Sequential(
            (0): ConvNormActivation(
              (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
            (1): ConvNormActivation(
              (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=128, bias=False)
              (1): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
            (2): ConvNormActivation(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
          )
          (3): Sequential(
            (0): ConvNormActivation(
              (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
            (1): ConvNormActivation(
              (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
              (1): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
            (2): ConvNormActivation(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
          )
        )
      )
      (anchor_generator): DefaultBoxGenerator(aspect_ratios=[[2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3]], clip=True, scales=[0.2, 0.35, 0.5, 0.65, 0.8, 0.95, 1.0], steps=None)
      (head): SSDLiteHead(
        (classification_head): SSDLiteClassificationHead(
          (module_list): ModuleList(
            (0): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(672, 672, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=672, bias=False)
                (1): BatchNorm2d(672, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(672, 12, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)
                (1): BatchNorm2d(480, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(480, 12, kernel_size=(1, 1), stride=(1, 1))
            )
            (2): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512, bias=False)
                (1): BatchNorm2d(512, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(512, 12, kernel_size=(1, 1), stride=(1, 1))
            )
            (3): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256, bias=False)
                (1): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
            )
            (4): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256, bias=False)
                (1): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
            )
            (5): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
                (1): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(128, 12, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
        (regression_head): SSDLiteRegressionHead(
          (module_list): ModuleList(
            (0): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(672, 672, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=672, bias=False)
                (1): BatchNorm2d(672, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(672, 24, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)
                (1): BatchNorm2d(480, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(480, 24, kernel_size=(1, 1), stride=(1, 1))
            )
            (2): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512, bias=False)
                (1): BatchNorm2d(512, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(512, 24, kernel_size=(1, 1), stride=(1, 1))
            )
            (3): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256, bias=False)
                (1): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(256, 24, kernel_size=(1, 1), stride=(1, 1))
            )
            (4): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256, bias=False)
                (1): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(256, 24, kernel_size=(1, 1), stride=(1, 1))
            )
            (5): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
                (1): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(128, 24, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
      )
      (transform): GeneralizedRCNNTransform(
          Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])
          Resize(min_size=(320,), max_size=320, mode='bilinear')
      )
    )



.. GENERATED FROM PYTHON SOURCE LINES 205-208

Loading Pre-trained Weights
~~~~~~~~~~~~~~~~~~~~~~~~~~~
For this tutorial we will not include the training code itself, but will download and load pre-trained weights.

.. GENERATED FROM PYTHON SOURCE LINES 208-212

.. code-block:: default


    model.load_state_dict(torch.load('tomato-detection/ssd_model.pth'))
    _ = model.eval()








.. GENERATED FROM PYTHON SOURCE LINES 213-221

Validating the Model With Deepchecks
=====================================
Now, after we have the training data, test data and the model, we can validate the model with
deepchecks test suites.

Visualize the Data Loader and the Model Outputs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
First we'll make sure we are familiar with the data loader and the model outputs.

.. GENERATED FROM PYTHON SOURCE LINES 221-233

.. code-block:: default


    batch = next(iter(train_loader))

    print("Batch type is: ", type(batch))
    print("First element is: ", type(batch[0]), "with len of ", len(batch[0]))
    print("Example output of an image shape from the dataloader ", batch[0][0].shape)
    print("Image values", batch[0][0])
    print("-"*80)

    print("Second element is: ", type(batch[1]), "with len of ", len(batch[1]))
    print("Example output of a label from the dataloader ", batch[1][0])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Batch type is:  <class 'tuple'>
    First element is:  <class 'tuple'> with len of  64
    Example output of an image shape from the dataloader  torch.Size([3, 224, 224])
    Image values tensor([[[-1.79253, -1.82678, -1.82678,  ...,  1.39267,  1.34130,  1.32417],
             [-1.72403, -1.79253, -1.80966,  ...,  1.35842,  1.32417,  1.34130],
             [-1.75828, -1.74116, -1.70691,  ...,  1.32417,  1.34130,  1.35842],
             ...,
             [-1.84391, -1.82678, -1.75828,  ...,  0.62206,  0.19394, -0.35405],
             [-1.80966, -1.79253, -1.72403,  ...,  0.81043,  0.72481,  0.34806],
             [-1.79253, -1.84391, -1.75828,  ...,  0.81043,  0.82755,  0.69056]],

            [[-1.38796, -1.45798, -1.45798,  ...,  1.51821,  1.46569,  1.46569],
             [-1.38796, -1.47549, -1.52801,  ...,  1.50070,  1.46569,  1.48319],
             [-1.42297, -1.47549, -1.49300,  ...,  1.46569,  1.50070,  1.50070],
             ...,
             [-1.70308, -1.68557, -1.61555,  ...,  0.67787,  0.22269, -0.33753],
             [-1.68557, -1.66807, -1.58053,  ...,  0.87045,  0.74790,  0.38025],
             [-1.68557, -1.70308, -1.61555,  ...,  0.87045,  0.85294,  0.71289]],

            [[-1.57786, -1.61272, -1.61272,  ...,  1.66397,  1.61168,  1.59425],
             [-1.54301, -1.59529, -1.64758,  ...,  1.62911,  1.59425,  1.59425],
             [-1.59529, -1.59529, -1.61272,  ...,  1.59425,  1.61168,  1.62911],
             ...,
             [-1.63015, -1.59529, -1.52558,  ...,  0.46135,  0.02562, -0.53211],
             [-1.59529, -1.54301, -1.47329,  ...,  0.72279,  0.61821,  0.21734],
             [-1.59529, -1.59529, -1.50815,  ...,  0.72279,  0.72279,  0.56593]]])
    --------------------------------------------------------------------------------
    Second element is:  <class 'tuple'> with len of  64
    Example output of a label from the dataloader  {'boxes': [tensor([  0.00000,  75.13600,  39.68000, 165.75999]), tensor([ 0.00000,  0.00000, 94.08000, 93.56800])], 'labels': [tensor(1), tensor(1)]}




.. GENERATED FROM PYTHON SOURCE LINES 234-247

Implementing the DetectionData class
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The checks in the package validate the model & data by calculating various quantities over the data, labels and
predictions. In order to do that, those must be in a pre-defined format, according to the task type.
The first step is to implement a class that enables deepchecks to interact with your model and data and transform
them to this pre-defined format, which is set for each task type.
In this tutorial, we will implement the object detection task type by implementing a class that inherits from the
:class:`deepchecks.vision.detection_data.DetectionData` class.

The DetectionData class contains additional data and general methods intended for easy access to relevant metadata
for object detection ML models validation.
To learn more about the expected format please visit the API reference for the
:class:`deepchecks.vision.detection_data.DetectionData` class.

.. GENERATED FROM PYTHON SOURCE LINES 247-320

.. code-block:: default


    from deepchecks.vision.detection_data import DetectionData


    class TomatoData(DetectionData):

        def __init__(self, *args, **kwargs):
            super().__init__(*args, **kwargs)

        def batch_to_images(self, batch):
            """
            Convert a batch of data to images in the expected format. The expected format is an iterable of cv2 images,
            where each image is a numpy array of shape (height, width, channels). The numbers in the array should be in the
            range [0, 255] in a uint8 format.
            """
            inp = torch.stack(list(batch[0])).cpu().detach().numpy().transpose((0, 2, 3, 1))
            mean = [0.485, 0.456, 0.406]
            std = [0.229, 0.224, 0.225]
            # Un-normalize the images
            inp = std * inp + mean
            inp = np.clip(inp, 0, 1)
            return inp * 255

        def batch_to_labels(self, batch):
            """
            Convert a batch of data to labels in the expected format. The expected format is a list of tensors of length N,
            where N is the number of samples. Each tensor element is in a shape of [B, 5], where B is the number of bboxes
            in the image, and each bounding box is in the structure of [class_id, x, y, w, h].
            """
            tensor_annotations = batch[1]
            label = []
            for annotation in tensor_annotations:
                if len(annotation["boxes"]):
                    bbox = torch.stack(annotation["boxes"])
                    # Convert the Pascal VOC xyxy format to xywh format
                    bbox[:, 2:] = bbox[:, 2:] - bbox[:, :2]
                    # The label shape is [class_id, x, y, w, h]
                    label.append(
                        torch.concat([torch.stack(annotation["labels"]).reshape((-1, 1)), bbox], dim=1)
                    )
                else:
                    # If it's an empty image, we need to add an empty label
                    label.append(torch.tensor([]))
            return label

        def infer_on_batch(self, batch, model, device):
            """
            Returns the predictions for a batch of data. The expected format is a list of tensors of shape length N, where N
            is the number of samples. Each tensor element is in a shape of [B, 6], where B is the number of bboxes in the
            predictions, and each bounding box is in the structure of [x, y, w, h, score, class_id].
            """
            nm_thrs = 0.2
            score_thrs = 0.7
            imgs = list(img.to(device) for img in batch[0])
            # Getting the predictions of the model on the batch
            with torch.no_grad():
                preds = model(imgs)
            processed_pred = []
            for pred in preds:
                # Performoing non-maximum suppression on the detections
                keep_boxes = torchvision.ops.nms(pred['boxes'], pred['scores'], nm_thrs)
                score_filter = pred['scores'][keep_boxes] > score_thrs

                # get the filtered result
                test_boxes = pred['boxes'][keep_boxes][score_filter].reshape((-1, 4))
                test_boxes[:, 2:] = test_boxes[:, 2:] - test_boxes[:, :2]  # xyxy to xywh
                test_labels = pred['labels'][keep_boxes][score_filter]
                test_scores = pred['scores'][keep_boxes][score_filter]

                processed_pred.append(
                    torch.concat([test_boxes, test_scores.reshape((-1, 1)), test_labels.reshape((-1, 1))], dim=1))
            return processed_pred








.. GENERATED FROM PYTHON SOURCE LINES 321-322

After defining the task class, we can validate it by running the following code:

.. GENERATED FROM PYTHON SOURCE LINES 322-336

.. code-block:: default


    # We have a single label here, which is the tomato class
    # The label_map is a dictionary that maps the class id to the class name, for display purposes.
    LABEL_MAP = {
        1: 'Tomato'
    }
    training_data = TomatoData(data_loader=train_loader, label_map=LABEL_MAP)
    test_data = TomatoData(data_loader=test_loader, label_map=LABEL_MAP)

    training_data.validate_format(model, device=device)
    test_data.validate_format(model, device=device)

    # And observe the output:





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Deepchecks will try to validate the extractors given...
    torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
    Structure validation
    --------------------
    Label formatter: Pass!
    Prediction formatter: Pass!
    Image formatter: Pass!

    Content validation
    ------------------
    For validating the content within the structure you have to manually observe the classes, image, label and prediction.
    Examples of classes observed in the batch's labels: [[1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1], [1]]
    Visual images & label & prediction: should open in a new window
    *******************************************************************************
    This machine does not support GUI
    The formatted image was saved in:
    /home/runner/work/deepchecks/deepchecks/docs/source/user-guide/vision/quickstarts/deepchecks_formatted_image (4).jpg
    Visual examples of an image with prediction and label data. Label is red, prediction is blue, and deepchecks loves you.
    validate_extractors can be set to skip the image saving or change the save path
    *******************************************************************************
    Deepchecks will try to validate the extractors given...
    Structure validation
    --------------------
    Label formatter: Pass!
    Prediction formatter: Pass!
    Image formatter: Pass!

    Content validation
    ------------------
    For validating the content within the structure you have to manually observe the classes, image, label and prediction.
    Examples of classes observed in the batch's labels: [[1, 1, 1, 1], [1], [1, 1, 1, 1, 1, 1, 1], [1], [1]]
    Visual images & label & prediction: should open in a new window
    *******************************************************************************
    This machine does not support GUI
    The formatted image was saved in:
    /home/runner/work/deepchecks/deepchecks/docs/source/user-guide/vision/quickstarts/deepchecks_formatted_image (5).jpg
    Visual examples of an image with prediction and label data. Label is red, prediction is blue, and deepchecks loves you.
    validate_extractors can be set to skip the image saving or change the save path
    *******************************************************************************

    True



.. GENERATED FROM PYTHON SOURCE LINES 337-341

Running Deepchecks' suite on our data and model!
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Now that we have defined the task class, we can validate the model with the deepchecks' model evaluation suite.
This can be done with this simple few lines of code:

.. GENERATED FROM PYTHON SOURCE LINES 341-347

.. code-block:: default


    from deepchecks.vision.suites import model_evaluation

    suite = model_evaluation()
    result = suite.run(training_data, test_data, model, device=device)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The ImageSegmentPerformance check is deprecated and will be removed in the 0.11 version. Please use the WeakSegmentsPerformance check instead.
    The ModelErrorAnalysis check is deprecated and will be removed in the 0.11 version. Please use the WeakSegmentsPerformance check instead.
    Validating Input:
    |     | 0/1 [Time: 00:00]    Validating Input:
    |#####| 1/1 [Time: 00:05]    Validating Input:
    |#####| 1/1 [Time: 00:05]
    Ingesting Batches - Train Dataset:
    |             | 0/13 [Time: 00:00]
    Ingesting Batches - Train Dataset:
    |#            | 1/13 [Time: 00:03]
    Ingesting Batches - Train Dataset:
    |##           | 2/13 [Time: 00:07]
    Ingesting Batches - Train Dataset:
    |###          | 3/13 [Time: 00:10]
    Ingesting Batches - Train Dataset:
    |####         | 4/13 [Time: 00:14]
    Ingesting Batches - Train Dataset:
    |#####        | 5/13 [Time: 00:18]
    Ingesting Batches - Train Dataset:
    |######       | 6/13 [Time: 00:22]
    Ingesting Batches - Train Dataset:
    |#######      | 7/13 [Time: 00:25]
    Ingesting Batches - Train Dataset:
    |########     | 8/13 [Time: 00:29]
    Ingesting Batches - Train Dataset:
    |#########    | 9/13 [Time: 00:33]
    Ingesting Batches - Train Dataset:
    |##########   | 10/13 [Time: 00:36]
    Ingesting Batches - Train Dataset:
    |###########  | 11/13 [Time: 00:40]
    Ingesting Batches - Train Dataset:
    |############ | 12/13 [Time: 00:43]
    Ingesting Batches - Train Dataset:
    |#############| 13/13 [Time: 00:45]
    Ingesting Batches - Train Dataset:
    |#############| 13/13 [Time: 00:45]

    Computing Single Dataset Checks - Train Dataset:
    |     | 0/4 [Time: 00:00]

    Computing Single Dataset Checks - Train Dataset:
    |#2   | 1/4 [Time: 00:00, Check=Mean Average Precision Report]

    Computing Single Dataset Checks - Train Dataset:
    |##5  | 2/4 [Time: 00:00, Check=Mean Average Recall Report]   

    Computing Single Dataset Checks - Train Dataset:
    |#####| 4/4 [Time: 00:05, Check=Image Segment Performance] 

    Computing Single Dataset Checks - Train Dataset:
    |#####| 4/4 [Time: 00:05, Check=Image Segment Performance]


    Ingesting Batches - Test Dataset:
    |     | 0/2 [Time: 00:00]


    Ingesting Batches - Test Dataset:
    |##5  | 1/2 [Time: 00:03]


    Ingesting Batches - Test Dataset:
    |#####| 2/2 [Time: 00:05]


    Ingesting Batches - Test Dataset:
    |#####| 2/2 [Time: 00:05]



    Computing Single Dataset Checks - Test Dataset:
    |     | 0/4 [Time: 00:00]



    Computing Single Dataset Checks - Test Dataset:
    |##5  | 2/4 [Time: 00:00, Check=Mean Average Recall Report]



    Computing Single Dataset Checks - Test Dataset:
    |#####| 4/4 [Time: 00:00, Check=Image Segment Performance] 



    Computing Single Dataset Checks - Test Dataset:
    |#####| 4/4 [Time: 00:00, Check=Image Segment Performance]




    Computing Checks:
    |     | 0/4 [Time: 00:00]




    Computing Checks:
    |     | 0/4 [Time: 00:00, Check=Class Performance]




    Computing Checks:
    |#2   | 1/4 [Time: 00:00, Check=Class Performance]




    Computing Checks:
    |#2   | 1/4 [Time: 00:00, Check=Train Test Prediction Drift]




    Computing Checks:
    |##5  | 2/4 [Time: 00:00, Check=Train Test Prediction Drift]




    Computing Checks:
    |##5  | 2/4 [Time: 00:00, Check=Simple Model Comparison]    




    Computing Checks:
    |##5  | 2/4 [Time: 00:00, Check=Model Error Analysis]   Default parameter min_samples_leaf will change in version 2.6.See https://github.com/scikit-learn-contrib/category_encoders/issues/327
    Default parameter smoothing will change in version 2.6.See https://github.com/scikit-learn-contrib/category_encoders/issues/327





    Computing Checks:
    |#####| 4/4 [Time: 00:00, Check=Model Error Analysis]




    Computing Checks:
    |#####| 4/4 [Time: 00:00, Check=Model Error Analysis]                                           
                                                                          

                                                                                                               


                                                               



                                                                                                              




                                                                           



.. GENERATED FROM PYTHON SOURCE LINES 348-353

We also have suites for:
:func:`data integrity <deepchecks.vision.suites.default_suites.data_integrity>`
- validating a single dataset and
:func:`train test validation <deepchecks.vision.suites.default_suites.train_test_validation>` -
validating the dataset split

.. GENERATED FROM PYTHON SOURCE LINES 355-360

.. _observing_the_result:

Observing the results:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The results can be saved as a html file with the following code:

.. GENERATED FROM PYTHON SOURCE LINES 360-363

.. code-block:: default


    result.save_as_html('output.html')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    'output (3).html'



.. GENERATED FROM PYTHON SOURCE LINES 364-365

Or, if working inside a notebook, the output can be displayed directly by simply printing the result object:

.. GENERATED FROM PYTHON SOURCE LINES 365-367

.. code-block:: default


    result





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <!--
        ~ ----------------------------------------------------------------------------
        ~ Copyright (C) 2021-2022 Deepchecks (https://www.deepchecks.com)
        ~
        ~ This file is part of Deepchecks.
        ~ Deepchecks is distributed under the terms of the GNU Affero General
        ~ Public License (version 3 or later).
        ~ You should have received a copy of the GNU Affero General Public License
        ~ along with Deepchecks.  If not, see <http://www.gnu.org/licenses/>.
        ~ ----------------------------------------------------------------------------
        ~
    -->
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Model Evaluation Suite</title>
        <link rel="icon" type="image/x-icon" href="https://deepchecks.com/wp-content/themes/deepchecks/assets/favicons/favicon.ico">
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
                font-size: 1rem;
                line-height: 1.5;
                color: #212529;
                text-align: left;
                max-width: 1200px;
                margin: auto;
                background-color: white;
            }

            div.nbinput.container div.prompt *,
            div.nboutput.container div.prompt *,
            div.nbinput.container div.input_area pre,
            div.nboutput.container div.output_area pre,
            div.nbinput.container div.input_area .highlight,
            div.nboutput.container div.output_area .highlight {
                border: none;
                padding: 0;
                margin: 0;
                box-shadow: none;
            }

            div.nbinput.container > div[class*=highlight],
            div.nboutput.container > div[class*=highlight] {
                margin: 0;
            }

            div.nbinput.container div.prompt *,
            div.nboutput.container div.prompt * {
                background: none;
            }

            div.nboutput.container div.output_area .highlight,
            div.nboutput.container div.output_area pre {
                background: unset;
            }

            div.nboutput.container div.output_area div.highlight {
                color: unset;  /* override Pygments text color */
            }

            /* avoid gaps between output lines */
            div.nboutput.container div[class*=highlight] pre {
                line-height: normal;
            }

            /* input/output containers */
            div.nbinput.container,
            div.nboutput.container {
                display: -webkit-flex;
                display: flex;
                align-items: flex-start;
                margin: 0;
                width: 100%;
            }
            @media (max-width: 540px) {
                div.nbinput.container,
                div.nboutput.container {
                    flex-direction: column;
                }
            }

            /* input container */
            div.nbinput.container {
                padding-top: 5px;
            }

            /* last container */
            div.nblast.container {
                padding-bottom: 5px;
            }

            /* input prompt */
            div.nbinput.container div.prompt pre {
                color: #307FC1;
            }

            /* output prompt */
            div.nboutput.container div.prompt pre {
                color: #BF5B3D;
            }

            /* all prompts */
            div.nbinput.container div.prompt,
            div.nboutput.container div.prompt {
                width: 4.5ex;
                padding-top: 5px;
                position: relative;
                user-select: none;
            }

            div.nbinput.container div.prompt > div,
            div.nboutput.container div.prompt > div {
                position: absolute;
                right: 0;
                margin-right: 0.3ex;
            }

            @media (max-width: 540px) {
                div.nbinput.container div.prompt,
                div.nboutput.container div.prompt {
                    width: unset;
                    text-align: left;
                    padding: 0.4em;
                }
                div.nboutput.container div.prompt.empty {
                    padding: 0;
                }

                div.nbinput.container div.prompt > div,
                div.nboutput.container div.prompt > div {
                    position: unset;
                }
            }

            /* disable scrollbars on prompts */
            div.nbinput.container div.prompt pre,
            div.nboutput.container div.prompt pre {
                overflow: hidden;
            }

            /* input/output area */
            div.nbinput.container div.input_area,
            div.nboutput.container div.output_area {
                -webkit-flex: 1;
                flex: 1;
                overflow: auto;
            }
            @media (max-width: 540px) {
                div.nbinput.container div.input_area,
                div.nboutput.container div.output_area {
                    width: 100%;
                }
            }

            /* input area */
            div.nbinput.container div.input_area {
                border: 1px solid #e0e0e0;
                border-radius: 2px;
                /*background: #f5f5f5;*/
            }

            /* override MathJax center alignment in output cells */
            div.nboutput.container div[class*=MathJax] {
                text-align: left !important;
            }

            /* override sphinx.ext.imgmath center alignment in output cells */
            div.nboutput.container div.math p {
                text-align: left;
            }

            /* standard error */
            div.nboutput.container div.output_area.stderr {
                background: #fdd;
            }

            /* ANSI colors */
            .ansi-black-fg { color: #3E424D; }
            .ansi-black-bg { background-color: #3E424D; }
            .ansi-black-intense-fg { color: #282C36; }
            .ansi-black-intense-bg { background-color: #282C36; }
            .ansi-red-fg { color: #E75C58; }
            .ansi-red-bg { background-color: #E75C58; }
            .ansi-red-intense-fg { color: #B22B31; }
            .ansi-red-intense-bg { background-color: #B22B31; }
            .ansi-green-fg { color: #00A250; }
            .ansi-green-bg { background-color: #00A250; }
            .ansi-green-intense-fg { color: #007427; }
            .ansi-green-intense-bg { background-color: #007427; }
            .ansi-yellow-fg { color: #DDB62B; }
            .ansi-yellow-bg { background-color: #DDB62B; }
            .ansi-yellow-intense-fg { color: #B27D12; }
            .ansi-yellow-intense-bg { background-color: #B27D12; }
            .ansi-blue-fg { color: #208FFB; }
            .ansi-blue-bg { background-color: #208FFB; }
            .ansi-blue-intense-fg { color: #0065CA; }
            .ansi-blue-intense-bg { background-color: #0065CA; }
            .ansi-magenta-fg { color: #D160C4; }
            .ansi-magenta-bg { background-color: #D160C4; }
            .ansi-magenta-intense-fg { color: #A03196; }
            .ansi-magenta-intense-bg { background-color: #A03196; }
            .ansi-cyan-fg { color: #60C6C8; }
            .ansi-cyan-bg { background-color: #60C6C8; }
            .ansi-cyan-intense-fg { color: #258F8F; }
            .ansi-cyan-intense-bg { background-color: #258F8F; }
            .ansi-white-fg { color: #C5C1B4; }
            .ansi-white-bg { background-color: #C5C1B4; }
            .ansi-white-intense-fg { color: #A1A6B2; }
            .ansi-white-intense-bg { background-color: #A1A6B2; }

            .ansi-default-inverse-fg { color: #FFFFFF; }
            .ansi-default-inverse-bg { background-color: #000000; }

            .ansi-bold { font-weight: bold; }
            .ansi-underline { text-decoration: underline; }


            div.nbinput.container div.input_area div[class*=highlight] > pre,
            div.nboutput.container div.output_area div[class*=highlight] > pre,
            div.nboutput.container div.output_area div[class*=highlight].math,
            div.nboutput.container div.output_area.rendered_html,
            div.nboutput.container div.output_area > div.output_javascript,
            div.nboutput.container div.output_area:not(.rendered_html) > img{
                padding: 5px;
                margin: 0;
            }

            /* fix copybtn overflow problem in chromium (needed for 'sphinx_copybutton') */
            div.nbinput.container div.input_area > div[class^='highlight'],
            div.nboutput.container div.output_area > div[class^='highlight']{
                overflow-y: hidden;
            }

            /* hide copybtn icon on prompts (needed for 'sphinx_copybutton') */
            .prompt .copybtn {
                display: none;
            }

            /* Some additional styling taken form the Jupyter notebook CSS */
            div.rendered_html table {
            border: none;
            border-collapse: collapse;
            border-spacing: 0;
            color: black;
            font-size: 12px;
            table-layout: fixed;
            }
            div.rendered_html thead {
            border-bottom: 1px solid black;
            vertical-align: bottom;
            }
            div.rendered_html tr,
            div.rendered_html th,
            div.rendered_html td {
            text-align: right;
            vertical-align: middle;
            padding: 0.5em 0.5em;
            line-height: normal;
            white-space: normal;
            max-width: none;
            border: none;
            }
            div.rendered_html th {
            font-weight: bold;
            }
            div.rendered_html tbody tr:nth-child(odd) {
            background: #f5f5f5;
            }
            div.rendered_html tbody tr:hover {
            background: rgba(66, 165, 245, 0.2);
            }
        </style>
    </head>
    <body>
        <script src="https://unpkg.com/@jupyter-widgets/html-manager@^0.20.1/dist/embed.js" crossorigin="anonymous"></script>
    

    <script type="application/vnd.jupyter.widget-state+json">
    {"version_major": 2, "version_minor": 0, "state": {"f1723ff20be5431d823116366989063b": {"model_name": "AccordionModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "_titles": {"0": "Model Evaluation Suite"}, "children": ["IPY_MODEL_161eb294426842d39018c0eda01d324e"], "layout": "IPY_MODEL_002a2a83f1ed43a28ec9b7661d71b37a"}}, "161eb294426842d39018c0eda01d324e": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_d88071d6406747e69426c87b13d3fb57", "IPY_MODEL_1513a05c8d034888b69c6417f68826d0", "IPY_MODEL_7363c18a97f54a69a00e5d66af809746", "IPY_MODEL_4f693f4d8d344bcf81b6e8350428a36c", "IPY_MODEL_eef7c39fa4154017b00aa4ae8715eceb"], "layout": "IPY_MODEL_29845e447fd948e3886f28ddb60afc66"}}, "d88071d6406747e69426c87b13d3fb57": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_3831aff7caa24412a12135d22efbdbb8", "style": "IPY_MODEL_b605fe53988f4bf8ba52f24af6b59dc0", "value": "\n            <h1 id=\"summary_UH17J8QO09VS9KKH4A3YJTU7F\">Model Evaluation Suite</h1>\n            <p>\n                The suite is composed of various checks such as: Confusion Matrix Report, Mean Average Recall Report, Simple Model Comparison, etc...<br>\n                Each check may contain conditions (which will result in pass / fail / warning / error\n                , represented by \n<span style=\"color: green;display:inline-block\">\u2713</span> /\n<span style=\"color: red;display:inline-block\">\u2716</span> /\n<span style=\"color: orange;font-weight:bold;display:inline-block\">!</span> /\n<span style=\"color: firebrick;font-weight:bold;display:inline-block\">\u2048</span>\n) as well as other outputs such as plots or tables.<br>\n                Suites, checks and conditions can all be modified. Read more about\n                <a href=https://docs.deepchecks.com/en/stable/examples/guides/create_a_custom_suite.html?utm_source=display_output&utm_medium=referral&utm_campaign=suite_link target=\"_blank\">custom suites</a>.\n            </p>\n\n"}}, "3831aff7caa24412a12135d22efbdbb8": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "b605fe53988f4bf8ba52f24af6b59dc0": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "1513a05c8d034888b69c6417f68826d0": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_79bcc8fe60ba41d7bbd8076585039fa4", "IPY_MODEL_ef4af3111b8148839ed0029d3a199f0e"], "layout": "IPY_MODEL_e2e2c8b418d147a5a593437d61383d92"}}, "79bcc8fe60ba41d7bbd8076585039fa4": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_f7849750c25243d19794bfb9901ed2ce", "style": "IPY_MODEL_5712bd17c0ce4b199bb483a33b941141", "value": "<span id=\"summary_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\"></span>"}}, "f7849750c25243d19794bfb9901ed2ce": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "5712bd17c0ce4b199bb483a33b941141": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "ef4af3111b8148839ed0029d3a199f0e": {"model_name": "AccordionModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "_titles": {"0": "Didn't Pass"}, "children": ["IPY_MODEL_818e95cc149346c1ae24d376c4503445"], "layout": "IPY_MODEL_0829680f946d413aa3cc23ccb1330ae0", "selected_index": null}}, "818e95cc149346c1ae24d376c4503445": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_bf24d856f771473dbaa0d750cc672e8c", "IPY_MODEL_0c06bc6429774cc9b6460a6a698ff779", "IPY_MODEL_1d7ec09c5bb74e4aae9d698c631aaeab", "IPY_MODEL_4cfd6cd056f142498aabb03f1cc8c97d", "IPY_MODEL_82d0c2f1ec28403ba9987704f1b0d1e0", "IPY_MODEL_4cfd6cd056f142498aabb03f1cc8c97d", "IPY_MODEL_da8398cb87c04c5794eac0b9d0de7b53", "IPY_MODEL_4cfd6cd056f142498aabb03f1cc8c97d", "IPY_MODEL_333bc397b3ef4f99be63882d05f1416a", "IPY_MODEL_4cfd6cd056f142498aabb03f1cc8c97d", "IPY_MODEL_a4cdaa8e0501493ca0531a29287cb376"], "layout": "IPY_MODEL_2aebc72124094eabba0ef20e5639fd91"}}, "bf24d856f771473dbaa0d750cc672e8c": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_dcab174afe304bb0af4b69ebbb92cf0b", "style": "IPY_MODEL_d299cb31b7a74ffeb0f557ebc120c2ea", "value": "<style type=\"text/css\">\n#T_cda98_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_cda98_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_cda98_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_cda98_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_cda98_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_cda98_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Status</th>\n      <th class=\"col_heading level0 col1\" >Check</th>\n      <th class=\"col_heading level0 col2\" >Condition</th>\n      <th class=\"col_heading level0 col3\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_cda98_row0_col0\" class=\"data row0 col0\" ><div style=\"color: red;text-align: center\">\u2716</div></td>\n      <td id=\"T_cda98_row0_col1\" class=\"data row0 col1\" ><a href=\"#ClassPerformance_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\">Class Performance</a></td>\n      <td id=\"T_cda98_row0_col2\" class=\"data row0 col2\" >Train-Test scores relative degradation is less than 0.1</td>\n      <td id=\"T_cda98_row0_col3\" class=\"data row0 col3\" >2 scores failed. Found max degradation of 49.42% for metric Average Precision and class Tomato.</td>\n    </tr>\n    <tr>\n      <td id=\"T_cda98_row1_col0\" class=\"data row1 col0\" ><div style=\"color: red;text-align: center\">\u2716</div></td>\n      <td id=\"T_cda98_row1_col1\" class=\"data row1 col1\" ><a href=\"#MeanAveragePrecisionReport-TestDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\">Mean Average Precision Report - Test Dataset</a></td>\n      <td id=\"T_cda98_row1_col2\" class=\"data row1 col2\" >mAP score is greater than 0.3</td>\n      <td id=\"T_cda98_row1_col3\" class=\"data row1 col3\" >mAP score is: 0.01</td>\n    </tr>\n    <tr>\n      <td id=\"T_cda98_row2_col0\" class=\"data row2 col0\" ><div style=\"color: red;text-align: center\">\u2716</div></td>\n      <td id=\"T_cda98_row2_col1\" class=\"data row2 col1\" ><a href=\"#MeanAveragePrecisionReport-TrainDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\">Mean Average Precision Report - Train Dataset</a></td>\n      <td id=\"T_cda98_row2_col2\" class=\"data row2 col2\" >mAP score is greater than 0.3</td>\n      <td id=\"T_cda98_row2_col3\" class=\"data row2 col3\" >mAP score is: 0.03</td>\n    </tr>\n    <tr>\n      <td id=\"T_cda98_row3_col0\" class=\"data row3 col0\" ><div style=\"color: red;text-align: center\">\u2716</div></td>\n      <td id=\"T_cda98_row3_col1\" class=\"data row3 col1\" ><a href=\"#ImageSegmentPerformance-TestDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\">Image Segment Performance - Test Dataset</a></td>\n      <td id=\"T_cda98_row3_col2\" class=\"data row3 col2\" >Segment's ratio between score to mean is greater than 80%</td>\n      <td id=\"T_cda98_row3_col3\" class=\"data row3 col3\" >Properties with failed segments: Brightness: {'Range': '(-inf, 0.33)', 'Metric': 'Average Precision', 'Ratio': 0.11}, Mean Blue Relative Intensity: {'Range': '[0.2, 0.23)', 'Metric': 'Average Precision', 'Ratio': 0.29}, Mean Green Relative Intensity: {'Range': '[0.41, 0.45)', 'Metric': 'Average Reca...</td>\n    </tr>\n    <tr>\n      <td id=\"T_cda98_row4_col0\" class=\"data row4 col0\" ><div style=\"color: red;text-align: center\">\u2716</div></td>\n      <td id=\"T_cda98_row4_col1\" class=\"data row4 col1\" ><a href=\"#ImageSegmentPerformance-TrainDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\">Image Segment Performance - Train Dataset</a></td>\n      <td id=\"T_cda98_row4_col2\" class=\"data row4 col2\" >Segment's ratio between score to mean is greater than 80%</td>\n      <td id=\"T_cda98_row4_col3\" class=\"data row4 col3\" >Properties with failed segments: Brightness: {'Range': '[0.32, 0.38)', 'Metric': 'Average Recall', 'Ratio': 0.53}, Mean Blue Relative Intensity: {'Range': '(-inf, 0.2)', 'Metric': 'Average Recall', 'Ratio': 0.68}, Mean Green Relative Intensity: {'Range': '[0.45, 0.48)', 'Metric': 'Average Precision'...</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "dcab174afe304bb0af4b69ebbb92cf0b": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "d299cb31b7a74ffeb0f557ebc120c2ea": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "0c06bc6429774cc9b6460a6a698ff779": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_30610725d2d74952ad6837285fe447aa", "style": "IPY_MODEL_4b92368121b44809888aa0645fc51fbb", "value": "<hr style=\"background-color: #eee;border: 0 none;color: #eee;height: 4px;\">"}}, "30610725d2d74952ad6837285fe447aa": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "4b92368121b44809888aa0645fc51fbb": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "1d7ec09c5bb74e4aae9d698c631aaeab": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "children": ["IPY_MODEL_813ffc5eeaec4b4e98c5b971ee993a5e", "IPY_MODEL_bb96235b3af1430d86c26d36d1c16576", "IPY_MODEL_da4a550aad29400e9c44d7195c00abe8", "IPY_MODEL_1074548bd45141b29b51b25de2fb64d2"], "layout": "IPY_MODEL_882f6d67c0b8461d8450ddcb00b540ca"}}, "813ffc5eeaec4b4e98c5b971ee993a5e": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_11371179d5d54dc5a3a4243c9a8f724a", "style": "IPY_MODEL_7bcfa355b1fe436fad21cdf66421d172", "value": "<h4 id=\"ClassPerformance_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\"><b>Class Performance</b></h4>"}}, "11371179d5d54dc5a3a4243c9a8f724a": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "7bcfa355b1fe436fad21cdf66421d172": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "bb96235b3af1430d86c26d36d1c16576": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_c4eab41543034424b40d7cd13060d741", "style": "IPY_MODEL_f3e3c4a0151544829a0fcc7398685ed8", "value": "<p>Summarize given metrics on a dataset and model. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_class_performance.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"}}, "c4eab41543034424b40d7cd13060d741": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "f3e3c4a0151544829a0fcc7398685ed8": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "da4a550aad29400e9c44d7195c00abe8": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_97b6731b8c7c4baa85d2fb02f9bc0435", "style": "IPY_MODEL_1afd7a536faf4f6b83dbcf37b5882840", "value": "<h5><b>Conditions Summary</b></h5><style type=\"text/css\">\n#T_b8701_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_b8701_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_b8701_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_b8701_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_b8701_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_b8701_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Status</th>\n      <th class=\"col_heading level0 col1\" >Condition</th>\n      <th class=\"col_heading level0 col2\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_b8701_row0_col0\" class=\"data row0 col0\" ><div style=\"color: red;text-align: center\">\u2716</div></td>\n      <td id=\"T_b8701_row0_col1\" class=\"data row0 col1\" >Train-Test scores relative degradation is less than 0.1</td>\n      <td id=\"T_b8701_row0_col2\" class=\"data row0 col2\" >2 scores failed. Found max degradation of 49.42% for metric Average Precision and class Tomato.</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "97b6731b8c7c4baa85d2fb02f9bc0435": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "1afd7a536faf4f6b83dbcf37b5882840": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "1074548bd45141b29b51b25de2fb64d2": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_cf2ddb7c04e24c3d977981a00d3b3f34", "IPY_MODEL_1cb9f7e8692d49cca6081df9ab0d828c", "IPY_MODEL_6463ced30d4b4406a484ec0698fc9684"], "layout": "IPY_MODEL_bdb709c430854a668750dfc78a0d9c6c"}}, "cf2ddb7c04e24c3d977981a00d3b3f34": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_bff3ef104d494e5286285e468c595105", "style": "IPY_MODEL_f3b1463880734f8dad7eac4f275af157", "value": "<h5><b>Additional Outputs</b></h5>"}}, "bff3ef104d494e5286285e468c595105": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "f3b1463880734f8dad7eac4f275af157": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "1cb9f7e8692d49cca6081df9ab0d828c": {"model_name": "FigureModel", "model_module": "jupyterlab-plotly", "model_module_version": "^5.11.0", "state": {"_config": {"plotlyServerURL": "https://plot.ly"}, "_data": [{"alignmentgroup": "True", "bingroup": "x", "histfunc": "sum", "hovertemplate": "Dataset=Train<br>Metric=Average Recall<br>Class Name=%{x}<br>sum of Value=%{y}<extra></extra>", "legendgroup": "Train", "marker": {"color": "#00008b", "pattern": {"shape": ""}}, "name": "Train", "offsetgroup": "Train", "orientation": "v", "showlegend": true, "x": ["Tomato"], "xaxis": "x", "y": {"dtype": "float64", "shape": [1]}, "yaxis": "y", "type": "histogram", "uid": "65dce4dc-cd2f-495b-a5e1-afecc4c9523d"}, {"alignmentgroup": "True", "bingroup": "x", "histfunc": "sum", "hovertemplate": "Dataset=Train<br>Metric=Average Precision<br>Class Name=%{x}<br>sum of Value=%{y}<extra></extra>", "legendgroup": "Train", "marker": {"color": "#00008b", "pattern": {"shape": ""}}, "name": "Train", "offsetgroup": "Train", "orientation": "v", "showlegend": false, "x": ["Tomato"], "xaxis": "x2", "y": {"dtype": "float64", "shape": [1]}, "yaxis": "y2", "type": "histogram", "uid": "66707e5e-1866-4823-bcb9-98859cd4a974"}, {"alignmentgroup": "True", "bingroup": "x", "histfunc": "sum", "hovertemplate": "Dataset=Test<br>Metric=Average Recall<br>Class Name=%{x}<br>sum of Value=%{y}<extra></extra>", "legendgroup": "Test", "marker": {"color": "#69b3a2", "pattern": {"shape": ""}}, "name": "Test", "offsetgroup": "Test", "orientation": "v", "showlegend": true, "x": ["Tomato"], "xaxis": "x", "y": {"dtype": "float64", "shape": [1]}, "yaxis": "y", "type": "histogram", "uid": "3a9dab5a-88c5-4355-a343-779421a4f94a"}, {"alignmentgroup": "True", "bingroup": "x", "histfunc": "sum", "hovertemplate": "Dataset=Test<br>Metric=Average Precision<br>Class Name=%{x}<br>sum of Value=%{y}<extra></extra>", "legendgroup": "Test", "marker": {"color": "#69b3a2", "pattern": {"shape": ""}}, "name": "Test", "offsetgroup": "Test", "orientation": "v", "showlegend": false, "x": ["Tomato"], "xaxis": "x2", "y": {"dtype": "float64", "shape": [1]}, "yaxis": "y2", "type": "histogram", "uid": "eb44c7cf-4ff6-4cfa-aff9-2385f5b3e422"}], "_dom_classes": [], "_js2py_layoutDelta": {}, "_js2py_pointsCallback": {}, "_js2py_relayout": {}, "_js2py_restyle": {}, "_js2py_traceDeltas": {}, "_js2py_update": {}, "_layout": {"annotations": [{"showarrow": false, "text": "Average Recall", "x": 0.2375, "xanchor": "center", "xref": "paper", "y": 1.0, "yanchor": "bottom", "yref": "paper"}, {"showarrow": false, "text": "Average Precision", "x": 0.7625, "xanchor": "center", "xref": "paper", "y": 1.0, "yanchor": "bottom", "yref": "paper"}], "barmode": "group", "legend": {"title": {"text": "Dataset"}, "tracegroupgap": 0}, "margin": {"t": 60}, "template": {"data": {"barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "barpolar"}], "bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "bar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram": [{"marker": {"pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "histogram"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatter": [{"fillpattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}, "type": "scatter"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "xaxis": {"anchor": "y", "domain": [0.0, 0.475], "title": {"text": "Class"}, "type": "category"}, "yaxis": {"anchor": "x", "domain": [0.0, 1.0], "showticklabels": true, "title": {"text": "Value"}}, "xaxis2": {"anchor": "y2", "domain": [0.525, 1.0], "matches": "x", "title": {"text": "Class"}, "type": "category"}, "yaxis2": {"anchor": "x2", "domain": [0.0, 1.0], "showticklabels": true, "title": {"text": "Value"}}}, "_py2js_addTraces": {}, "_py2js_animate": {}, "_py2js_deleteTraces": {}, "_py2js_moveTraces": {}, "_py2js_relayout": {}, "_py2js_removeLayoutProps": {}, "_py2js_removeTraceProps": {}, "_py2js_restyle": {}, "_py2js_update": {}, "_view_count": 0}, "buffers": [{"encoding": "base64", "path": ["_data", 0, "y", "buffer"], "data": "a7nPcI9Srz8="}, {"encoding": "base64", "path": ["_data", 1, "y", "buffer"], "data": "Nr3odJkgnT8="}, {"encoding": "base64", "path": ["_data", 2, "y", "buffer"], "data": "gaoocvZKpj8="}, {"encoding": "base64", "path": ["_data", 3, "y", "buffer"], "data": "XTbPw752jT8="}]}, "6463ced30d4b4406a484ec0698fc9684": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_cd2e4040e7684b569b81591e7b8a56e6", "style": "IPY_MODEL_d84f4a5827a948a2b96244d7bab209d5", "value": "<br><a href=\"#summary_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\" style=\"font-size: 14px;\">Go to top</a>"}}, "cd2e4040e7684b569b81591e7b8a56e6": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "d84f4a5827a948a2b96244d7bab209d5": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "bdb709c430854a668750dfc78a0d9c6c": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "882f6d67c0b8461d8450ddcb00b540ca": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "4cfd6cd056f142498aabb03f1cc8c97d": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_03964f60fefc4acaa9f4ed92a6db4b20", "style": "IPY_MODEL_0e506640be5b458a865e6034624c56bf", "value": "<hr style=\"background-color: #eee;border: 0 none;color: #eee;height: 4px;\">"}}, "03964f60fefc4acaa9f4ed92a6db4b20": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "0e506640be5b458a865e6034624c56bf": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "82d0c2f1ec28403ba9987704f1b0d1e0": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "children": ["IPY_MODEL_78a26eb29a3b4291a19ae231335319e1", "IPY_MODEL_965ccfad04a24b9eaedc6ac26e49aa35", "IPY_MODEL_87e9ad1f85b04294aacf1c9383549ec0", "IPY_MODEL_1b9a368d1bac45a6aaa571885e57cc31"], "layout": "IPY_MODEL_c53f23b005544674b7280728fc7eb5ef"}}, "78a26eb29a3b4291a19ae231335319e1": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_7ae3bf8036fe45c5ad524997ba6edb4c", "style": "IPY_MODEL_384c4e64dbbb4510b8f01153476879bf", "value": "<h4 id=\"MeanAveragePrecisionReport-TestDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\"><b>Mean Average Precision Report - Test Dataset</b></h4>"}}, "7ae3bf8036fe45c5ad524997ba6edb4c": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "384c4e64dbbb4510b8f01153476879bf": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "965ccfad04a24b9eaedc6ac26e49aa35": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_df03b090a030448d855dadb1cf820c53", "style": "IPY_MODEL_c965d5ab11f74dd18c611f7883da3c35", "value": "<p>Summarize mean average precision metrics on a dataset and model per IoU and bounding box area. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_mean_average_precision_report.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"}}, "df03b090a030448d855dadb1cf820c53": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "c965d5ab11f74dd18c611f7883da3c35": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "87e9ad1f85b04294aacf1c9383549ec0": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_3931b262eecd4b1996cb9f9d3131520c", "style": "IPY_MODEL_103fb68aa8ae4d95873c91dfeb06b671", "value": "<h5><b>Conditions Summary</b></h5><style type=\"text/css\">\n#T_577ee_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_577ee_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_577ee_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_577ee_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_577ee_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_577ee_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Status</th>\n      <th class=\"col_heading level0 col1\" >Condition</th>\n      <th class=\"col_heading level0 col2\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_577ee_row0_col0\" class=\"data row0 col0\" ><div style=\"color: red;text-align: center\">\u2716</div></td>\n      <td id=\"T_577ee_row0_col1\" class=\"data row0 col1\" >mAP score is greater than 0.3</td>\n      <td id=\"T_577ee_row0_col2\" class=\"data row0 col2\" >mAP score is: 0.01</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "3931b262eecd4b1996cb9f9d3131520c": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "103fb68aa8ae4d95873c91dfeb06b671": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "1b9a368d1bac45a6aaa571885e57cc31": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_1d7bb9ec5766485e8daf4fdf2761db26", "IPY_MODEL_59327cbb5fe449329c59f2bfb6b884b6", "IPY_MODEL_42ecbfece92946a4b1b6fa40a9c42c61", "IPY_MODEL_9325e4b5e2b749d49016044d6aca3ff9"], "layout": "IPY_MODEL_6bd71d8bda934986b43b4052ff95851f"}}, "1d7bb9ec5766485e8daf4fdf2761db26": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_ed412e3461b44f3291c0b1ee168653f5", "style": "IPY_MODEL_15cef3969aa341ec9dd6f1b716f11681", "value": "<h5><b>Additional Outputs</b></h5>"}}, "ed412e3461b44f3291c0b1ee168653f5": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "15cef3969aa341ec9dd6f1b716f11681": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "59327cbb5fe449329c59f2bfb6b884b6": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_15e36b36041c4c77974081b8257b2724", "style": "IPY_MODEL_0a9b0bc45a37427aa4a4510298c9ee71", "value": "<style type=\"text/css\">\n#T_3f381_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_3f381_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_3f381_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_3f381_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_3f381_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_3f381_\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th class=\"col_heading level0 col0\" >mAP@[.50::.95] (avg.%)</th>\n      <th class=\"col_heading level0 col1\" >mAP@.50 (%)</th>\n      <th class=\"col_heading level0 col2\" >mAP@.75 (%)</th>\n    </tr>\n    <tr>\n      <th class=\"index_name level0\" >Area size</th>\n      <th class=\"blank col0\" >&nbsp;</th>\n      <th class=\"blank col1\" >&nbsp;</th>\n      <th class=\"blank col2\" >&nbsp;</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_3f381_level0_row0\" class=\"row_heading level0 row0\" >All</th>\n      <td id=\"T_3f381_row0_col0\" class=\"data row0 col0\" >0.01</td>\n      <td id=\"T_3f381_row0_col1\" class=\"data row0 col1\" >0.05</td>\n      <td id=\"T_3f381_row0_col2\" class=\"data row0 col2\" >0.01</td>\n    </tr>\n    <tr>\n      <th id=\"T_3f381_level0_row1\" class=\"row_heading level0 row1\" >Small (area < 32^2)</th>\n      <td id=\"T_3f381_row1_col0\" class=\"data row1 col0\" >0.00</td>\n      <td id=\"T_3f381_row1_col1\" class=\"data row1 col1\" >0.01</td>\n      <td id=\"T_3f381_row1_col2\" class=\"data row1 col2\" >0.00</td>\n    </tr>\n    <tr>\n      <th id=\"T_3f381_level0_row2\" class=\"row_heading level0 row2\" >Medium (32^2 < area < 96^2)</th>\n      <td id=\"T_3f381_row2_col0\" class=\"data row2 col0\" >0.06</td>\n      <td id=\"T_3f381_row2_col1\" class=\"data row2 col1\" >0.20</td>\n      <td id=\"T_3f381_row2_col2\" class=\"data row2 col2\" >0.02</td>\n    </tr>\n    <tr>\n      <th id=\"T_3f381_level0_row3\" class=\"row_heading level0 row3\" >Large (area < 96^2)</th>\n      <td id=\"T_3f381_row3_col0\" class=\"data row3 col0\" >0.00</td>\n      <td id=\"T_3f381_row3_col1\" class=\"data row3 col1\" >0.00</td>\n      <td id=\"T_3f381_row3_col2\" class=\"data row3 col2\" >0.00</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "15e36b36041c4c77974081b8257b2724": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "0a9b0bc45a37427aa4a4510298c9ee71": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "42ecbfece92946a4b1b6fa40a9c42c61": {"model_name": "FigureModel", "model_module": "jupyterlab-plotly", "model_module_version": "^5.11.0", "state": {"_config": {"plotlyServerURL": "https://plot.ly"}, "_data": [{"hovertemplate": "IoU threshold=%{x}<br>mAP (%)=%{y}<extra></extra>", "legendgroup": "", "line": {"color": "#636efa", "dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines", "name": "", "orientation": "v", "showlegend": false, "x": {"dtype": "float64", "shape": [10]}, "xaxis": "x", "y": {"dtype": "float64", "shape": [10]}, "yaxis": "y", "type": "scatter", "uid": "099f4995-83c6-4f08-a320-415fa367a78d"}], "_dom_classes": [], "_js2py_layoutDelta": {}, "_js2py_pointsCallback": {}, "_js2py_relayout": {}, "_js2py_restyle": {}, "_js2py_traceDeltas": {}, "_js2py_update": {}, "_layout": {"legend": {"tracegroupgap": 0}, "template": {"data": {"barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "barpolar"}], "bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "bar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram": [{"marker": {"pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "histogram"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatter": [{"fillpattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}, "type": "scatter"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "title": {"text": "Mean Average Precision over increasing IoU thresholds"}, "xaxis": {"anchor": "y", "domain": [0.0, 1.0], "title": {"text": "IoU threshold"}}, "yaxis": {"anchor": "x", "domain": [0.0, 1.0], "title": {"text": "mAP (%)"}}}, "_py2js_addTraces": {}, "_py2js_animate": {}, "_py2js_deleteTraces": {}, "_py2js_moveTraces": {}, "_py2js_relayout": {}, "_py2js_removeLayoutProps": {}, "_py2js_removeTraceProps": {}, "_py2js_restyle": {}, "_py2js_update": {}, "_view_count": 0}, "buffers": [{"encoding": "base64", "path": ["_data", 0, "x", "buffer"], "data": "AAAAAAAA4D+amZmZmZnhPzMzMzMzM+M/zczMzMzM5D9mZmZmZmbmPwAAAAAAAOg/mpmZmZmZ6T8zMzMzMzPrP8zMzMzMzOw/ZmZmZmZm7j8="}, {"encoding": "base64", "path": ["_data", 0, "y", "buffer"], "data": "BgvmbtEZqz+QrX77JeSgPw/SHG8RMZg/FzPxFFFKkD+d5TgXdvSFP90AvT0pBnc/cGmN5aPcWj+g9wM0ODY8PwAAAAAAAAAAAAAAAAAAAAA="}]}, "9325e4b5e2b749d49016044d6aca3ff9": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_bf572afb2a75497b9cc7dfc3f42501c3", "style": "IPY_MODEL_44e6617ee500469e9540e05dbd0ea9e8", "value": "<br><a href=\"#summary_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\" style=\"font-size: 14px;\">Go to top</a>"}}, "bf572afb2a75497b9cc7dfc3f42501c3": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "44e6617ee500469e9540e05dbd0ea9e8": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "6bd71d8bda934986b43b4052ff95851f": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "c53f23b005544674b7280728fc7eb5ef": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "da8398cb87c04c5794eac0b9d0de7b53": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "children": ["IPY_MODEL_faa665e7bfd146c7a15945f0744f8c46", "IPY_MODEL_46b05d30e37442efa1e93a73b2afc281", "IPY_MODEL_4014c78369e44640a5ed95fac3eb51d6", "IPY_MODEL_8bd27a67fd0e4be8b0518495bb895ac8"], "layout": "IPY_MODEL_00a8ee3cbcb1489e81b4489957044495"}}, "faa665e7bfd146c7a15945f0744f8c46": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_0b17fd7a64644c719490ecadc13e9f96", "style": "IPY_MODEL_b8f36de902ff49739d60bc80f8209394", "value": "<h4 id=\"MeanAveragePrecisionReport-TrainDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\"><b>Mean Average Precision Report - Train Dataset</b></h4>"}}, "0b17fd7a64644c719490ecadc13e9f96": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "b8f36de902ff49739d60bc80f8209394": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "46b05d30e37442efa1e93a73b2afc281": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_556a3dc5f01a448d9e03f8219c94a74b", "style": "IPY_MODEL_f1770ccccc8e488d969de1762b704b22", "value": "<p>Summarize mean average precision metrics on a dataset and model per IoU and bounding box area. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_mean_average_precision_report.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"}}, "556a3dc5f01a448d9e03f8219c94a74b": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "f1770ccccc8e488d969de1762b704b22": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "4014c78369e44640a5ed95fac3eb51d6": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_f29f4f476689422bb370d7f4bda71f0c", "style": "IPY_MODEL_7e885bec4bcc40a597c9ed6bebd64393", "value": "<h5><b>Conditions Summary</b></h5><style type=\"text/css\">\n#T_d4193_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_d4193_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_d4193_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_d4193_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_d4193_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_d4193_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Status</th>\n      <th class=\"col_heading level0 col1\" >Condition</th>\n      <th class=\"col_heading level0 col2\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_d4193_row0_col0\" class=\"data row0 col0\" ><div style=\"color: red;text-align: center\">\u2716</div></td>\n      <td id=\"T_d4193_row0_col1\" class=\"data row0 col1\" >mAP score is greater than 0.3</td>\n      <td id=\"T_d4193_row0_col2\" class=\"data row0 col2\" >mAP score is: 0.03</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "f29f4f476689422bb370d7f4bda71f0c": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "7e885bec4bcc40a597c9ed6bebd64393": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "8bd27a67fd0e4be8b0518495bb895ac8": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_740b612739f947ba94d85a1a89c8cb0c", "IPY_MODEL_e2d9fe4a662042c8aac204c37fad8955", "IPY_MODEL_4165058cbcd0441daf1eff4ace5d87d1", "IPY_MODEL_c5d29582195749769d55d043f55f87af"], "layout": "IPY_MODEL_acb0eb82eee840d0a95a40fb25bb622b"}}, "740b612739f947ba94d85a1a89c8cb0c": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_0ebc1160bf634cf7819325fcfcf83180", "style": "IPY_MODEL_9887e0b4dd1c45eca2c83f1ebbe21cb3", "value": "<h5><b>Additional Outputs</b></h5>"}}, "0ebc1160bf634cf7819325fcfcf83180": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "9887e0b4dd1c45eca2c83f1ebbe21cb3": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "e2d9fe4a662042c8aac204c37fad8955": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_9a4434f287cc41bbb7de1d11d4f188a9", "style": "IPY_MODEL_6db358bef96740a6bd7a566974da766f", "value": "<style type=\"text/css\">\n#T_d145f_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_d145f_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_d145f_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_d145f_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_d145f_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_d145f_\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th class=\"col_heading level0 col0\" >mAP@[.50::.95] (avg.%)</th>\n      <th class=\"col_heading level0 col1\" >mAP@.50 (%)</th>\n      <th class=\"col_heading level0 col2\" >mAP@.75 (%)</th>\n    </tr>\n    <tr>\n      <th class=\"index_name level0\" >Area size</th>\n      <th class=\"blank col0\" >&nbsp;</th>\n      <th class=\"blank col1\" >&nbsp;</th>\n      <th class=\"blank col2\" >&nbsp;</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_d145f_level0_row0\" class=\"row_heading level0 row0\" >All</th>\n      <td id=\"T_d145f_row0_col0\" class=\"data row0 col0\" >0.03</td>\n      <td id=\"T_d145f_row0_col1\" class=\"data row0 col1\" >0.07</td>\n      <td id=\"T_d145f_row0_col2\" class=\"data row0 col2\" >0.02</td>\n    </tr>\n    <tr>\n      <th id=\"T_d145f_level0_row1\" class=\"row_heading level0 row1\" >Small (area < 32^2)</th>\n      <td id=\"T_d145f_row1_col0\" class=\"data row1 col0\" >0.00</td>\n      <td id=\"T_d145f_row1_col1\" class=\"data row1 col1\" >0.00</td>\n      <td id=\"T_d145f_row1_col2\" class=\"data row1 col2\" >0.00</td>\n    </tr>\n    <tr>\n      <th id=\"T_d145f_level0_row2\" class=\"row_heading level0 row2\" >Medium (32^2 < area < 96^2)</th>\n      <td id=\"T_d145f_row2_col0\" class=\"data row2 col0\" >0.10</td>\n      <td id=\"T_d145f_row2_col1\" class=\"data row2 col1\" >0.27</td>\n      <td id=\"T_d145f_row2_col2\" class=\"data row2 col2\" >0.06</td>\n    </tr>\n    <tr>\n      <th id=\"T_d145f_level0_row3\" class=\"row_heading level0 row3\" >Large (area < 96^2)</th>\n      <td id=\"T_d145f_row3_col0\" class=\"data row3 col0\" >0.02</td>\n      <td id=\"T_d145f_row3_col1\" class=\"data row3 col1\" >0.04</td>\n      <td id=\"T_d145f_row3_col2\" class=\"data row3 col2\" >0.02</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "9a4434f287cc41bbb7de1d11d4f188a9": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "6db358bef96740a6bd7a566974da766f": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "4165058cbcd0441daf1eff4ace5d87d1": {"model_name": "FigureModel", "model_module": "jupyterlab-plotly", "model_module_version": "^5.11.0", "state": {"_config": {"plotlyServerURL": "https://plot.ly"}, "_data": [{"hovertemplate": "IoU threshold=%{x}<br>mAP (%)=%{y}<extra></extra>", "legendgroup": "", "line": {"color": "#636efa", "dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines", "name": "", "orientation": "v", "showlegend": false, "x": {"dtype": "float64", "shape": [10]}, "xaxis": "x", "y": {"dtype": "float64", "shape": [10]}, "yaxis": "y", "type": "scatter", "uid": "7aa89916-1825-4399-a8a9-90edb186e71b"}], "_dom_classes": [], "_js2py_layoutDelta": {}, "_js2py_pointsCallback": {}, "_js2py_relayout": {}, "_js2py_restyle": {}, "_js2py_traceDeltas": {}, "_js2py_update": {}, "_layout": {"legend": {"tracegroupgap": 0}, "template": {"data": {"barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "barpolar"}], "bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "bar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram": [{"marker": {"pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "histogram"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatter": [{"fillpattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}, "type": "scatter"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "title": {"text": "Mean Average Precision over increasing IoU thresholds"}, "xaxis": {"anchor": "y", "domain": [0.0, 1.0], "title": {"text": "IoU threshold"}}, "yaxis": {"anchor": "x", "domain": [0.0, 1.0], "title": {"text": "mAP (%)"}}}, "_py2js_addTraces": {}, "_py2js_animate": {}, "_py2js_deleteTraces": {}, "_py2js_moveTraces": {}, "_py2js_relayout": {}, "_py2js_removeLayoutProps": {}, "_py2js_removeTraceProps": {}, "_py2js_restyle": {}, "_py2js_update": {}, "_view_count": 0}, "buffers": [{"encoding": "base64", "path": ["_data", 0, "x", "buffer"], "data": "AAAAAAAA4D+amZmZmZnhPzMzMzMzM+M/zczMzMzM5D9mZmZmZmbmPwAAAAAAAOg/mpmZmZmZ6T8zMzMzMzPrP8zMzMzMzOw/ZmZmZmZm7j8="}, {"encoding": "base64", "path": ["_data", 0, "y", "buffer"], "data": "BSFOmC5zsT8514rrNLyqP2iHz+I3DqU/v5hhfP1PoD+QNvwyd9uZP3+pzGst+ZM//fA+IwNojj+OtiyKbl+HP/GgbeQr0YQ/+tliZfhGhD8="}]}, "c5d29582195749769d55d043f55f87af": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_db9fd5dca76f47fdbf003bc0503c5fb1", "style": "IPY_MODEL_31555a455619495db4a34d35d9751db0", "value": "<br><a href=\"#summary_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\" style=\"font-size: 14px;\">Go to top</a>"}}, "db9fd5dca76f47fdbf003bc0503c5fb1": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "31555a455619495db4a34d35d9751db0": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "acb0eb82eee840d0a95a40fb25bb622b": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "00a8ee3cbcb1489e81b4489957044495": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "333bc397b3ef4f99be63882d05f1416a": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "children": ["IPY_MODEL_cbc30192b52e463f9675145fdd51c6a4", "IPY_MODEL_46b97be2aef6441ba5c58e4af312d882", "IPY_MODEL_786143db9b1e45e4b0c73eb41b4aba4d", "IPY_MODEL_a1088c987fba4d25983eebabdeefa923"], "layout": "IPY_MODEL_5254df279ef24103b0eddaa29e86bb34"}}, "cbc30192b52e463f9675145fdd51c6a4": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_abe5a3bfca7145038107b3baa9a6f84c", "style": "IPY_MODEL_bb18c9c2ede04684a6a4efc06cb5ac3e", "value": "<h4 id=\"ImageSegmentPerformance-TestDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\"><b>Image Segment Performance - Test Dataset</b></h4>"}}, "abe5a3bfca7145038107b3baa9a6f84c": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "bb18c9c2ede04684a6a4efc06cb5ac3e": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "46b97be2aef6441ba5c58e4af312d882": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_fb99f3ac49f848b08ffa65d8f66390ee", "style": "IPY_MODEL_0d86a873ab0c43e0944695be339ba62e", "value": "<p>Segment the data by various properties of the image, and compare the performance of the segments. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_image_segment_performance.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"}}, "fb99f3ac49f848b08ffa65d8f66390ee": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "0d86a873ab0c43e0944695be339ba62e": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "786143db9b1e45e4b0c73eb41b4aba4d": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_a8d0709142744984b311afc5541d88d1", "style": "IPY_MODEL_4aeafd6214ab4e17bed09cb805df00dd", "value": "<h5><b>Conditions Summary</b></h5><style type=\"text/css\">\n#T_4da9d_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_4da9d_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_4da9d_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_4da9d_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_4da9d_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_4da9d_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Status</th>\n      <th class=\"col_heading level0 col1\" >Condition</th>\n      <th class=\"col_heading level0 col2\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_4da9d_row0_col0\" class=\"data row0 col0\" ><div style=\"color: red;text-align: center\">\u2716</div></td>\n      <td id=\"T_4da9d_row0_col1\" class=\"data row0 col1\" >Segment's ratio between score to mean is greater than 80%</td>\n      <td id=\"T_4da9d_row0_col2\" class=\"data row0 col2\" >Properties with failed segments: Brightness: {'Range': '(-inf, 0.33)', 'Metric': 'Average Precision', 'Ratio': 0.11}, Mean Blue Relative Intensity: {'Range': '[0.2, 0.23)', 'Metric': 'Average Precision', 'Ratio': 0.29}, Mean Green Relative Intensity: {'Range': '[0.41, 0.45)', 'Metric': 'Average Recall', 'Ratio': 0.28}, Mean Red Relative Intensity: {'Range': '(-inf, 0.31)', 'Metric': 'Average Precision', 'Ratio': 0.03}, RMS Contrast: {'Range': '[0.16, 0.19)', 'Metric': 'Average Precision', 'Ratio': 0.45}</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "a8d0709142744984b311afc5541d88d1": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "4aeafd6214ab4e17bed09cb805df00dd": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "a1088c987fba4d25983eebabdeefa923": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_1f6c90912fbb419d9645e701f1506650", "IPY_MODEL_cd1b4f05dad74c4985eb4b3548221043", "IPY_MODEL_20f1776f6f7e4463b743e8284ef3659a"], "layout": "IPY_MODEL_d67ddd4067e34f58b1298fa1ec002db6"}}, "1f6c90912fbb419d9645e701f1506650": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_72421d1d66b14eec99587fdbf3a01696", "style": "IPY_MODEL_269f67b0b6774986a8805b28fb3fd9a5", "value": "<h5><b>Additional Outputs</b></h5>"}}, "72421d1d66b14eec99587fdbf3a01696": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "269f67b0b6774986a8805b28fb3fd9a5": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "cd1b4f05dad74c4985eb4b3548221043": {"model_name": "FigureModel", "model_module": "jupyterlab-plotly", "model_module_version": "^5.11.0", "state": {"_config": {"plotlyServerURL": "https://plot.ly"}, "_data": [{"alignmentgroup": "True", "customdata": [[18], [18], [18], [18], [18]], "hovertemplate": "Metric=Average Precision<br>Property=Brightness<br>Range=%{x}<br>Value=%{y}<br>Number of samples=%{customdata[0]}<extra></extra>", "legendgroup": "Average Precision", "marker": {"color": "rgb(102, 197, 204)", "pattern": {"shape": ""}}, "name": "Average Precision", "offsetgroup": "Average Precision", "orientation": "v", "showlegend": true, "textposition": "auto", "width": 0.2, "x": ["(-inf, 0.33)", "[0.33, 0.38)", "[0.38, 0.44)", "[0.44, 0.52)", "[0.52, inf)"], "xaxis": "x", "y": {"dtype": "float64", "shape": [5]}, "yaxis": "y", "type": "bar", "uid": "65a5a1c3-c906-459e-ad69-3a1d093fc8d8"}, {"alignmentgroup": "True", "customdata": [[18], [18], [18], [18], [18]], "hovertemplate": "Metric=Average Precision<br>Property=RMS Contrast<br>Range=%{x}<br>Value=%{y}<br>Number of samples=%{customdata[0]}<extra></extra>", "legendgroup": "Average Precision", "marker": {"color": "rgb(102, 197, 204)", "pattern": {"shape": ""}}, "name": "Average Precision", "offsetgroup": "Average Precision", "orientation": "v", "showlegend": false, "textposition": "auto", "width": 0.2, "x": ["(-inf, 0.13)", "[0.13, 0.16)", "[0.16, 0.19)", "[0.19, 0.23)", "[0.23, inf)"], "xaxis": "x2", "y": {"dtype": "float64", "shape": [5]}, "yaxis": "y2", "type": "bar", "uid": "59ed9f39-0fef-4997-9cc5-090865510cd8"}, {"alignmentgroup": "True", "customdata": [[18], [18], [18], [18], [18]], "hovertemplate": "Metric=Average Precision<br>Property=Mean Blue Relative Intensity<br>Range=%{x}<br>Value=%{y}<br>Number of samples=%{customdata[0]}<extra></extra>", "legendgroup": "Average Precision", "marker": {"color": "rgb(102, 197, 204)", "pattern": {"shape": ""}}, "name": "Average Precision", "offsetgroup": "Average Precision", "orientation": "v", "showlegend": false, "textposition": "auto", "width": 0.2, "x": ["(-inf, 0.2)", "[0.2, 0.23)", "[0.23, 0.26)", "[0.26, 0.29)", "[0.29, inf)"], "xaxis": "x3", "y": {"dtype": "float64", "shape": [5]}, "yaxis": "y3", "type": "bar", "uid": "22b5c13c-6262-45ea-9515-90ea934681a2"}], "_dom_classes": [], "_js2py_layoutDelta": {}, "_js2py_pointsCallback": {}, "_js2py_relayout": {}, "_js2py_restyle": {}, "_js2py_traceDeltas": {}, "_js2py_update": {}, "_layout": {"annotations": [{"showarrow": false, "text": "Brightness", "x": 0.14666666666666667, "xanchor": "center", "xref": "paper", "y": 1.0, "yanchor": "bottom", "yref": "paper"}, {"showarrow": false, "text": "RMS Contrast", "x": 0.49, "xanchor": "center", "xref": "paper", "y": 1.0, "yanchor": "bottom", "yref": "paper"}, {"showarrow": false, "text": "Mean Blue Relative Intensity", "x": 0.8333333333333333, "xanchor": "center", "xref": "paper", "y": 1.0, "yanchor": "bottom", "yref": "paper"}, {"showarrow": false, "text": "Average Precision", "textangle": 90, "x": 0.98, "xanchor": "left", "xref": "paper", "y": 0.5, "yanchor": "middle", "yref": "paper"}], "barmode": "group", "legend": {"title": {"text": "Metric"}, "tracegroupgap": 0}, "template": {"data": {"barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "barpolar"}], "bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "bar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram": [{"marker": {"pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "histogram"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatter": [{"fillpattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}, "type": "scatter"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "title": {"text": "Metric Score Per Property Value Segment (showing top 3 properties by diffrence in segments)"}, "xaxis": {"anchor": "y", "domain": [0.0, 0.29333333333333333], "type": "category"}, "yaxis": {"anchor": "x", "domain": [0.0, 1.0], "showticklabels": true}, "xaxis2": {"anchor": "y2", "domain": [0.3433333333333333, 0.6366666666666667], "type": "category"}, "yaxis2": {"anchor": "x2", "domain": [0.0, 1.0], "matches": "y", "showticklabels": true}, "xaxis3": {"anchor": "y3", "domain": [0.6866666666666666, 0.98], "type": "category"}, "yaxis3": {"anchor": "x3", "domain": [0.0, 1.0], "matches": "y", "showticklabels": true}}, "_py2js_addTraces": {}, "_py2js_animate": {}, "_py2js_deleteTraces": {}, "_py2js_moveTraces": {}, "_py2js_relayout": {}, "_py2js_removeLayoutProps": {}, "_py2js_removeTraceProps": {}, "_py2js_restyle": {}, "_py2js_update": {}, "_view_count": 0}, "buffers": [{"encoding": "base64", "path": ["_data", 0, "y", "buffer"], "data": "UOFT4sEBZD+6EJcGS8x1P2gkhY/WApw/UGgMQnwpoz/NSkZvchKmPw=="}, {"encoding": "base64", "path": ["_data", 1, "y", "buffer"], "data": "qjdGlZCXij9xnsMvsMiFP1b//Ih7IIM/ls5SDDJMrT8aPbEx4+6NPw=="}, {"encoding": "base64", "path": ["_data", 2, "y", "buffer"], "data": "SYq3yNbwgD9CQ0U/Qtd/PxDD/6MD8Is/5zzwEx41mT/6j4Ubqhi0Pw=="}]}, "20f1776f6f7e4463b743e8284ef3659a": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_984c6628f5e24927abb34af79afc3f3e", "style": "IPY_MODEL_d50d2a1a555749febeb301b07edc6ade", "value": "<br><a href=\"#summary_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\" style=\"font-size: 14px;\">Go to top</a>"}}, "984c6628f5e24927abb34af79afc3f3e": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "d50d2a1a555749febeb301b07edc6ade": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "d67ddd4067e34f58b1298fa1ec002db6": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "5254df279ef24103b0eddaa29e86bb34": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "a4cdaa8e0501493ca0531a29287cb376": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "children": ["IPY_MODEL_1ded01db55d34dd2a4f1b3b293943f90", "IPY_MODEL_c52c38e40bc344ba9ffa931223dd8912", "IPY_MODEL_6ac23824e8ac489f84a8c9f2fd48cca0", "IPY_MODEL_2655ead4b42f4c3f8c2862cfefa1653a"], "layout": "IPY_MODEL_ebdfa602a2b04b7bad91d951ba719211"}}, "1ded01db55d34dd2a4f1b3b293943f90": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_64c9424727dd458984036db9ba29057e", "style": "IPY_MODEL_a3179e2c604949cfb3a6c395c850808e", "value": "<h4 id=\"ImageSegmentPerformance-TrainDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\"><b>Image Segment Performance - Train Dataset</b></h4>"}}, "64c9424727dd458984036db9ba29057e": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "a3179e2c604949cfb3a6c395c850808e": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "c52c38e40bc344ba9ffa931223dd8912": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_fd7597996f574491bf0ab5617b19f76c", "style": "IPY_MODEL_5a573657a2034efaa8d07d96729b588c", "value": "<p>Segment the data by various properties of the image, and compare the performance of the segments. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_image_segment_performance.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"}}, "fd7597996f574491bf0ab5617b19f76c": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "5a573657a2034efaa8d07d96729b588c": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "6ac23824e8ac489f84a8c9f2fd48cca0": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_a81a4fae1aea40dba44f0b2ad557124e", "style": "IPY_MODEL_2d1ad66d77be47279b521a077b590721", "value": "<h5><b>Conditions Summary</b></h5><style type=\"text/css\">\n#T_83333_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_83333_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_83333_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_83333_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_83333_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_83333_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Status</th>\n      <th class=\"col_heading level0 col1\" >Condition</th>\n      <th class=\"col_heading level0 col2\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_83333_row0_col0\" class=\"data row0 col0\" ><div style=\"color: red;text-align: center\">\u2716</div></td>\n      <td id=\"T_83333_row0_col1\" class=\"data row0 col1\" >Segment's ratio between score to mean is greater than 80%</td>\n      <td id=\"T_83333_row0_col2\" class=\"data row0 col2\" >Properties with failed segments: Brightness: {'Range': '[0.32, 0.38)', 'Metric': 'Average Recall', 'Ratio': 0.53}, Mean Blue Relative Intensity: {'Range': '(-inf, 0.2)', 'Metric': 'Average Recall', 'Ratio': 0.68}, Mean Green Relative Intensity: {'Range': '[0.45, 0.48)', 'Metric': 'Average Precision', 'Ratio': 0.54}, Mean Red Relative Intensity: {'Range': '(-inf, 0.31)', 'Metric': 'Average Recall', 'Ratio': 0.71}, RMS Contrast: {'Range': '[0.17, 0.2)', 'Metric': 'Average Precision', 'Ratio': 0.64}</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "a81a4fae1aea40dba44f0b2ad557124e": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "2d1ad66d77be47279b521a077b590721": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "2655ead4b42f4c3f8c2862cfefa1653a": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_4dfa9718f5e74a349cccd2936a4c8792", "IPY_MODEL_bec6e19c158f4505a5e94c824cadf3b8", "IPY_MODEL_d4a9951a7d8847f1916a9b6b68f7adb2"], "layout": "IPY_MODEL_d18e3671e45e4f27a3f5806fc2d3f602"}}, "4dfa9718f5e74a349cccd2936a4c8792": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_00e955d8419a40c78bd67d1fc29489fa", "style": "IPY_MODEL_68198543bb4e498cadb66135adc02f14", "value": "<h5><b>Additional Outputs</b></h5>"}}, "00e955d8419a40c78bd67d1fc29489fa": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "68198543bb4e498cadb66135adc02f14": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "bec6e19c158f4505a5e94c824cadf3b8": {"model_name": "FigureModel", "model_module": "jupyterlab-plotly", "model_module_version": "^5.11.0", "state": {"_config": {"plotlyServerURL": "https://plot.ly"}, "_data": [{"alignmentgroup": "True", "customdata": [[161], [161], [161], [161], [161]], "hovertemplate": "Metric=Average Precision<br>Property=RMS Contrast<br>Range=%{x}<br>Value=%{y}<br>Number of samples=%{customdata[0]}<extra></extra>", "legendgroup": "Average Precision", "marker": {"color": "rgb(102, 197, 204)", "pattern": {"shape": ""}}, "name": "Average Precision", "offsetgroup": "Average Precision", "orientation": "v", "showlegend": true, "textposition": "auto", "width": 0.2, "x": ["(-inf, 0.13)", "[0.13, 0.17)", "[0.17, 0.2)", "[0.2, 0.22)", "[0.22, inf)"], "xaxis": "x", "y": {"dtype": "float64", "shape": [5]}, "yaxis": "y", "type": "bar", "uid": "7c47ada6-d0a8-482c-ad38-afa840d1b6aa"}, {"alignmentgroup": "True", "customdata": [[161], [161], [161], [161], [161]], "hovertemplate": "Metric=Average Precision<br>Property=Mean Red Relative Intensity<br>Range=%{x}<br>Value=%{y}<br>Number of samples=%{customdata[0]}<extra></extra>", "legendgroup": "Average Precision", "marker": {"color": "rgb(102, 197, 204)", "pattern": {"shape": ""}}, "name": "Average Precision", "offsetgroup": "Average Precision", "orientation": "v", "showlegend": false, "textposition": "auto", "width": 0.2, "x": ["(-inf, 0.31)", "[0.31, 0.33)", "[0.33, 0.34)", "[0.34, 0.36)", "[0.36, inf)"], "xaxis": "x2", "y": {"dtype": "float64", "shape": [5]}, "yaxis": "y2", "type": "bar", "uid": "d5eccab0-bcee-4973-b8df-5bbd3e6ad2d4"}, {"alignmentgroup": "True", "customdata": [[161], [161], [161], [161], [161]], "hovertemplate": "Metric=Average Precision<br>Property=Mean Green Relative Intensity<br>Range=%{x}<br>Value=%{y}<br>Number of samples=%{customdata[0]}<extra></extra>", "legendgroup": "Average Precision", "marker": {"color": "rgb(102, 197, 204)", "pattern": {"shape": ""}}, "name": "Average Precision", "offsetgroup": "Average Precision", "orientation": "v", "showlegend": false, "textposition": "auto", "width": 0.2, "x": ["(-inf, 0.36)", "[0.36, 0.41)", "[0.41, 0.45)", "[0.45, 0.48)", "[0.48, inf)"], "xaxis": "x3", "y": {"dtype": "float64", "shape": [5]}, "yaxis": "y3", "type": "bar", "uid": "855df332-c68b-4b61-ac30-6b53bb662e55"}], "_dom_classes": [], "_js2py_layoutDelta": {}, "_js2py_pointsCallback": {}, "_js2py_relayout": {}, "_js2py_restyle": {}, "_js2py_traceDeltas": {}, "_js2py_update": {}, "_layout": {"annotations": [{"showarrow": false, "text": "RMS Contrast", "x": 0.14666666666666667, "xanchor": "center", "xref": "paper", "y": 1.0, "yanchor": "bottom", "yref": "paper"}, {"showarrow": false, "text": "Mean Red Relative Intensity", "x": 0.49, "xanchor": "center", "xref": "paper", "y": 1.0, "yanchor": "bottom", "yref": "paper"}, {"showarrow": false, "text": "Mean Green Relative Intensity", "x": 0.8333333333333333, "xanchor": "center", "xref": "paper", "y": 1.0, "yanchor": "bottom", "yref": "paper"}, {"showarrow": false, "text": "Average Precision", "textangle": 90, "x": 0.98, "xanchor": "left", "xref": "paper", "y": 0.5, "yanchor": "middle", "yref": "paper"}], "barmode": "group", "legend": {"title": {"text": "Metric"}, "tracegroupgap": 0}, "template": {"data": {"barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "barpolar"}], "bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "bar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram": [{"marker": {"pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "histogram"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatter": [{"fillpattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}, "type": "scatter"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "title": {"text": "Metric Score Per Property Value Segment (showing top 3 properties by diffrence in segments)"}, "xaxis": {"anchor": "y", "domain": [0.0, 0.29333333333333333], "type": "category"}, "yaxis": {"anchor": "x", "domain": [0.0, 1.0], "showticklabels": true}, "xaxis2": {"anchor": "y2", "domain": [0.3433333333333333, 0.6366666666666667], "type": "category"}, "yaxis2": {"anchor": "x2", "domain": [0.0, 1.0], "matches": "y", "showticklabels": true}, "xaxis3": {"anchor": "y3", "domain": [0.6866666666666666, 0.98], "type": "category"}, "yaxis3": {"anchor": "x3", "domain": [0.0, 1.0], "matches": "y", "showticklabels": true}}, "_py2js_addTraces": {}, "_py2js_animate": {}, "_py2js_deleteTraces": {}, "_py2js_moveTraces": {}, "_py2js_relayout": {}, "_py2js_removeLayoutProps": {}, "_py2js_removeTraceProps": {}, "_py2js_restyle": {}, "_py2js_update": {}, "_view_count": 0}, "buffers": [{"encoding": "base64", "path": ["_data", 0, "y", "buffer"], "data": "JXRcXuJalz+r47LAByaWPzYUli4HK5I/Iz8Q103dnz/G/oETTdimPw=="}, {"encoding": "base64", "path": ["_data", 1, "y", "buffer"], "data": "yjHMU8Kbkz+KLQLnymqTP3ea8WbsTJQ/HCKWQnsdlD8hb5+BaSGoPw=="}, {"encoding": "base64", "path": ["_data", 2, "y", "buffer"], "data": "YsKDDHeUpz/rH3r8KfagP/balbPxtJM/5SBNxni8jT+R12fT6YSWPw=="}]}, "d4a9951a7d8847f1916a9b6b68f7adb2": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_a18c386e3b3a456aa1e58ca17c1893d6", "style": "IPY_MODEL_80b495194c7345a0ad043ab113ccef84", "value": "<br><a href=\"#summary_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\" style=\"font-size: 14px;\">Go to top</a>"}}, "a18c386e3b3a456aa1e58ca17c1893d6": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "80b495194c7345a0ad043ab113ccef84": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "d18e3671e45e4f27a3f5806fc2d3f602": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "ebdfa602a2b04b7bad91d951ba719211": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "2aebc72124094eabba0ef20e5639fd91": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "0829680f946d413aa3cc23ccb1330ae0": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "e2e2c8b418d147a5a593437d61383d92": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "7363c18a97f54a69a00e5d66af809746": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_016d887048f348cfa85c2bfa5e09fdd2", "IPY_MODEL_57b7afe3e1ba42dea33b6f5df67ee7d0"], "layout": "IPY_MODEL_26d7ebc7c75f439b8a7d4b18ef6a6af3"}}, "016d887048f348cfa85c2bfa5e09fdd2": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_54cb3233cbc048b1b152e4f85f073bd8", "style": "IPY_MODEL_5ee00d53d42042ccb35de364d8126521", "value": "<span id=\"summary_UH17J8QO09VS9KKH4A3YJTU7F-section-I3DO7\"></span>"}}, "54cb3233cbc048b1b152e4f85f073bd8": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "5ee00d53d42042ccb35de364d8126521": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "57b7afe3e1ba42dea33b6f5df67ee7d0": {"model_name": "AccordionModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "_titles": {"0": "Passed"}, "children": ["IPY_MODEL_95fa6a0a48a84385b2e597ee3555bc0d"], "layout": "IPY_MODEL_1bccb623c6cb4a73b5113eb08b2d5cc8", "selected_index": null}}, "95fa6a0a48a84385b2e597ee3555bc0d": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_19c04bf201cb4fde8eac39ca2b473abe", "IPY_MODEL_6a3638f738c248e9bcecc662cfb839fd", "IPY_MODEL_595caadd56034c46863aae8768473111"], "layout": "IPY_MODEL_8c83f3758d9248249b26db8dfa9f69b9"}}, "19c04bf201cb4fde8eac39ca2b473abe": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_203caa619f934c15b489b6e46271094e", "style": "IPY_MODEL_2f49a5281c0d4528bc55bfcf47c7a6b7", "value": "<style type=\"text/css\">\n#T_a986f_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_a986f_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_a986f_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_a986f_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_a986f_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_a986f_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Status</th>\n      <th class=\"col_heading level0 col1\" >Check</th>\n      <th class=\"col_heading level0 col2\" >Condition</th>\n      <th class=\"col_heading level0 col3\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_a986f_row0_col0\" class=\"data row0 col0\" ><div style=\"color: green;text-align: center\">\u2713</div></td>\n      <td id=\"T_a986f_row0_col1\" class=\"data row0 col1\" ><a href=\"#TrainTestPredictionDrift_UH17J8QO09VS9KKH4A3YJTU7F-section-I3DO7\">Train Test Prediction Drift</a></td>\n      <td id=\"T_a986f_row0_col2\" class=\"data row0 col2\" >categorical drift score < 0.15 and numerical drift score < 0.075 for prediction drift</td>\n      <td id=\"T_a986f_row0_col3\" class=\"data row0 col3\" >Passed for 3 prediction properties out of 3 prediction properties.\nFound prediction property \"Samples Per Class\" has the highest categorical drift score: 0\nFound prediction property \"Bounding Box Area (in pixels)\" has the highest numerical drift score: 0.05</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "203caa619f934c15b489b6e46271094e": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "2f49a5281c0d4528bc55bfcf47c7a6b7": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "6a3638f738c248e9bcecc662cfb839fd": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_0c6843f0e33e4ac3aef892d1a3f3512d", "style": "IPY_MODEL_6f73033dc61746078b8fc78622a4f94f", "value": "<hr style=\"background-color: #eee;border: 0 none;color: #eee;height: 4px;\">"}}, "0c6843f0e33e4ac3aef892d1a3f3512d": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "6f73033dc61746078b8fc78622a4f94f": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "595caadd56034c46863aae8768473111": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "children": ["IPY_MODEL_0b9bd3d16ec4474e9dd6cf1e68c77a1b", "IPY_MODEL_efbb853b650346a5a9e61c4272b08c03", "IPY_MODEL_cedc45427c2a44658d6aae11b0c7344e", "IPY_MODEL_8c6d72b334b44729b533c2983f670e7e"], "layout": "IPY_MODEL_9f81095bb1be4c71874a0bb700022d55"}}, "0b9bd3d16ec4474e9dd6cf1e68c77a1b": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_ca48a2480ad3449e8cb4b04677a16d5c", "style": "IPY_MODEL_b1dee1979d264a2bb5e5dc7bfc4483e8", "value": "<h4 id=\"TrainTestPredictionDrift_UH17J8QO09VS9KKH4A3YJTU7F-section-I3DO7\"><b>Train Test Prediction Drift</b></h4>"}}, "ca48a2480ad3449e8cb4b04677a16d5c": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "b1dee1979d264a2bb5e5dc7bfc4483e8": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "efbb853b650346a5a9e61c4272b08c03": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_05ad958a901f44628129553112eff950", "style": "IPY_MODEL_19ed54a199be434e8167c25dfec4d23c", "value": "<p>    Calculate prediction drift between train dataset and test dataset, using statistical measures. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_train_test_prediction_drift.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"}}, "05ad958a901f44628129553112eff950": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "19ed54a199be434e8167c25dfec4d23c": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "cedc45427c2a44658d6aae11b0c7344e": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_18a25d4802414fdeb4daf84dd69a16af", "style": "IPY_MODEL_2fb838c3686144e8bc5826af511a1d49", "value": "<h5><b>Conditions Summary</b></h5><style type=\"text/css\">\n#T_54c21_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_54c21_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_54c21_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_54c21_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_54c21_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_54c21_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Status</th>\n      <th class=\"col_heading level0 col1\" >Condition</th>\n      <th class=\"col_heading level0 col2\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_54c21_row0_col0\" class=\"data row0 col0\" ><div style=\"color: green;text-align: center\">\u2713</div></td>\n      <td id=\"T_54c21_row0_col1\" class=\"data row0 col1\" >categorical drift score < 0.15 and numerical drift score < 0.075 for prediction drift</td>\n      <td id=\"T_54c21_row0_col2\" class=\"data row0 col2\" >Passed for 3 prediction properties out of 3 prediction properties.\nFound prediction property \"Samples Per Class\" has the highest categorical drift score: 0\nFound prediction property \"Bounding Box Area (in pixels)\" has the highest numerical drift score: 0.05</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "18a25d4802414fdeb4daf84dd69a16af": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "2fb838c3686144e8bc5826af511a1d49": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "8c6d72b334b44729b533c2983f670e7e": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_a38f5525247744d8a48262287c55755b", "IPY_MODEL_49f552bb36e54477a6565f0d2b048fd9", "IPY_MODEL_021130e696bc48a584ef2f44221e9460", "IPY_MODEL_1b793ce3fead41cb992773a62980428e", "IPY_MODEL_89b5f57c35cc48c38ef1b5826a3acd3d", "IPY_MODEL_1a66704841e24224b6a4fc6b4ae7995f", "IPY_MODEL_c1b66f428c80446686003e1cdfefb02b"], "layout": "IPY_MODEL_ba478d7ef0314e0391d077e20ab85c80"}}, "a38f5525247744d8a48262287c55755b": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_2ae260dbf5e14cf9a3d2c530677bb9d8", "style": "IPY_MODEL_ff10a102187c4a1f88d6e6b229c1e366", "value": "<h5><b>Additional Outputs</b></h5>"}}, "2ae260dbf5e14cf9a3d2c530677bb9d8": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "ff10a102187c4a1f88d6e6b229c1e366": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "49f552bb36e54477a6565f0d2b048fd9": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_1de89e064e6b44e48dadc4651f82fd4a", "style": "IPY_MODEL_770eeb9c4d8045acb1e5bd4ba6630e82", "value": "<div><span>The Drift score is a measure for the difference between two distributions. In this check, drift is measured for the distribution of the following prediction properties: ['Samples Per Class', 'Bounding Box Area (in pixels)', 'Number of Bounding Boxes Per Image']. </span></div>"}}, "1de89e064e6b44e48dadc4651f82fd4a": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "770eeb9c4d8045acb1e5bd4ba6630e82": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "021130e696bc48a584ef2f44221e9460": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_f8fc08b19cd341279ca3c2fec4e2bdfa", "style": "IPY_MODEL_d7b3625736234281a04b856b03f40a8b", "value": "<div>For discrete distribution plots, showing the top 10 categories with largest difference between train and test.</div>"}}, "f8fc08b19cd341279ca3c2fec4e2bdfa": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "d7b3625736234281a04b856b03f40a8b": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "1b793ce3fead41cb992773a62980428e": {"model_name": "FigureModel", "model_module": "jupyterlab-plotly", "model_module_version": "^5.11.0", "state": {"_config": {"plotlyServerURL": "https://plot.ly"}, "_data": [{"base": 0, "marker": {"color": "#01B8AA"}, "offsetgroup": "0", "orientation": "h", "showlegend": false, "x": [0.04909983289982629], "xaxis": "x", "y": ["Drift Score"], "yaxis": "y", "type": "bar", "uid": "c9a9e36b-b050-4840-a9e2-674fd000de9f"}, {"fill": "tozeroy", "line": {"color": "#00008b", "shape": "spline"}, "name": "Train Dataset", "x": [0.0, 40.57234451293945, 88.40034179687501, 101.94984039306641, 142.885078125, 144.57436096191407, 209.68835510253908, 210.84809470663265, 233.3550714111328, 255.44640502929687, 277.5053771972656, 286.138935546875, 337.81747192382807, 341.54990844726564, 375.3567028808594, 391.6453649902344, 421.6961894132653, 435.5433337402344, 476.99168090820314, 477.0551733398436, 532.7958935546876, 550.8075854492188, 609.4138110351562, 610.4113647460938, 632.544284119898, 674.1289916992188, 687.7242089843751, 729.5895654296875, 790.2676708984377, 822.4559155273437, 843.3923788265306, 874.9538818359376, 967.7557666015625, 989.3529272460937, 1047.158798828125, 1054.2404735331634, 1059.1815087890625, 1146.2523876953126, 1189.4223876953126, 1239.7685546875, 1265.088568239796, 1310.629248046875, 1315.47939453125, 1382.8502880859376, 1405.4354980468752, 1434.7302783203127, 1475.9366629464284, 1485.2040722656252, 1508.4928369140625, 1533.6705048230351, 1541.8587548828125, 1561.3465576171875, 1602.7967529296877, 1609.080810546875, 1609.080810546875, 1648.795517578125, 1659.3760205078127, 1666.134924816991, 1686.7847576530612, 1706.5015576171875, 1714.1850244140628, 1730.3003662109375, 1757.8273046875, 1772.892802734375, 1808.639404296875, 1808.639404296875, 1809.9861474609377, 1844.8886083984373, 1852.6264892578124, 1873.8375830078128, 1894.84630859375, 1897.632852359694, 1921.667861328125, 1934.5618359375, 1936.8492041015627, 1975.7114892578124, 1981.9228271484374, 2022.8222265625002, 2027.868525390625, 2059.975859375, 2064.825390625, 2089.370546875, 2108.4809470663267, 2111.687177734375, 2130.0811328125, 2159.62873046875, 2188.644189453125, 2204.190009765625, 2235.8789062500005, 2251.7717968750003, 2252.12998046875, 2284.6782519531253, 2312.38740234375, 2319.329041772959, 2353.8146484375, 2379.2007324218753, 2387.1789550781255, 2443.326240234375, 2470.8709375000003, 2500.2277246093745, 2514.27498046875, 2530.177136479592, 2537.6693359375, 2564.443701171875, 2587.2828515625006, 2623.5709472656254, 2674.396259765625, 2677.584912109375, 2741.0252311862246, 2780.139609375001, 2794.009824218751, 2895.4793359375003, 2951.873325892857, 3017.5436328125, 3083.181962890628, 3162.7214205994896, 3289.70162109375, 3373.5695153061224, 3454.780908203125, 3584.417610012755, 3795.265704719388, 4006.1137994260203, 4216.9618941326535, 4427.809988839285, 4638.658083545918, 4849.506178252551, 5060.354272959184, 5271.202367665816, 5482.050462372449, 5692.898557079082, 5903.746651785714, 6114.5947464923465, 6325.442841198979, 6536.290935905612, 6747.139030612245, 6957.987125318878, 7168.83522002551, 7379.683314732143, 7590.531409438776, 7801.379504145408, 8012.2275988520405, 8223.075693558674, 8433.923788265307, 8644.771882971938, 8855.61997767857, 9066.468072385203, 9277.316167091836, 9488.164261798469, 9699.012356505102, 9909.860451211734, 10120.708545918367, 10331.556640625], "xaxis": "x2", "y": {"dtype": "float64", "shape": [152]}, "yaxis": "y2", "type": "scatter", "uid": "1d23c349-b352-436f-9c22-f7b5e490234a"}, {"line": {"color": "#00008b", "dash": "dash"}, "mode": "lines+markers", "name": "Train Mean", "x": [1533.6705048230351, 1533.6705048230351], "xaxis": "x2", "y": [0, 0.0003529046444468393], "yaxis": "y2", "type": "scatter", "uid": "b75447ff-81f8-4956-a437-ef57c5bc09e4"}, {"line": {"color": "#00008b"}, "mode": "lines", "name": "Train Median", "x": [1609.080810546875, 1609.080810546875], "xaxis": "x2", "y": [0, 0.0003733876784879912], "yaxis": "y2", "type": "scatter", "uid": "66595438-b771-42d8-bbc5-fb8f6b44ff0e"}, {"fill": "tozeroy", "line": {"color": "#69b3a2", "shape": "spline"}, "name": "Test Dataset", "x": [0.0, 40.57234451293945, 88.40034179687501, 101.94984039306641, 142.885078125, 144.57436096191407, 209.68835510253908, 210.84809470663265, 233.3550714111328, 255.44640502929687, 277.5053771972656, 286.138935546875, 337.81747192382807, 341.54990844726564, 375.3567028808594, 391.6453649902344, 421.6961894132653, 435.5433337402344, 476.99168090820314, 477.0551733398436, 532.7958935546876, 550.8075854492188, 609.4138110351562, 610.4113647460938, 632.544284119898, 674.1289916992188, 687.7242089843751, 729.5895654296875, 790.2676708984377, 822.4559155273437, 843.3923788265306, 874.9538818359376, 967.7557666015625, 989.3529272460937, 1047.158798828125, 1054.2404735331634, 1059.1815087890625, 1146.2523876953126, 1189.4223876953126, 1239.7685546875, 1265.088568239796, 1310.629248046875, 1315.47939453125, 1382.8502880859376, 1405.4354980468752, 1434.7302783203127, 1475.9366629464284, 1485.2040722656252, 1508.4928369140625, 1533.6705048230351, 1541.8587548828125, 1561.3465576171875, 1602.7967529296877, 1609.080810546875, 1609.080810546875, 1648.795517578125, 1659.3760205078127, 1666.134924816991, 1686.7847576530612, 1706.5015576171875, 1714.1850244140628, 1730.3003662109375, 1757.8273046875, 1772.892802734375, 1808.639404296875, 1808.639404296875, 1809.9861474609377, 1844.8886083984373, 1852.6264892578124, 1873.8375830078128, 1894.84630859375, 1897.632852359694, 1921.667861328125, 1934.5618359375, 1936.8492041015627, 1975.7114892578124, 1981.9228271484374, 2022.8222265625002, 2027.868525390625, 2059.975859375, 2064.825390625, 2089.370546875, 2108.4809470663267, 2111.687177734375, 2130.0811328125, 2159.62873046875, 2188.644189453125, 2204.190009765625, 2235.8789062500005, 2251.7717968750003, 2252.12998046875, 2284.6782519531253, 2312.38740234375, 2319.329041772959, 2353.8146484375, 2379.2007324218753, 2387.1789550781255, 2443.326240234375, 2470.8709375000003, 2500.2277246093745, 2514.27498046875, 2530.177136479592, 2537.6693359375, 2564.443701171875, 2587.2828515625006, 2623.5709472656254, 2674.396259765625, 2677.584912109375, 2741.0252311862246, 2780.139609375001, 2794.009824218751, 2895.4793359375003, 2951.873325892857, 3017.5436328125, 3083.181962890628, 3162.7214205994896, 3289.70162109375, 3373.5695153061224, 3454.780908203125, 3584.417610012755, 3795.265704719388, 4006.1137994260203, 4216.9618941326535, 4427.809988839285, 4638.658083545918, 4849.506178252551, 5060.354272959184, 5271.202367665816, 5482.050462372449, 5692.898557079082, 5903.746651785714, 6114.5947464923465, 6325.442841198979, 6536.290935905612, 6747.139030612245, 6957.987125318878, 7168.83522002551, 7379.683314732143, 7590.531409438776, 7801.379504145408, 8012.2275988520405, 8223.075693558674, 8433.923788265307, 8644.771882971938, 8855.61997767857, 9066.468072385203, 9277.316167091836, 9488.164261798469, 9699.012356505102, 9909.860451211734, 10120.708545918367, 10331.556640625], "xaxis": "x2", "y": {"dtype": "float64", "shape": [152]}, "yaxis": "y2", "type": "scatter", "uid": "5e23a32c-82ce-40b5-809e-5fb891d2136c"}, {"line": {"color": "#69b3a2", "dash": "dash"}, "mode": "lines+markers", "name": "Test Mean", "x": [1666.134924816991, 1666.134924816991], "xaxis": "x2", "y": [0, 0.0004169810240095183], "yaxis": "y2", "type": "scatter", "uid": "a4f233a0-4868-4d53-a713-eb3f635c1639"}, {"line": {"color": "#69b3a2"}, "mode": "lines", "name": "Test Median", "x": [1808.639404296875, 1808.639404296875], "xaxis": "x2", "y": [0, 0.0004779631531220677], "yaxis": "y2", "type": "scatter", "uid": "49a39451-f6a2-4c13-84ef-ca0b124ac427"}], "_dom_classes": [], "_js2py_layoutDelta": {}, "_js2py_pointsCallback": {}, "_js2py_relayout": {}, "_js2py_restyle": {}, "_js2py_traceDeltas": {}, "_js2py_update": {}, "_layout": {"annotations": [{"font": {"size": 16}, "showarrow": false, "text": "Drift Score (Earth Mover's Distance)", "x": 0.5, "xanchor": "center", "xref": "paper", "y": 1.0000000000000002, "yanchor": "bottom", "yref": "paper"}, {"font": {"size": 16}, "showarrow": false, "text": "Distribution Plot", "x": 0.5, "xanchor": "center", "xref": "paper", "y": 0.7200000000000001, "yanchor": "bottom", "yref": "paper"}], "bargroupgap": 0, "height": 400, "legend": {"title": {"text": "Legend"}, "y": 0.6, "yanchor": "top"}, "template": {"data": {"barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "barpolar"}], "bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "bar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram": [{"marker": {"pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "histogram"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatter": [{"fillpattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}, "type": "scatter"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "title": {"text": "Bounding Box Area (in pixels)", "x": 0.5, "xanchor": "center"}, "xaxis": {"anchor": "y", "domain": [0.0, 1.0], "dtick": 0.05, "fixedrange": true, "gridcolor": "black", "linecolor": "black", "range": [0, 0.4], "showgrid": false}, "yaxis": {"anchor": "x", "autorange": true, "color": "black", "domain": [0.9200000000000002, 1.0], "fixedrange": true, "rangemode": "normal", "showgrid": false, "showline": false, "showticklabels": false, "zeroline": false}, "xaxis2": {"anchor": "y2", "domain": [0.0, 1.0], "fixedrange": false, "range": [40.57234451293945, 3454.780908203125], "title": {"text": "Bounding Box Area (in pixels)"}}, "yaxis2": {"anchor": "x2", "domain": [0.0, 0.7200000000000001], "fixedrange": true, "title": {"text": "Probability Density"}}}, "_py2js_addTraces": {}, "_py2js_animate": {}, "_py2js_deleteTraces": {}, "_py2js_moveTraces": {}, "_py2js_relayout": {}, "_py2js_removeLayoutProps": {}, "_py2js_removeTraceProps": {}, "_py2js_restyle": {}, "_py2js_update": {}, "_view_count": 0}, "buffers": [{"encoding": "base64", "path": ["_data", 1, "y", "buffer"], "data": "IVcLYJiZKj9DD6Oyre0tP5y4cO9I1DA/gQ1vm+1TMT9Tn1UcXboyP3ttqDEryDI/VtZGpxyWND8z+f8rAZ00PxeTUbDYGDU/r69+QaN/NT8tDIexWdM1P1c3ba3u7jU/maXppr1XNj8Loe8gZVs2P4h+m6moZTY/ZK5LEZBcNj/XyEq8wjU2P1pbpakBGzY//nYxCt+tNT9d4/2WrK01P7VkhtMQ5TQ/UzxlzQCbND96VpWh+5kzP6BoyCKClTM/jUDIg1QyMz+Bkh+eCnwyP1a5N5uwQjI/xy/cwKecMT/8MHbOQNEwPxGoKLbWejA/0VHBcVlLMD9SKS32MhEwPyWCr8Uqiy8/9Ys9goaQLz/5lMRGzucvPzp0YuSf+S8/CR78kHoDMD8a02QeObMwP7VQyEFvMDE/yP+yrGbeMT84zD4q8z8yP25Ak/O//TI/E8YeveoSMz/LlJudfUc0P8lePI51szQ/2GMeMWVBNT9g+SFyawo2P+e/g0WLNzY/6s6Dq1eoNj+lwRDowSA3P8rCMIpzRzc/Qj3TbmSiNz8pMHOqEF04Pwd0Kt5neDg/B3Qq3md4OD+Ez8CmHR45P6sBPV/4Rzk/O8E0vCZiOT+duOVFS685PzOUi2yr9Dk/yAlRX38OOj95sW5QWUI6PwPE/Rw2kzo/ZxCpSxe7Oj90eGYdZAw7P3R4Zh1kDDs/XjSiQxIPOz9ucREhUUo7PyRL7vu1VDs/Mn8tFuprOz/7f7xPE3s7P26jxaZ9fDs/yQ0/K9GCOz8jZUlD0oE7Pw5hMmtSgTs/HHiWguFpOz+T+vC6gmM7P2qLlMScJzs/gP41BRUeOz+jNJQer9Y6Pz5RT3JPyjo/PcBVi3mFOj+y00Ud6Ug6P1Oi/awrPjo/DXthK3H9OT8rUKVt2oo5P5fPUSyPDjk/GWqDQJLHOD+DlbF7Ui44P06LuOyN3Tc/u65h2LTbNz+FGHF6JC83P0o80NjflTY/Y31v5bJuNj+buRrhQag1P7ltf9LnEjU//fW6dofjND/T6anRWJIzP4W5D7bI6zI/MFfpS2g6Mj85ST14xeUxP8zzXFpAhjE/QF+UfWBZMT8fLF2h0rkwPxwDKDPiMjA/OyUYQiO+Lj+hgY+a8ngsP0qnF7j+VCw/5k5P5SWXKT8swSA19vMnP5sUezz3YSc/u7imnsdkIz+UbALSw1UhP7O2zwu9NR4/bMrfsrkmGj+3Kn5l8s0VP+qZhyXLJhA/sxhx/jVlCj+csRErc6cFP2sE/vNjWP8+jn2eW5go8j5mYPWzRK/lPntIXBMesdw+FSLP3Du00z6dxL3m1nzKPqAih8xk88Q+TclsGtCXxD6XdlPstNvCPonseRQKOcI+j+0BkHYAxT4iNdqERRnDPm0Pm9eBCLk+Yt7US1t/sj6iXHC62LOzPlx9iuyQULQ+OWoarpNbsz6loLb2X5azPtS/aS3gpbI+aWe/Q6pHqj6B+rKl7YqWPgt6c3j+vXQ+ZxqtDi79Qz6ZXxd85dU9PvCxWbxv/m8+1uaO0ykHkj5b+nFfucmjPpXHj9rlJqU+w+glUusmlj4ACBrGuFh9PuYDqBXfqYY+OV7pXpxfnz7NHFn54HOmPg=="}, {"encoding": "base64", "path": ["_data", 4, "y", "buffer"], "data": "VyLedikPIz8d9rnldfMlP+xLwiE+SCk/dV8c2LcwKj+N6z9DssksP5DWY7i54yw/reky2P0yMD/k2ZYW+jkwPzQFSCftuTA/TkC3ExkpMT90VSYAk4kxP17/L+lcqzE/g7IY65tHMj+5m3oG6k8yPxXePNbEiTI/4u4UTeyaMj9EIqQEh6kyPwh/p0VBqTI/+9251WuQMj92MwN6W5AyP/TDvDRDPTI/A+a2Z/cXMj/2ogZBioExP9pA2DykfjE/0AJTN9k7MT9x4A7NUbMwPw3jcIszhDA/CEidgzHcLz/J5ValGiEuP4aPq35zPS0/g0IBzcivLD/SiR49yucrPy2qwCPGJio/NBTKMYPkKT+8Wk4aMYkpPzByue81hyk/j9BglhKHKT9UVjhvdjQqP30mgvu3Cys/z6/z+Qd3LD8Lnm9SplstPwP6wxAIQy8/fWX6CZd8Lz8azsXDGoMxP59dZDF4LzI/FqmgZ3kcMz/Jelwws380P5JgMGaA0jQ/n+yeZkWmNT8Zdt2hvI82PxLWpO9Y3DY/bC8Z0WOTNz9LWKat9hc5PwAAHK1MUjk/AAAcrUxSOT+9M5o2lLs6P00FFGHwGDs/Wt113MdTOz+hNbwZMwM8P8PhWpK3ozw/NdHh8jPgPD8ix//B9Fo9PzLg86WTHj4/nF5I1niBPj/xlYEc5FI/P/GVgRzkUj8/rzkZ9w1aPz9TIMIQOQBAPxhE6n0bEEA/d90stMw2QD+Tw6EQFlZAPx+oqu+1WUA/RfZEIelzQD/bRPfIRX5AP56x5XvYf0A/kQGW/rmOQD8NvFsKGY9AP7V/CF65hEA/AnATAPyBQD/aMnE3umlAP1jIBZIYZUA/pJuPchpKQD/gy3dZSjFAP8OAMK7TLEA/wddReKoRQD+zAeLz8cE/P/f1hsyuVz8/DsYDW+YaPz/n/vgIbJc+P51kqPvUUT4/cLMIaTxQPj+0/4wgFro9P6CbTgT3MT0/tnnetpYOPT88Tu2LiFY8PwTqEYVGxTs/Tkuhg7uVOz/yUVVXNyo6P9tHRaBlYzk/niSIrl5/OD/H4Z+7Pgw4P0At2xU8hTc/MeAPluxDNz+CA2E061E2P5ko7ih+eTU//uG/c10RND8raeBpXQEyP6YWPWa03zE/+fQmhQWGLj/IIMRbjGgrPz5cYa+nVyo/6UpR/h99Iz+VkowQ4JIgP4ffeuekERw/UpoLYeSbGD9IrQvvxvMVP1ObSFEbCRM/DVYIw5DHED+QsYvUY/YLPzychXCvrQE/g36X8KLW4z6PS5Hvc7u1PvxBfBkUYHY+CWu2KL4zJT6KlxfT20HCPeVKJuKJWkw92cmkKpDCwzxhfWzpoqUoPJeqqdctPn07IRqYipT17TvlVQ64qfKLPLQDSBE9JRc9i0fWmVQEkT0AHhfrvzb2Pfthb+ZOvkk+Oa3czT98ij6MhC1TwTC4PsyQeJFZndM+bRANcx493D5Ane5KwAvSPg/nG8HLebQ+kIC/xRKghD7BzX5ysnFCPvFFZyPzSO09WEgJG7ejhD3vDkTH19MJPQo80qo0sXw8liXAjRZM3DvubzX1hMYoOwxIdanmQWM6uXYQNaqTijlnqMMb40egOA=="}]}, "89b5f57c35cc48c38ef1b5826a3acd3d": {"model_name": "FigureModel", "model_module": "jupyterlab-plotly", "model_module_version": "^5.11.0", "state": {"_config": {"plotlyServerURL": "https://plot.ly"}, "_data": [{"base": 0, "marker": {"color": "#01B8AA"}, "offsetgroup": "0", "orientation": "h", "showlegend": false, "x": [0.020697123714912793], "xaxis": "x", "y": ["Drift Score"], "yaxis": "y", "type": "bar", "uid": "b4a240ac-ff9d-4252-ae05-352fa19a407f"}, {"marker": {"color": "#00008b"}, "name": "Train Dataset", "x": {"dtype": "float64", "shape": [16]}, "xaxis": "x2", "y": {"dtype": "float64", "shape": [16]}, "yaxis": "y2", "type": "bar", "uid": "24156b46-9015-4dc2-af24-744b0c43e7e3"}, {"marker": {"color": "#69b3a2"}, "name": "Test Dataset", "x": {"dtype": "float64", "shape": [16]}, "xaxis": "x2", "y": {"dtype": "float64", "shape": [16]}, "yaxis": "y2", "type": "bar", "uid": "0587fde9-2fb2-4eb4-8c63-ecd8b877de2c"}], "_dom_classes": [], "_js2py_layoutDelta": {}, "_js2py_pointsCallback": {}, "_js2py_relayout": {}, "_js2py_restyle": {}, "_js2py_traceDeltas": {}, "_js2py_update": {}, "_layout": {"annotations": [{"font": {"size": 16}, "showarrow": false, "text": "Drift Score (Earth Mover's Distance)", "x": 0.5, "xanchor": "center", "xref": "paper", "y": 1.0000000000000002, "yanchor": "bottom", "yref": "paper"}, {"font": {"size": 16}, "showarrow": false, "text": "Distribution Plot", "x": 0.5, "xanchor": "center", "xref": "paper", "y": 0.7200000000000001, "yanchor": "bottom", "yref": "paper"}], "bargroupgap": 0, "height": 400, "legend": {"title": {"text": "Legend"}, "y": 0.6, "yanchor": "top"}, "template": {"data": {"barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "barpolar"}], "bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "bar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram": [{"marker": {"pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "histogram"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatter": [{"fillpattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}, "type": "scatter"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "title": {"text": "Number of Bounding Boxes Per Image", "x": 0.5, "xanchor": "center"}, "xaxis": {"anchor": "y", "domain": [0.0, 1.0], "dtick": 0.05, "fixedrange": true, "gridcolor": "black", "linecolor": "black", "range": [0, 0.4], "showgrid": false}, "yaxis": {"anchor": "x", "autorange": true, "color": "black", "domain": [0.9200000000000002, 1.0], "fixedrange": true, "rangemode": "normal", "showgrid": false, "showline": false, "showticklabels": false, "zeroline": false}, "xaxis2": {"anchor": "y2", "domain": [0.0, 1.0], "range": [-3.4000000000000004, 20.4], "tickmode": "array", "ticks": "outside", "tickvals": {"dtype": "float64", "shape": [16]}}, "yaxis2": {"anchor": "x2", "autorange": true, "domain": [0.0, 0.7200000000000001], "fixedrange": true, "rangemode": "normal", "title": {"text": "Frequency"}}}, "_py2js_addTraces": {}, "_py2js_animate": {}, "_py2js_deleteTraces": {}, "_py2js_moveTraces": {}, "_py2js_relayout": {}, "_py2js_removeLayoutProps": {}, "_py2js_removeTraceProps": {}, "_py2js_restyle": {}, "_py2js_update": {}, "_view_count": 0}, "buffers": [{"encoding": "base64", "path": ["_data", 1, "x", "buffer"], "data": "AAAAAAAAAAAAAAAAAADwPwAAAAAAAABAAAAAAAAACEAAAAAAAAAQQAAAAAAAABRAAAAAAAAAGEAAAAAAAAAcQAAAAAAAACBAAAAAAAAAIkAAAAAAAAAkQAAAAAAAACZAAAAAAAAAKEAAAAAAAAAqQAAAAAAAACxAAAAAAAAAMUA="}, {"encoding": "base64", "path": ["_data", 1, "y", "buffer"], "data": "uQXWM9lxwj+dKnJlbYjHP8QL/wYiscc/ZCELWchCxj8Bpj7fmuW2P7kF1jPZcbI/gU8OlwGfrD+5BdYz2XGiPx2Boq0Gz5E/AaY+35rlhj8dgaKtBs+BP4+TcMZQWoQ/crgM+ORweT+Pk3DGUFpkP4+TcMZQWmQ/j5NwxlBaVD8="}, {"encoding": "base64", "path": ["_data", 2, "x", "buffer"], "data": "AAAAAAAAAAAAAAAAAADwPwAAAAAAAABAAAAAAAAACEAAAAAAAAAQQAAAAAAAABRAAAAAAAAAGEAAAAAAAAAcQAAAAAAAACBAAAAAAAAAIkAAAAAAAAAkQAAAAAAAACZAAAAAAAAAKEAAAAAAAAAqQAAAAAAAACxAAAAAAAAAMUA="}, {"encoding": "base64", "path": ["_data", 2, "y", "buffer"], "data": "F2zBFmzBxj8cx3Ecx3HMPxdswRZswbY/2IIt2IItyD8RERERERHBPxdswRZswaY/HMdxHMdxrD8RERERERGhPxdswRZswYY/F2zBFmzBlj8XbMEWbMGGPxdswRZswYY/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="}, {"encoding": "base64", "path": ["_layout", "xaxis2", "tickvals", "buffer"], "data": "AAAAAAAAAAAAAAAAAADwPwAAAAAAAABAAAAAAAAACEAAAAAAAAAQQAAAAAAAABRAAAAAAAAAGEAAAAAAAAAcQAAAAAAAACBAAAAAAAAAIkAAAAAAAAAkQAAAAAAAACZAAAAAAAAAKEAAAAAAAAAqQAAAAAAAACxAAAAAAAAAMUA="}]}, "1a66704841e24224b6a4fc6b4ae7995f": {"model_name": "FigureModel", "model_module": "jupyterlab-plotly", "model_module_version": "^5.11.0", "state": {"_config": {"plotlyServerURL": "https://plot.ly"}, "_data": [{"base": 0, "marker": {"color": "#01B8AA"}, "offsetgroup": "0", "orientation": "h", "showlegend": false, "x": [0], "xaxis": "x", "y": ["Drift Score"], "yaxis": "y", "type": "bar", "uid": "51be857e-cfa6-4430-999a-737c8bea5036"}, {"marker": {"color": "#00008b"}, "name": "Train Dataset", "x": ["Tomato"], "xaxis": "x2", "y": {"dtype": "float64", "shape": [1]}, "yaxis": "y2", "type": "bar", "uid": "4fdfee64-f448-4f36-b2bd-17de69f4ba07"}, {"marker": {"color": "#69b3a2"}, "name": "Test Dataset", "x": ["Tomato"], "xaxis": "x2", "y": {"dtype": "float64", "shape": [1]}, "yaxis": "y2", "type": "bar", "uid": "0408679f-36e8-4cbc-a4b0-ca23b110c414"}], "_dom_classes": [], "_js2py_layoutDelta": {}, "_js2py_pointsCallback": {}, "_js2py_relayout": {}, "_js2py_restyle": {}, "_js2py_traceDeltas": {}, "_js2py_update": {}, "_layout": {"annotations": [{"font": {"size": 16}, "showarrow": false, "text": "Drift Score (Cramer's V)", "x": 0.5, "xanchor": "center", "xref": "paper", "y": 1.0000000000000002, "yanchor": "bottom", "yref": "paper"}, {"font": {"size": 16}, "showarrow": false, "text": "Distribution Plot", "x": 0.5, "xanchor": "center", "xref": "paper", "y": 0.7200000000000001, "yanchor": "bottom", "yref": "paper"}], "bargroupgap": 0, "height": 400, "legend": {"title": {"text": "Legend"}, "y": 0.6, "yanchor": "top"}, "template": {"data": {"barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "barpolar"}], "bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "bar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram": [{"marker": {"pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "histogram"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatter": [{"fillpattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}, "type": "scatter"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "title": {"text": "Samples Per Class", "x": 0.5, "xanchor": "center"}, "xaxis": {"anchor": "y", "domain": [0.0, 1.0], "dtick": 0.05, "fixedrange": true, "gridcolor": "black", "linecolor": "black", "range": [0, 0.4], "showgrid": false}, "yaxis": {"anchor": "x", "autorange": true, "color": "black", "domain": [0.9200000000000002, 1.0], "fixedrange": true, "rangemode": "normal", "showgrid": false, "showline": false, "showticklabels": false, "zeroline": false}, "xaxis2": {"anchor": "y2", "domain": [0.0, 1.0], "range": [-3, 3], "type": "category"}, "yaxis2": {"anchor": "x2", "autorange": true, "domain": [0.0, 0.7200000000000001], "fixedrange": true, "rangemode": "normal", "title": {"text": "Frequency"}}}, "_py2js_addTraces": {}, "_py2js_animate": {}, "_py2js_deleteTraces": {}, "_py2js_moveTraces": {}, "_py2js_relayout": {}, "_py2js_removeLayoutProps": {}, "_py2js_removeTraceProps": {}, "_py2js_restyle": {}, "_py2js_update": {}, "_view_count": 0}, "buffers": [{"encoding": "base64", "path": ["_data", 1, "y", "buffer"], "data": "AAAAAAAA8D8="}, {"encoding": "base64", "path": ["_data", 2, "y", "buffer"], "data": "AAAAAAAA8D8="}]}, "c1b66f428c80446686003e1cdfefb02b": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_fcd92d2c4b024af481fda15b41e0ad63", "style": "IPY_MODEL_94d218c0b8eb45809e731c219925c5c8", "value": "<br><a href=\"#summary_UH17J8QO09VS9KKH4A3YJTU7F-section-I3DO7\" style=\"font-size: 14px;\">Go to top</a>"}}, "fcd92d2c4b024af481fda15b41e0ad63": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "94d218c0b8eb45809e731c219925c5c8": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "ba478d7ef0314e0391d077e20ab85c80": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "9f81095bb1be4c71874a0bb700022d55": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "8c83f3758d9248249b26db8dfa9f69b9": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "1bccb623c6cb4a73b5113eb08b2d5cc8": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "26d7ebc7c75f439b8a7d4b18ef6a6af3": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "4f693f4d8d344bcf81b6e8350428a36c": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_99449a5863144537a11019cc61e32bd2", "IPY_MODEL_386deea2220f4e6ba627817edf85dc2b"], "layout": "IPY_MODEL_7a494f2d10ca417d9889a07e57a25f2e"}}, "99449a5863144537a11019cc61e32bd2": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_b46a338bee694b2aa79c3878ba22b392", "style": "IPY_MODEL_dd9b1f118ae24cce89b45f65c08e8048", "value": "<span id=\"summary_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\"></span>"}}, "b46a338bee694b2aa79c3878ba22b392": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "dd9b1f118ae24cce89b45f65c08e8048": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "386deea2220f4e6ba627817edf85dc2b": {"model_name": "AccordionModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "_titles": {"0": "Other"}, "children": ["IPY_MODEL_2be686f8b5d7462eb7920874eff825ec"], "layout": "IPY_MODEL_c01dd50850c849579f2648118f4a8967", "selected_index": null}}, "2be686f8b5d7462eb7920874eff825ec": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_380d14bab9934822ba4a23cbe35c8772", "IPY_MODEL_505eb0963b134d36bc2f07e30d78712a", "IPY_MODEL_d28ce70c458c48d7b128a59ad5281e9d", "IPY_MODEL_eec85f24476d4ffba6f1a495c655625f", "IPY_MODEL_2c0b9edb2810405a85c3606ac982b117", "IPY_MODEL_eec85f24476d4ffba6f1a495c655625f", "IPY_MODEL_6d4a956b810f44c8b62fa7214432a543", "IPY_MODEL_eec85f24476d4ffba6f1a495c655625f", "IPY_MODEL_304c189a5b694c3fa1bed026575147ee"], "layout": "IPY_MODEL_78a380f9743a4eff8efcab98623210b6"}}, "380d14bab9934822ba4a23cbe35c8772": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_08bf1ca8fcad4ec59b347cdd57e054b9", "style": "IPY_MODEL_449fb21b07c54b1d942b8bef9029d0f5", "value": "<style type=\"text/css\">\n#T_bb5c1_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_bb5c1_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_bb5c1_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_bb5c1_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_bb5c1_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_bb5c1_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Check</th>\n      <th class=\"col_heading level0 col1\" >Summary</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_bb5c1_row0_col0\" class=\"data row0 col0\" ><a href=\"#MeanAverageRecallReport-TestDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\">Mean Average Recall Report - Test Dataset</a></td>\n      <td id=\"T_bb5c1_row0_col1\" class=\"data row0 col1\" >Summarize mean average recall metrics on a dataset and model per detections and area range. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_mean_average_recall_report.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></td>\n    </tr>\n    <tr>\n      <td id=\"T_bb5c1_row1_col0\" class=\"data row1 col0\" ><a href=\"#MeanAverageRecallReport-TrainDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\">Mean Average Recall Report - Train Dataset</a></td>\n      <td id=\"T_bb5c1_row1_col1\" class=\"data row1 col1\" >Summarize mean average recall metrics on a dataset and model per detections and area range. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_mean_average_recall_report.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></td>\n    </tr>\n    <tr>\n      <td id=\"T_bb5c1_row2_col0\" class=\"data row2 col0\" ><a href=\"#ConfusionMatrix-TestDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\">Confusion Matrix - Test Dataset</a></td>\n      <td id=\"T_bb5c1_row2_col1\" class=\"data row2 col1\" >Calculate the confusion matrix of the model on the given dataset. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_confusion_matrix.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></td>\n    </tr>\n    <tr>\n      <td id=\"T_bb5c1_row3_col0\" class=\"data row3 col0\" ><a href=\"#ConfusionMatrix-TrainDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\">Confusion Matrix - Train Dataset</a></td>\n      <td id=\"T_bb5c1_row3_col1\" class=\"data row3 col1\" >Calculate the confusion matrix of the model on the given dataset. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_confusion_matrix.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></td>\n    </tr>\n  </tbody>\n</table>\n"}}, "08bf1ca8fcad4ec59b347cdd57e054b9": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "449fb21b07c54b1d942b8bef9029d0f5": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "505eb0963b134d36bc2f07e30d78712a": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_36be2255cbcb4562bb085436c2c99942", "style": "IPY_MODEL_6ebeafe5f528482cb6238c2bfe4ebd7b", "value": "<hr style=\"background-color: #eee;border: 0 none;color: #eee;height: 4px;\">"}}, "36be2255cbcb4562bb085436c2c99942": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "6ebeafe5f528482cb6238c2bfe4ebd7b": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "d28ce70c458c48d7b128a59ad5281e9d": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "children": ["IPY_MODEL_1fc1eb8e9a2c4529a03b9b3a717a23b7", "IPY_MODEL_0920a50501cf4e4ea052acdb087bc3ed", "IPY_MODEL_6d8df1de610745a2a87a58c0fe2eea5c"], "layout": "IPY_MODEL_202ee2d190a841449ce1bc2ecb3a3d1e"}}, "1fc1eb8e9a2c4529a03b9b3a717a23b7": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_d16d96f581ff45bfb5017a533edc2ef0", "style": "IPY_MODEL_5ffc1db904bc4dd0bc2875b4a4b7b2c8", "value": "<h4 id=\"MeanAverageRecallReport-TestDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\"><b>Mean Average Recall Report - Test Dataset</b></h4>"}}, "d16d96f581ff45bfb5017a533edc2ef0": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "5ffc1db904bc4dd0bc2875b4a4b7b2c8": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "0920a50501cf4e4ea052acdb087bc3ed": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_387122d56ee845ca998a526547b38a77", "style": "IPY_MODEL_b3374f52ebf74f5ea3527d8eb6b1f450", "value": "<p>Summarize mean average recall metrics on a dataset and model per detections and area range. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_mean_average_recall_report.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"}}, "387122d56ee845ca998a526547b38a77": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "b3374f52ebf74f5ea3527d8eb6b1f450": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "6d8df1de610745a2a87a58c0fe2eea5c": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_496ba8f5d7a24740a846c52d9294622e", "IPY_MODEL_72393f8a763745f0af0df866e22232c1", "IPY_MODEL_1889ee5bdf3048e1a8a43a5cdbd3f4bd"], "layout": "IPY_MODEL_39408eda7d4d4fa1ad788bc4dd278411"}}, "496ba8f5d7a24740a846c52d9294622e": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_0055137135d54045bf945a60203f39dc", "style": "IPY_MODEL_14ffb862954f4948bd1bb9b8387d6125", "value": "<h5><b>Additional Outputs</b></h5>"}}, "0055137135d54045bf945a60203f39dc": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "14ffb862954f4948bd1bb9b8387d6125": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "72393f8a763745f0af0df866e22232c1": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_0573d17c5cf04d04bf93f7fdce4d6f03", "style": "IPY_MODEL_3d6a4ba9c53c48e19d2b6876911e6003", "value": "<style type=\"text/css\">\n#T_5422b_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_5422b_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_5422b_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_5422b_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_5422b_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_5422b_\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th class=\"col_heading level0 col0\" >AR@1 (%)</th>\n      <th class=\"col_heading level0 col1\" >AR@10 (%)</th>\n      <th class=\"col_heading level0 col2\" >AR@100 (%)</th>\n    </tr>\n    <tr>\n      <th class=\"index_name level0\" >Area size</th>\n      <th class=\"blank col0\" >&nbsp;</th>\n      <th class=\"blank col1\" >&nbsp;</th>\n      <th class=\"blank col2\" >&nbsp;</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_5422b_level0_row0\" class=\"row_heading level0 row0\" >All</th>\n      <td id=\"T_5422b_row0_col0\" class=\"data row0 col0\" >0.02</td>\n      <td id=\"T_5422b_row0_col1\" class=\"data row0 col1\" >0.04</td>\n      <td id=\"T_5422b_row0_col2\" class=\"data row0 col2\" >0.04</td>\n    </tr>\n    <tr>\n      <th id=\"T_5422b_level0_row1\" class=\"row_heading level0 row1\" >Small (area < 32^2)</th>\n      <td id=\"T_5422b_row1_col0\" class=\"data row1 col0\" >0.00</td>\n      <td id=\"T_5422b_row1_col1\" class=\"data row1 col1\" >0.01</td>\n      <td id=\"T_5422b_row1_col2\" class=\"data row1 col2\" >0.01</td>\n    </tr>\n    <tr>\n      <th id=\"T_5422b_level0_row2\" class=\"row_heading level0 row2\" >Medium (32^2 < area < 96^2)</th>\n      <td id=\"T_5422b_row2_col0\" class=\"data row2 col0\" >0.07</td>\n      <td id=\"T_5422b_row2_col1\" class=\"data row2 col1\" >0.17</td>\n      <td id=\"T_5422b_row2_col2\" class=\"data row2 col2\" >0.17</td>\n    </tr>\n    <tr>\n      <th id=\"T_5422b_level0_row3\" class=\"row_heading level0 row3\" >Large (area < 96^2)</th>\n      <td id=\"T_5422b_row3_col0\" class=\"data row3 col0\" >0.00</td>\n      <td id=\"T_5422b_row3_col1\" class=\"data row3 col1\" >0.00</td>\n      <td id=\"T_5422b_row3_col2\" class=\"data row3 col2\" >0.00</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "0573d17c5cf04d04bf93f7fdce4d6f03": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "3d6a4ba9c53c48e19d2b6876911e6003": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "1889ee5bdf3048e1a8a43a5cdbd3f4bd": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_1de669e0e23d4d4488f648c75b4ea0af", "style": "IPY_MODEL_ad2d94742adc4048b182c3fb5f8e4f6b", "value": "<br><a href=\"#summary_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\" style=\"font-size: 14px;\">Go to top</a>"}}, "1de669e0e23d4d4488f648c75b4ea0af": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "ad2d94742adc4048b182c3fb5f8e4f6b": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "39408eda7d4d4fa1ad788bc4dd278411": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "202ee2d190a841449ce1bc2ecb3a3d1e": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "eec85f24476d4ffba6f1a495c655625f": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_f26be16655464844b8b5990e7a3f98f3", "style": "IPY_MODEL_2043364f37e54ed8a36aaf35abdf75d2", "value": "<hr style=\"background-color: #eee;border: 0 none;color: #eee;height: 4px;\">"}}, "f26be16655464844b8b5990e7a3f98f3": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "2043364f37e54ed8a36aaf35abdf75d2": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "2c0b9edb2810405a85c3606ac982b117": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "children": ["IPY_MODEL_e17ae38ccf694298a6526d8394e906ba", "IPY_MODEL_d38634f23e2b4319bd7a904e5c3dded8", "IPY_MODEL_e5edd4543e8845e8b7a3afc261f8fc8e"], "layout": "IPY_MODEL_05ccd6d24b124c338dbc68bd6a1ea795"}}, "e17ae38ccf694298a6526d8394e906ba": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_9c8e5e38a5d341629142d65a8ccfa2c0", "style": "IPY_MODEL_e31c1d28f4a946a1b4c0141aa124bafb", "value": "<h4 id=\"MeanAverageRecallReport-TrainDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\"><b>Mean Average Recall Report - Train Dataset</b></h4>"}}, "9c8e5e38a5d341629142d65a8ccfa2c0": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "e31c1d28f4a946a1b4c0141aa124bafb": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "d38634f23e2b4319bd7a904e5c3dded8": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_b5382b99d23b4072bdf94262097fe643", "style": "IPY_MODEL_c88512900b114ea3a414c5996e8be402", "value": "<p>Summarize mean average recall metrics on a dataset and model per detections and area range. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_mean_average_recall_report.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"}}, "b5382b99d23b4072bdf94262097fe643": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "c88512900b114ea3a414c5996e8be402": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "e5edd4543e8845e8b7a3afc261f8fc8e": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_dff32552bab4497da345b99b4356f931", "IPY_MODEL_eaa43262b2ae498489de2e053ccbeee3", "IPY_MODEL_f36e5cafd96a4ccd9157c08260728c3c"], "layout": "IPY_MODEL_9e73085f4f3847ac8fc5d5794892157d"}}, "dff32552bab4497da345b99b4356f931": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_18da7a01f4c94f60bdb7e0578d29780f", "style": "IPY_MODEL_e9b8b88f549c49d9a8e7244194127fc6", "value": "<h5><b>Additional Outputs</b></h5>"}}, "18da7a01f4c94f60bdb7e0578d29780f": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "e9b8b88f549c49d9a8e7244194127fc6": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "eaa43262b2ae498489de2e053ccbeee3": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_610b88c8422345d7acd854d57130ac89", "style": "IPY_MODEL_75d1fb1a1c3a4cf9a2986a5712321a5e", "value": "<style type=\"text/css\">\n#T_8eb13_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_8eb13_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_8eb13_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_8eb13_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_8eb13_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_8eb13_\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th class=\"col_heading level0 col0\" >AR@1 (%)</th>\n      <th class=\"col_heading level0 col1\" >AR@10 (%)</th>\n      <th class=\"col_heading level0 col2\" >AR@100 (%)</th>\n    </tr>\n    <tr>\n      <th class=\"index_name level0\" >Area size</th>\n      <th class=\"blank col0\" >&nbsp;</th>\n      <th class=\"blank col1\" >&nbsp;</th>\n      <th class=\"blank col2\" >&nbsp;</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_8eb13_level0_row0\" class=\"row_heading level0 row0\" >All</th>\n      <td id=\"T_8eb13_row0_col0\" class=\"data row0 col0\" >0.02</td>\n      <td id=\"T_8eb13_row0_col1\" class=\"data row0 col1\" >0.06</td>\n      <td id=\"T_8eb13_row0_col2\" class=\"data row0 col2\" >0.06</td>\n    </tr>\n    <tr>\n      <th id=\"T_8eb13_level0_row1\" class=\"row_heading level0 row1\" >Small (area < 32^2)</th>\n      <td id=\"T_8eb13_row1_col0\" class=\"data row1 col0\" >0.00</td>\n      <td id=\"T_8eb13_row1_col1\" class=\"data row1 col1\" >0.01</td>\n      <td id=\"T_8eb13_row1_col2\" class=\"data row1 col2\" >0.01</td>\n    </tr>\n    <tr>\n      <th id=\"T_8eb13_level0_row2\" class=\"row_heading level0 row2\" >Medium (32^2 < area < 96^2)</th>\n      <td id=\"T_8eb13_row2_col0\" class=\"data row2 col0\" >0.09</td>\n      <td id=\"T_8eb13_row2_col1\" class=\"data row2 col1\" >0.22</td>\n      <td id=\"T_8eb13_row2_col2\" class=\"data row2 col2\" >0.22</td>\n    </tr>\n    <tr>\n      <th id=\"T_8eb13_level0_row3\" class=\"row_heading level0 row3\" >Large (area < 96^2)</th>\n      <td id=\"T_8eb13_row3_col0\" class=\"data row3 col0\" >0.00</td>\n      <td id=\"T_8eb13_row3_col1\" class=\"data row3 col1\" >0.02</td>\n      <td id=\"T_8eb13_row3_col2\" class=\"data row3 col2\" >0.02</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "610b88c8422345d7acd854d57130ac89": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "75d1fb1a1c3a4cf9a2986a5712321a5e": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "f36e5cafd96a4ccd9157c08260728c3c": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_88da51f0f339425e90d17fb3a229b929", "style": "IPY_MODEL_5679bec52a964d23b54df031edf5c3d9", "value": "<br><a href=\"#summary_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\" style=\"font-size: 14px;\">Go to top</a>"}}, "88da51f0f339425e90d17fb3a229b929": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "5679bec52a964d23b54df031edf5c3d9": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "9e73085f4f3847ac8fc5d5794892157d": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "05ccd6d24b124c338dbc68bd6a1ea795": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "6d4a956b810f44c8b62fa7214432a543": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "children": ["IPY_MODEL_7a00523dcbe74e059a14b08515cb9328", "IPY_MODEL_002e253ef79940d985241be5357ad394", "IPY_MODEL_d7db4e3f5c5c4a04b180e4f6c0ce8541"], "layout": "IPY_MODEL_136a606ee33c4de8af7eebe568f00ecc"}}, "7a00523dcbe74e059a14b08515cb9328": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_17cfa470e79c4215b2e3a6cf70fd209e", "style": "IPY_MODEL_2b7e2053216c4953ac403da8fda54b7a", "value": "<h4 id=\"ConfusionMatrix-TestDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\"><b>Confusion Matrix - Test Dataset</b></h4>"}}, "17cfa470e79c4215b2e3a6cf70fd209e": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "2b7e2053216c4953ac403da8fda54b7a": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "002e253ef79940d985241be5357ad394": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_3e9e16ce569b4fb78e15dc547d4dc6b9", "style": "IPY_MODEL_603350763bd149d08c51b65d57c87600", "value": "<p>Calculate the confusion matrix of the model on the given dataset. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_confusion_matrix.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"}}, "3e9e16ce569b4fb78e15dc547d4dc6b9": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "603350763bd149d08c51b65d57c87600": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "d7db4e3f5c5c4a04b180e4f6c0ce8541": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_b11a2053b32c40a28948e341045c329b", "IPY_MODEL_bad9b2b523cc4734a6e94a2500341115", "IPY_MODEL_094ba49c7f0a42069790d8749d1679d1", "IPY_MODEL_4e6580f28e6348ddb7c3696fca1245d0", "IPY_MODEL_d17f52033c944d4cbf4dbd98ec03bfdd"], "layout": "IPY_MODEL_8c5396ca1faf4d8dab2ad47a47979c4d"}}, "b11a2053b32c40a28948e341045c329b": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_e3d116ebd2fc4f8b85161b3002438a33", "style": "IPY_MODEL_fca0c59cddab49dd97f32cdade588046", "value": "<h5><b>Additional Outputs</b></h5>"}}, "e3d116ebd2fc4f8b85161b3002438a33": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "fca0c59cddab49dd97f32cdade588046": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "bad9b2b523cc4734a6e94a2500341115": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_729031775ada4cbd816b0231ccae99a3", "style": "IPY_MODEL_705a20a1e02f4457ba201b9697882181", "value": "<div>Showing 10 of 1 classes:</div>"}}, "729031775ada4cbd816b0231ccae99a3": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "705a20a1e02f4457ba201b9697882181": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "094ba49c7f0a42069790d8749d1679d1": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_7a982b83daf84ea397d928bccba5c03b", "style": "IPY_MODEL_7f85905b25014c45bdb252a5c1ea2468", "value": "<div>\"No overlapping\" categories are labels and prediction which did not have a matching label/prediction.<br>For example a predictions that did not have a sufficiently overlapping label bounding box will appear under \"No overlapping\" category in the True Value axis (y-axis).</div>"}}, "7a982b83daf84ea397d928bccba5c03b": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "7f85905b25014c45bdb252a5c1ea2468": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "4e6580f28e6348ddb7c3696fca1245d0": {"model_name": "FigureModel", "model_module": "jupyterlab-plotly", "model_module_version": "^5.11.0", "state": {"_config": {"plotlyServerURL": "https://plot.ly"}, "_data": [{"colorbar": {"title": {"text": "% out of<br>True Values"}}, "text": [[49.0, 369.0], [84.0, 0.0]], "texttemplate": "%{z}%<br>(%{text})", "x": ["Tomato", "No overlapping"], "y": ["Tomato", "No overlapping"], "z": [["11.72", "88.28"], ["100", "0"]], "type": "heatmap", "uid": "ce4b316d-b237-406c-a9aa-919eea122b29"}], "_dom_classes": [], "_js2py_layoutDelta": {}, "_js2py_pointsCallback": {}, "_js2py_relayout": {}, "_js2py_restyle": {}, "_js2py_traceDeltas": {}, "_js2py_update": {}, "_layout": {"height": 600, "template": {"data": {"barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "barpolar"}], "bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "bar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram": [{"marker": {"pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "histogram"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatter": [{"fillpattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}, "type": "scatter"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "title": {"text": "Percent Out of True Values (Count)"}, "xaxis": {"constrain": "domain", "scaleanchor": "y", "title": {"text": "Predicted Value"}, "type": "category"}, "yaxis": {"autorange": "reversed", "constrain": "domain", "title": {"text": "True value"}, "type": "category"}}, "_py2js_addTraces": {}, "_py2js_animate": {}, "_py2js_deleteTraces": {}, "_py2js_moveTraces": {}, "_py2js_relayout": {}, "_py2js_removeLayoutProps": {}, "_py2js_removeTraceProps": {}, "_py2js_restyle": {}, "_py2js_update": {}, "_view_count": 0}}, "d17f52033c944d4cbf4dbd98ec03bfdd": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_3372599274304a0d88398c9d2da794c8", "style": "IPY_MODEL_24a6781f5d314b59bc0a15f5da54018a", "value": "<br><a href=\"#summary_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\" style=\"font-size: 14px;\">Go to top</a>"}}, "3372599274304a0d88398c9d2da794c8": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "24a6781f5d314b59bc0a15f5da54018a": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "8c5396ca1faf4d8dab2ad47a47979c4d": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "136a606ee33c4de8af7eebe568f00ecc": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "304c189a5b694c3fa1bed026575147ee": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "children": ["IPY_MODEL_a15542b1fad646e19a04a5c9d1906943", "IPY_MODEL_d0823aaca5fb47ff95a99617b32cb511", "IPY_MODEL_053ef878ac8448ae808fa7817e4fcd0b"], "layout": "IPY_MODEL_ece37ad926c14a7da2089b8eb7d6aff5"}}, "a15542b1fad646e19a04a5c9d1906943": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_095822ceeed7406fab91c7fbd5dd8969", "style": "IPY_MODEL_47e869ae5fbd472e8a87a62abf4ed84b", "value": "<h4 id=\"ConfusionMatrix-TrainDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\"><b>Confusion Matrix - Train Dataset</b></h4>"}}, "095822ceeed7406fab91c7fbd5dd8969": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "47e869ae5fbd472e8a87a62abf4ed84b": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "d0823aaca5fb47ff95a99617b32cb511": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_8ad2fa56ff914c44a091bc4eec7bf65f", "style": "IPY_MODEL_14e0322a266c4762ab6d5bed93c7a831", "value": "<p>Calculate the confusion matrix of the model on the given dataset. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_confusion_matrix.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"}}, "8ad2fa56ff914c44a091bc4eec7bf65f": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "14e0322a266c4762ab6d5bed93c7a831": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "053ef878ac8448ae808fa7817e4fcd0b": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_06542b00d74f4ae0a5b5858828d515c1", "IPY_MODEL_1b1b3450b72f44d48b7d58982b113a33", "IPY_MODEL_6bd51b0416464049af6dd8cc6190b945", "IPY_MODEL_45977467890849008d41ea193711c81b", "IPY_MODEL_1bdf49f934b9489cb5a9bae8fe89aadf"], "layout": "IPY_MODEL_572ecc091d61468c9a52a5af22393bf0"}}, "06542b00d74f4ae0a5b5858828d515c1": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_41b92c93d46f41ae83823e4236c2f145", "style": "IPY_MODEL_bd7b0b49ad7d4a9287e77d52e173a301", "value": "<h5><b>Additional Outputs</b></h5>"}}, "41b92c93d46f41ae83823e4236c2f145": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "bd7b0b49ad7d4a9287e77d52e173a301": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "1b1b3450b72f44d48b7d58982b113a33": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_49f21bc03d7c42eca02e8ef533825516", "style": "IPY_MODEL_b64af2b7e7a143b787c4d15c6454ce43", "value": "<div>Showing 10 of 1 classes:</div>"}}, "49f21bc03d7c42eca02e8ef533825516": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "b64af2b7e7a143b787c4d15c6454ce43": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "6bd51b0416464049af6dd8cc6190b945": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_dc57d04e1bc6497c8bee857c316b5e18", "style": "IPY_MODEL_33f4f2451a424cec90f5bd4d991a5b4d", "value": "<div>\"No overlapping\" categories are labels and prediction which did not have a matching label/prediction.<br>For example a predictions that did not have a sufficiently overlapping label bounding box will appear under \"No overlapping\" category in the True Value axis (y-axis).</div>"}}, "dc57d04e1bc6497c8bee857c316b5e18": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "33f4f2451a424cec90f5bd4d991a5b4d": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "45977467890849008d41ea193711c81b": {"model_name": "FigureModel", "model_module": "jupyterlab-plotly", "model_module_version": "^5.11.0", "state": {"_config": {"plotlyServerURL": "https://plot.ly"}, "_data": [{"colorbar": {"title": {"text": "% out of<br>True Values"}}, "text": [[535.0, 3527.0], [958.0, 0.0]], "texttemplate": "%{z}%<br>(%{text})", "x": ["Tomato", "No overlapping"], "y": ["Tomato", "No overlapping"], "z": [["13.17", "86.83"], ["100", "0"]], "type": "heatmap", "uid": "3bd5277a-ced1-42ae-a2ab-b9017c44b8f2"}], "_dom_classes": [], "_js2py_layoutDelta": {}, "_js2py_pointsCallback": {}, "_js2py_relayout": {}, "_js2py_restyle": {}, "_js2py_traceDeltas": {}, "_js2py_update": {}, "_layout": {"height": 600, "template": {"data": {"barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "barpolar"}], "bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "bar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram": [{"marker": {"pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "histogram"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatter": [{"fillpattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}, "type": "scatter"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "title": {"text": "Percent Out of True Values (Count)"}, "xaxis": {"constrain": "domain", "scaleanchor": "y", "title": {"text": "Predicted Value"}, "type": "category"}, "yaxis": {"autorange": "reversed", "constrain": "domain", "title": {"text": "True value"}, "type": "category"}}, "_py2js_addTraces": {}, "_py2js_animate": {}, "_py2js_deleteTraces": {}, "_py2js_moveTraces": {}, "_py2js_relayout": {}, "_py2js_removeLayoutProps": {}, "_py2js_removeTraceProps": {}, "_py2js_restyle": {}, "_py2js_update": {}, "_view_count": 0}}, "1bdf49f934b9489cb5a9bae8fe89aadf": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_7ed067e7d6c74a0d9540921625e38a56", "style": "IPY_MODEL_6874593613b442f1917f24d5163a0741", "value": "<br><a href=\"#summary_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\" style=\"font-size: 14px;\">Go to top</a>"}}, "7ed067e7d6c74a0d9540921625e38a56": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "6874593613b442f1917f24d5163a0741": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "572ecc091d61468c9a52a5af22393bf0": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "ece37ad926c14a7da2089b8eb7d6aff5": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "78a380f9743a4eff8efcab98623210b6": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "c01dd50850c849579f2648118f4a8967": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "7a494f2d10ca417d9889a07e57a25f2e": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "eef7c39fa4154017b00aa4ae8715eceb": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_9404b01b2cbd4312bd0bca66c3f6bb74", "IPY_MODEL_637df1f16daf48509e92c8d6eeee096e"], "layout": "IPY_MODEL_ea811eafe8164746977ee56b1cf19c58"}}, "9404b01b2cbd4312bd0bca66c3f6bb74": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_023943b3427747869e10a989ea6a6004", "style": "IPY_MODEL_7943659d23cb4881b1fb85cc62be4824"}}, "023943b3427747869e10a989ea6a6004": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "7943659d23cb4881b1fb85cc62be4824": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "637df1f16daf48509e92c8d6eeee096e": {"model_name": "AccordionModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "_titles": {"0": "Didn't Run"}, "children": ["IPY_MODEL_870db4e41f1344b6af4ec59a173df3d4"], "layout": "IPY_MODEL_36750c26eddc4afe9be4ddea773a6079", "selected_index": null}}, "870db4e41f1344b6af4ec59a173df3d4": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_2ffd6309acf249569b2b6cde72c71532", "style": "IPY_MODEL_fdfc8506df6d403d8b7120725d1b1917", "value": "<style type=\"text/css\">\n#T_d3efe_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_d3efe_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_d3efe_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_d3efe_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_d3efe_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_d3efe_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Check</th>\n      <th class=\"col_heading level0 col1\" >Reason</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_d3efe_row0_col0\" class=\"data row0 col0\" >Simple Model Comparison</td>\n      <td id=\"T_d3efe_row0_col1\" class=\"data row0 col1\" >Check is irrelevant for task of type TaskType.OBJECT_DETECTION</td>\n    </tr>\n    <tr>\n      <td id=\"T_d3efe_row1_col0\" class=\"data row1 col0\" >Model Error Analysis</td>\n      <td id=\"T_d3efe_row1_col1\" class=\"data row1 col1\" >DeepchecksProcessError: Unable to train meaningful error model (r^2 score: 0.2)</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "2ffd6309acf249569b2b6cde72c71532": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "fdfc8506df6d403d8b7120725d1b1917": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "36750c26eddc4afe9be4ddea773a6079": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "ea811eafe8164746977ee56b1cf19c58": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "29845e447fd948e3886f28ddb60afc66": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "002a2a83f1ed43a28ec9b7661d71b37a": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}}}
    </script>
    <script type="application/vnd.jupyter.widget-view+json">
    {"version_major": 2, "version_minor": 0, "model_id": "f1723ff20be5431d823116366989063b"}
    </script>

    </body>
    </html>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  28.883 seconds)


.. _sphx_glr_download_user-guide_vision_auto_quickstarts_plot_detection_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_detection_tutorial.py <plot_detection_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_detection_tutorial.ipynb <plot_detection_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
