
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "user-guide/vision/auto_quickstarts/plot_detection_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_user-guide_vision_auto_quickstarts_plot_detection_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_user-guide_vision_auto_quickstarts_plot_detection_tutorial.py:


.. _vision_detection_tutorial:

==========================
Object Detection Tutorial
==========================

In this tutorial, you will learn how to validate your **object detection model** using deepchecks test suites.
You can read more about the different checks and suites for computer vision use cases at the
:doc:`examples section  </checks_gallery/vision/index>`

If you just want to see the output of this tutorial, jump to the :ref:`observing the results <vision_segmentation_tutorial__observing_the_result>` section.

An object detection tasks usually consist of two parts:

- Object Localization, where the model predicts the location of an object in the image,
- Object Classification, where the model predicts the class of the detected object.

The common output of an object detection model is a list of bounding boxes around the objects, and
their classes.

.. code-block:: bash

    # Before we start, if you don't have deepchecks vision package installed yet, run:
    import sys
    !{sys.executable} -m pip install "deepchecks[vision]" --quiet --upgrade # --user

    # or install using pip from your python environment

.. GENERATED FROM PYTHON SOURCE LINES 32-34

Defining the data and model
===========================

.. GENERATED FROM PYTHON SOURCE LINES 34-56

.. code-block:: default


    # Importing the required packages
    import os
    import urllib.request
    import xml.etree.ElementTree as ET
    import zipfile
    from functools import partial

    import albumentations as A
    import matplotlib.pyplot as plt
    import numpy as np
    import torch
    import torchvision
    from albumentations.pytorch import ToTensorV2
    from PIL import Image
    from torch import nn
    from torch.utils.data import DataLoader, Dataset
    from torchvision.models.detection import _utils as det_utils
    from torchvision.models.detection.ssdlite import SSDLiteClassificationHead

    from deepchecks.vision.detection_data import DetectionData








.. GENERATED FROM PYTHON SOURCE LINES 57-68

Load Data
~~~~~~~~~
The model in this tutorial is used to detect tomatoes in images. The model is trained on a dataset consisted of
895 images of tomatoes, with bounding box annotations provided in PASCAL VOC format.
All annotations belong to a single class: tomato.

.. note::
    The dataset is available at the following link:
    https://www.kaggle.com/andrewmvd/tomato-detection

    We thank the authors of the dataset for providing the dataset.

.. GENERATED FROM PYTHON SOURCE LINES 68-141

.. code-block:: default


    url = 'https://figshare.com/ndownloader/files/34488599'
    urllib.request.urlretrieve(url, 'tomato-detection.zip')

    with zipfile.ZipFile('tomato-detection.zip', 'r') as zip_ref:
        zip_ref.extractall('.')

    class TomatoDataset(Dataset):
        def __init__(self, root, transforms):
            self.root = root
            self.transforms = transforms

            self.images = list(sorted(os.listdir(os.path.join(root, 'images'))))
            self.annotations = list(sorted(os.listdir(os.path.join(root, 'annotations'))))

        def __getitem__(self, idx):
            img_path = os.path.join(self.root, "images", self.images[idx])
            ann_path = os.path.join(self.root, "annotations", self.annotations[idx])
            img = Image.open(img_path).convert("RGB")
            bboxes = []
            labels = []
            with open(ann_path, 'r') as f:
                tree = ET.parse(f)
                root = tree.getroot()
                size = root.find('size')
                w = int(size.find('width').text)
                h = int(size.find('height').text)

                for obj in root.iter('object'):
                    difficult = obj.find('difficult').text
                    if int(difficult) == 1:
                        continue
                    cls_id = 1
                    xmlbox = obj.find('bndbox')
                    b = [float(xmlbox.find('xmin').text), float(xmlbox.find('ymin').text), float(xmlbox.find('xmax').text),
                            float(xmlbox.find('ymax').text)]
                    bboxes.append(b)
                    labels.append(cls_id)

            bboxes = torch.as_tensor(np.array(bboxes), dtype=torch.float32)
            labels = torch.as_tensor(np.array(labels), dtype=torch.int64)

            if self.transforms is not None:
                res = self.transforms(image=np.array(img), bboxes=bboxes, class_labels=labels)

            target = {
                'boxes': [torch.Tensor(x) for x in res['bboxes']],
                'labels': res['class_labels']
            }

            img = res['image']

            return img, target

        def __len__(self):
            return len(self.images)

    data_transforms = A.Compose([
        A.Resize(height=256, width=256),
        A.CenterCrop(height=224, width=224),
        A.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)),
        ToTensorV2(),
    ], bbox_params=A.BboxParams(format='pascal_voc', label_fields=['class_labels']))

    dataset = TomatoDataset(root=os.path.join(os.path.curdir, 'tomato-detection/data'),
                            transforms=data_transforms)
    train_set, test_set = torch.utils.data.random_split(dataset,
                                                        [int(len(dataset)*0.9), len(dataset)-int(len(dataset)*0.9)],
                                                        generator=torch.Generator().manual_seed(42))
    test_set.transforms = A.Compose([ToTensorV2()])
    train_loader = DataLoader(train_set, batch_size=64, collate_fn=(lambda batch: tuple(zip(*batch))))
    test_loader = DataLoader(test_set, batch_size=64, collate_fn=(lambda batch: tuple(zip(*batch))))








.. GENERATED FROM PYTHON SOURCE LINES 142-145

Visualize a Few Images
~~~~~~~~~~~~~~~~~~~~~~
Let's visualize a few training images so as to understand the data augmentation.

.. GENERATED FROM PYTHON SOURCE LINES 145-180

.. code-block:: default


    def prepare(inp):
        """Imshow for Tensor."""
        inp = inp.numpy().transpose((1, 2, 0))
        mean = np.array([0.485, 0.456, 0.406])
        std = np.array([0.229, 0.224, 0.225])
        inp = std * inp + mean
        inp = np.clip(inp, 0, 1) * 255
        inp = inp.transpose((2,0,1))
        return torch.tensor(inp, dtype=torch.uint8)

    import torchvision.transforms.functional as F


    def show(imgs):
        if not isinstance(imgs, list):
            imgs = [imgs]
        fig, axs = plt.subplots(ncols=len(imgs), squeeze=False, figsize=(20,20))
        for i, img in enumerate(imgs):
            img = img.detach()
            img = F.to_pil_image(img)
            axs[0, i].imshow(np.asarray(img))
            axs[0, i].set(xticklabels=[], yticklabels=[], xticks=[], yticks=[])

    from torchvision.utils import draw_bounding_boxes

    data = next(iter(train_loader))
    inp, targets = data[0][:4], data[1][:4]


    result = [draw_bounding_boxes(prepare(inp[i]), torch.stack(targets[i]['boxes']),
                                  colors=['yellow'] * torch.stack(targets[i]['boxes']).shape[0], width=5)
              for i in range(len(targets))]
    show(result)




.. image-sg:: /user-guide/vision/auto_quickstarts/images/sphx_glr_plot_detection_tutorial_001.png
   :alt: plot detection tutorial
   :srcset: /user-guide/vision/auto_quickstarts/images/sphx_glr_plot_detection_tutorial_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 181-192

.. image :: /_static/images/tutorials/tomatoes.png
    :alt: Tomatoes with bbox

Downloading a Pre-trained Model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In this tutorial, we will download a pre-trained SSDlite model and a MobileNetV3 Large backbone
from the official PyTorch repository. For more details, please refer to the
`official documentation <https://pytorch.org/vision/stable/generated/torchvision.models.detection.ssdlite320_mobilenet_v3_large.html#torchvision.models.detection.ssdlite320_mobilenet_v3_large>`_.

After downloading the model, we will fine-tune it for our particular classes. We will do it by replacing the pre-trained
head with a new one that matches our needs.

.. GENERATED FROM PYTHON SOURCE LINES 192-204

.. code-block:: default


    device = torch.device("cuda") if torch.cuda.is_available() else torch.device("cpu")

    model = torchvision.models.detection.ssdlite320_mobilenet_v3_large(pretrained=True)

    in_channels = det_utils.retrieve_out_channels(model.backbone, (320, 320))
    num_anchors = model.anchor_generator.num_anchors_per_location()
    norm_layer = partial(nn.BatchNorm2d, eps=0.001, momentum=0.03)

    model.head.classification_head = SSDLiteClassificationHead(in_channels, num_anchors, 2, norm_layer)
    model.to(device)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading: "https://download.pytorch.org/models/ssdlite320_mobilenet_v3_large_coco-a79551df.pth" to /home/runner/.cache/torch/hub/checkpoints/ssdlite320_mobilenet_v3_large_coco-a79551df.pth
      0%|          | 0.00/13.4M [00:00<?, ?B/s]    100%|##########| 13.4M/13.4M [00:00<00:00, 258MB/s]

    SSD(
      (backbone): SSDLiteFeatureExtractorMobileNet(
        (features): Sequential(
          (0): Sequential(
            (0): ConvNormActivation(
              (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (1): BatchNorm2d(16, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): Hardswish()
            )
            (1): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                  (1): BatchNorm2d(16, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (1): ConvNormActivation(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(16, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (2): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(16, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (1): ConvNormActivation(
                  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
                  (1): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (2): ConvNormActivation(
                  (0): Conv2d(64, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(24, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (3): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(24, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(72, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (1): ConvNormActivation(
                  (0): Conv2d(72, 72, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=72, bias=False)
                  (1): BatchNorm2d(72, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (2): ConvNormActivation(
                  (0): Conv2d(72, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(24, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (4): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(24, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(72, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (1): ConvNormActivation(
                  (0): Conv2d(72, 72, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=72, bias=False)
                  (1): BatchNorm2d(72, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (2): SqueezeExcitation(
                  (avgpool): AdaptiveAvgPool2d(output_size=1)
                  (fc1): Conv2d(72, 24, kernel_size=(1, 1), stride=(1, 1))
                  (fc2): Conv2d(24, 72, kernel_size=(1, 1), stride=(1, 1))
                  (activation): ReLU()
                  (scale_activation): Hardsigmoid()
                )
                (3): ConvNormActivation(
                  (0): Conv2d(72, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(40, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (5): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(40, 120, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(120, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (1): ConvNormActivation(
                  (0): Conv2d(120, 120, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=120, bias=False)
                  (1): BatchNorm2d(120, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (2): SqueezeExcitation(
                  (avgpool): AdaptiveAvgPool2d(output_size=1)
                  (fc1): Conv2d(120, 32, kernel_size=(1, 1), stride=(1, 1))
                  (fc2): Conv2d(32, 120, kernel_size=(1, 1), stride=(1, 1))
                  (activation): ReLU()
                  (scale_activation): Hardsigmoid()
                )
                (3): ConvNormActivation(
                  (0): Conv2d(120, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(40, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (6): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(40, 120, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(120, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (1): ConvNormActivation(
                  (0): Conv2d(120, 120, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=120, bias=False)
                  (1): BatchNorm2d(120, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (2): SqueezeExcitation(
                  (avgpool): AdaptiveAvgPool2d(output_size=1)
                  (fc1): Conv2d(120, 32, kernel_size=(1, 1), stride=(1, 1))
                  (fc2): Conv2d(32, 120, kernel_size=(1, 1), stride=(1, 1))
                  (activation): ReLU()
                  (scale_activation): Hardsigmoid()
                )
                (3): ConvNormActivation(
                  (0): Conv2d(120, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(40, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (7): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(240, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (1): ConvNormActivation(
                  (0): Conv2d(240, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=240, bias=False)
                  (1): BatchNorm2d(240, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (2): ConvNormActivation(
                  (0): Conv2d(240, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(80, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (8): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(80, 200, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(200, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (1): ConvNormActivation(
                  (0): Conv2d(200, 200, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=200, bias=False)
                  (1): BatchNorm2d(200, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (2): ConvNormActivation(
                  (0): Conv2d(200, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(80, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (9): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(80, 184, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(184, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (1): ConvNormActivation(
                  (0): Conv2d(184, 184, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=184, bias=False)
                  (1): BatchNorm2d(184, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (2): ConvNormActivation(
                  (0): Conv2d(184, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(80, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (10): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(80, 184, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(184, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (1): ConvNormActivation(
                  (0): Conv2d(184, 184, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=184, bias=False)
                  (1): BatchNorm2d(184, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (2): ConvNormActivation(
                  (0): Conv2d(184, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(80, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (11): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(480, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (1): ConvNormActivation(
                  (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)
                  (1): BatchNorm2d(480, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (2): SqueezeExcitation(
                  (avgpool): AdaptiveAvgPool2d(output_size=1)
                  (fc1): Conv2d(480, 120, kernel_size=(1, 1), stride=(1, 1))
                  (fc2): Conv2d(120, 480, kernel_size=(1, 1), stride=(1, 1))
                  (activation): ReLU()
                  (scale_activation): Hardsigmoid()
                )
                (3): ConvNormActivation(
                  (0): Conv2d(480, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(112, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (12): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(672, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (1): ConvNormActivation(
                  (0): Conv2d(672, 672, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=672, bias=False)
                  (1): BatchNorm2d(672, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (2): SqueezeExcitation(
                  (avgpool): AdaptiveAvgPool2d(output_size=1)
                  (fc1): Conv2d(672, 168, kernel_size=(1, 1), stride=(1, 1))
                  (fc2): Conv2d(168, 672, kernel_size=(1, 1), stride=(1, 1))
                  (activation): ReLU()
                  (scale_activation): Hardsigmoid()
                )
                (3): ConvNormActivation(
                  (0): Conv2d(672, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(112, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (13): ConvNormActivation(
              (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(672, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): Hardswish()
            )
          )
          (1): Sequential(
            (0): Sequential(
              (1): ConvNormActivation(
                (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=672, bias=False)
                (1): BatchNorm2d(672, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): Hardswish()
              )
              (2): SqueezeExcitation(
                (avgpool): AdaptiveAvgPool2d(output_size=1)
                (fc1): Conv2d(672, 168, kernel_size=(1, 1), stride=(1, 1))
                (fc2): Conv2d(168, 672, kernel_size=(1, 1), stride=(1, 1))
                (activation): ReLU()
                (scale_activation): Hardsigmoid()
              )
              (3): ConvNormActivation(
                (0): Conv2d(672, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(80, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              )
            )
            (1): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(480, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (1): ConvNormActivation(
                  (0): Conv2d(480, 480, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=480, bias=False)
                  (1): BatchNorm2d(480, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (2): SqueezeExcitation(
                  (avgpool): AdaptiveAvgPool2d(output_size=1)
                  (fc1): Conv2d(480, 120, kernel_size=(1, 1), stride=(1, 1))
                  (fc2): Conv2d(120, 480, kernel_size=(1, 1), stride=(1, 1))
                  (activation): ReLU()
                  (scale_activation): Hardsigmoid()
                )
                (3): ConvNormActivation(
                  (0): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(80, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (2): InvertedResidual(
              (block): Sequential(
                (0): ConvNormActivation(
                  (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(480, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (1): ConvNormActivation(
                  (0): Conv2d(480, 480, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=480, bias=False)
                  (1): BatchNorm2d(480, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                  (2): Hardswish()
                )
                (2): SqueezeExcitation(
                  (avgpool): AdaptiveAvgPool2d(output_size=1)
                  (fc1): Conv2d(480, 120, kernel_size=(1, 1), stride=(1, 1))
                  (fc2): Conv2d(120, 480, kernel_size=(1, 1), stride=(1, 1))
                  (activation): ReLU()
                  (scale_activation): Hardsigmoid()
                )
                (3): ConvNormActivation(
                  (0): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): BatchNorm2d(80, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                )
              )
            )
            (3): ConvNormActivation(
              (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(480, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): Hardswish()
            )
          )
        )
        (extra): ModuleList(
          (0): Sequential(
            (0): ConvNormActivation(
              (0): Conv2d(480, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
            (1): ConvNormActivation(
              (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256, bias=False)
              (1): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
            (2): ConvNormActivation(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
          )
          (1): Sequential(
            (0): ConvNormActivation(
              (0): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
            (1): ConvNormActivation(
              (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=128, bias=False)
              (1): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
            (2): ConvNormActivation(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
          )
          (2): Sequential(
            (0): ConvNormActivation(
              (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
            (1): ConvNormActivation(
              (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=128, bias=False)
              (1): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
            (2): ConvNormActivation(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
          )
          (3): Sequential(
            (0): ConvNormActivation(
              (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
            (1): ConvNormActivation(
              (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
              (1): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
            (2): ConvNormActivation(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
            )
          )
        )
      )
      (anchor_generator): DefaultBoxGenerator(aspect_ratios=[[2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3]], clip=True, scales=[0.2, 0.35, 0.5, 0.65, 0.8, 0.95, 1.0], steps=None)
      (head): SSDLiteHead(
        (classification_head): SSDLiteClassificationHead(
          (module_list): ModuleList(
            (0): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(672, 672, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=672, bias=False)
                (1): BatchNorm2d(672, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(672, 12, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)
                (1): BatchNorm2d(480, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(480, 12, kernel_size=(1, 1), stride=(1, 1))
            )
            (2): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512, bias=False)
                (1): BatchNorm2d(512, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(512, 12, kernel_size=(1, 1), stride=(1, 1))
            )
            (3): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256, bias=False)
                (1): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
            )
            (4): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256, bias=False)
                (1): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
            )
            (5): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
                (1): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(128, 12, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
        (regression_head): SSDLiteRegressionHead(
          (module_list): ModuleList(
            (0): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(672, 672, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=672, bias=False)
                (1): BatchNorm2d(672, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(672, 24, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)
                (1): BatchNorm2d(480, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(480, 24, kernel_size=(1, 1), stride=(1, 1))
            )
            (2): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512, bias=False)
                (1): BatchNorm2d(512, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(512, 24, kernel_size=(1, 1), stride=(1, 1))
            )
            (3): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256, bias=False)
                (1): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(256, 24, kernel_size=(1, 1), stride=(1, 1))
            )
            (4): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256, bias=False)
                (1): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(256, 24, kernel_size=(1, 1), stride=(1, 1))
            )
            (5): Sequential(
              (0): ConvNormActivation(
                (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
                (1): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (1): Conv2d(128, 24, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
      )
      (transform): GeneralizedRCNNTransform(
          Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])
          Resize(min_size=(320,), max_size=320, mode='bilinear')
      )
    )



.. GENERATED FROM PYTHON SOURCE LINES 205-208

Loading Pre-trained Weights
~~~~~~~~~~~~~~~~~~~~~~~~~~~
For this tutorial we will not include the training code itself, but will download and load pre-trained weights.

.. GENERATED FROM PYTHON SOURCE LINES 208-212

.. code-block:: default


    model.load_state_dict(torch.load('tomato-detection/ssd_model.pth'))
    _ = model.eval()








.. GENERATED FROM PYTHON SOURCE LINES 213-221

Validating the Model With Deepchecks
=====================================
Now, after we have the training data, test data and the model, we can validate the model with
deepchecks test suites.

Visualize the Data Loader and the Model Outputs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
First we'll make sure we are familiar with the data loader and the model outputs.

.. GENERATED FROM PYTHON SOURCE LINES 221-233

.. code-block:: default


    batch = next(iter(train_loader))

    print("Batch type is: ", type(batch))
    print("First element is: ", type(batch[0]), "with len of ", len(batch[0]))
    print("Example output of an image shape from the dataloader ", batch[0][0].shape)
    print("Image values", batch[0][0])
    print("-"*80)

    print("Second element is: ", type(batch[1]), "with len of ", len(batch[1]))
    print("Example output of a label from the dataloader ", batch[1][0])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Batch type is:  <class 'tuple'>
    First element is:  <class 'tuple'> with len of  64
    Example output of an image shape from the dataloader  torch.Size([3, 224, 224])
    Image values tensor([[[-1.79253, -1.82678, -1.82678,  ...,  1.39267,  1.34130,  1.32417],
             [-1.72403, -1.79253, -1.80966,  ...,  1.35842,  1.32417,  1.34130],
             [-1.75828, -1.74116, -1.70691,  ...,  1.32417,  1.34130,  1.35842],
             ...,
             [-1.84391, -1.82678, -1.75828,  ...,  0.62206,  0.19394, -0.35405],
             [-1.80966, -1.79253, -1.72403,  ...,  0.81043,  0.72481,  0.34806],
             [-1.79253, -1.84391, -1.75828,  ...,  0.81043,  0.82755,  0.69056]],

            [[-1.38796, -1.45798, -1.45798,  ...,  1.51821,  1.46569,  1.46569],
             [-1.38796, -1.47549, -1.52801,  ...,  1.50070,  1.46569,  1.48319],
             [-1.42297, -1.47549, -1.49300,  ...,  1.46569,  1.50070,  1.50070],
             ...,
             [-1.70308, -1.68557, -1.61555,  ...,  0.67787,  0.22269, -0.33753],
             [-1.68557, -1.66807, -1.58053,  ...,  0.87045,  0.74790,  0.38025],
             [-1.68557, -1.70308, -1.61555,  ...,  0.87045,  0.85294,  0.71289]],

            [[-1.57786, -1.61272, -1.61272,  ...,  1.66397,  1.61168,  1.59425],
             [-1.54301, -1.59529, -1.64758,  ...,  1.62911,  1.59425,  1.59425],
             [-1.59529, -1.59529, -1.61272,  ...,  1.59425,  1.61168,  1.62911],
             ...,
             [-1.63015, -1.59529, -1.52558,  ...,  0.46135,  0.02562, -0.53211],
             [-1.59529, -1.54301, -1.47329,  ...,  0.72279,  0.61821,  0.21734],
             [-1.59529, -1.59529, -1.50815,  ...,  0.72279,  0.72279,  0.56593]]])
    --------------------------------------------------------------------------------
    Second element is:  <class 'tuple'> with len of  64
    Example output of a label from the dataloader  {'boxes': [tensor([  0.00000,  75.13600,  39.68000, 165.75999]), tensor([ 0.00000,  0.00000, 94.08000, 93.56800])], 'labels': [tensor(1), tensor(1)]}




.. GENERATED FROM PYTHON SOURCE LINES 234-247

Implementing the DetectionData class
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The checks in the package validate the model & data by calculating various quantities over the data, labels and
predictions. In order to do that, those must be in a pre-defined format, according to the task type.
The first step is to implement a class that enables deepchecks to interact with your model and data and transform
them to this pre-defined format, which is set for each task type.
In this tutorial, we will implement the object detection task type by implementing a class that inherits from the
:class:`deepchecks.vision.detection_data.DetectionData` class.

The DetectionData class contains additional data and general methods intended for easy access to relevant metadata
for object detection ML models validation.
To learn more about the expected format please visit the API reference for the
:class:`deepchecks.vision.detection_data.DetectionData` class.

.. GENERATED FROM PYTHON SOURCE LINES 247-320

.. code-block:: default


    from deepchecks.vision.detection_data import DetectionData


    class TomatoData(DetectionData):

        def __init__(self, *args, **kwargs):
            super().__init__(*args, **kwargs)

        def batch_to_images(self, batch):
            """
            Convert a batch of data to images in the expected format. The expected format is an iterable of cv2 images,
            where each image is a numpy array of shape (height, width, channels). The numbers in the array should be in the
            range [0, 255] in a uint8 format.
            """
            inp = torch.stack(list(batch[0])).cpu().detach().numpy().transpose((0, 2, 3, 1))
            mean = [0.485, 0.456, 0.406]
            std = [0.229, 0.224, 0.225]
            # Un-normalize the images
            inp = std * inp + mean
            inp = np.clip(inp, 0, 1)
            return inp * 255

        def batch_to_labels(self, batch):
            """
            Convert a batch of data to labels in the expected format. The expected format is a list of tensors of length N,
            where N is the number of samples. Each tensor element is in a shape of [B, 5], where B is the number of bboxes
            in the image, and each bounding box is in the structure of [class_id, x, y, w, h].
            """
            tensor_annotations = batch[1]
            label = []
            for annotation in tensor_annotations:
                if len(annotation["boxes"]):
                    bbox = torch.stack(annotation["boxes"])
                    # Convert the Pascal VOC xyxy format to xywh format
                    bbox[:, 2:] = bbox[:, 2:] - bbox[:, :2]
                    # The label shape is [class_id, x, y, w, h]
                    label.append(
                        torch.concat([torch.stack(annotation["labels"]).reshape((-1, 1)), bbox], dim=1)
                    )
                else:
                    # If it's an empty image, we need to add an empty label
                    label.append(torch.tensor([]))
            return label

        def infer_on_batch(self, batch, model, device):
            """
            Returns the predictions for a batch of data. The expected format is a list of tensors of shape length N, where N
            is the number of samples. Each tensor element is in a shape of [B, 6], where B is the number of bboxes in the
            predictions, and each bounding box is in the structure of [x, y, w, h, score, class_id].
            """
            nm_thrs = 0.2
            score_thrs = 0.7
            imgs = list(img.to(device) for img in batch[0])
            # Getting the predictions of the model on the batch
            with torch.no_grad():
                preds = model(imgs)
            processed_pred = []
            for pred in preds:
                # Performoing non-maximum suppression on the detections
                keep_boxes = torchvision.ops.nms(pred['boxes'], pred['scores'], nm_thrs)
                score_filter = pred['scores'][keep_boxes] > score_thrs

                # get the filtered result
                test_boxes = pred['boxes'][keep_boxes][score_filter].reshape((-1, 4))
                test_boxes[:, 2:] = test_boxes[:, 2:] - test_boxes[:, :2]  # xyxy to xywh
                test_labels = pred['labels'][keep_boxes][score_filter]
                test_scores = pred['scores'][keep_boxes][score_filter]

                processed_pred.append(
                    torch.concat([test_boxes, test_scores.reshape((-1, 1)), test_labels.reshape((-1, 1))], dim=1))
            return processed_pred








.. GENERATED FROM PYTHON SOURCE LINES 321-322

After defining the task class, we can validate it by running the following code:

.. GENERATED FROM PYTHON SOURCE LINES 322-336

.. code-block:: default


    # We have a single label here, which is the tomato class
    # The label_map is a dictionary that maps the class id to the class name, for display purposes.
    LABEL_MAP = {
        1: 'Tomato'
    }
    training_data = TomatoData(data_loader=train_loader, label_map=LABEL_MAP)
    test_data = TomatoData(data_loader=test_loader, label_map=LABEL_MAP)

    training_data.validate_format(model, device=device)
    test_data.validate_format(model, device=device)

    # And observe the output:





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Deepchecks will try to validate the extractors given...
    torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
    Structure validation
    --------------------
    Label formatter: Pass!
    Prediction formatter: Pass!
    Image formatter: Pass!

    Content validation
    ------------------
    For validating the content within the structure you have to manually observe the classes, image, label and prediction.
    Examples of classes observed in the batch's labels: [[1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1], [1]]
    Visual images & label & prediction: should open in a new window
    *******************************************************************************
    This machine does not support GUI
    The formatted image was saved in:
    /home/runner/work/deepchecks/deepchecks/docs/source/user-guide/vision/quickstarts/deepchecks_formatted_image (4).jpg
    Visual examples of an image with prediction and label data. Label is red, prediction is blue, and deepchecks loves you.
    validate_extractors can be set to skip the image saving or change the save path
    *******************************************************************************
    Deepchecks will try to validate the extractors given...
    Structure validation
    --------------------
    Label formatter: Pass!
    Prediction formatter: Pass!
    Image formatter: Pass!

    Content validation
    ------------------
    For validating the content within the structure you have to manually observe the classes, image, label and prediction.
    Examples of classes observed in the batch's labels: [[1, 1, 1, 1], [1], [1, 1, 1, 1, 1, 1, 1], [1], [1]]
    Visual images & label & prediction: should open in a new window
    *******************************************************************************
    This machine does not support GUI
    The formatted image was saved in:
    /home/runner/work/deepchecks/deepchecks/docs/source/user-guide/vision/quickstarts/deepchecks_formatted_image (5).jpg
    Visual examples of an image with prediction and label data. Label is red, prediction is blue, and deepchecks loves you.
    validate_extractors can be set to skip the image saving or change the save path
    *******************************************************************************




.. GENERATED FROM PYTHON SOURCE LINES 337-341

Running Deepchecks' suite on our data and model!
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Now that we have defined the task class, we can validate the model with the deepchecks' model evaluation suite.
This can be done with this simple few lines of code:

.. GENERATED FROM PYTHON SOURCE LINES 341-347

.. code-block:: default


    from deepchecks.vision.suites import model_evaluation

    suite = model_evaluation()
    result = suite.run(training_data, test_data, model, device=device)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Validating Input:
    |     | 0/1 [Time: 00:00]    Validating Input:
    |#####| 1/1 [Time: 00:06]    Validating Input:
    |#####| 1/1 [Time: 00:06]
    Ingesting Batches - Train Dataset:
    |             | 0/13 [Time: 00:00]
    Ingesting Batches - Train Dataset:
    |#            | 1/13 [Time: 00:04]
    Ingesting Batches - Train Dataset:
    |##           | 2/13 [Time: 00:08]
    Ingesting Batches - Train Dataset:
    |###          | 3/13 [Time: 00:12]
    Ingesting Batches - Train Dataset:
    |####         | 4/13 [Time: 00:17]
    Ingesting Batches - Train Dataset:
    |#####        | 5/13 [Time: 00:21]
    Ingesting Batches - Train Dataset:
    |######       | 6/13 [Time: 00:26]
    Ingesting Batches - Train Dataset:
    |#######      | 7/13 [Time: 00:30]
    Ingesting Batches - Train Dataset:
    |########     | 8/13 [Time: 00:34]
    Ingesting Batches - Train Dataset:
    |#########    | 9/13 [Time: 00:39]
    Ingesting Batches - Train Dataset:
    |##########   | 10/13 [Time: 00:43]
    Ingesting Batches - Train Dataset:
    |###########  | 11/13 [Time: 00:48]
    Ingesting Batches - Train Dataset:
    |############ | 12/13 [Time: 00:52]
    Ingesting Batches - Train Dataset:
    |#############| 13/13 [Time: 00:54]
    Ingesting Batches - Train Dataset:
    |#############| 13/13 [Time: 00:54]

    Computing Single Dataset Checks - Train Dataset:
    |     | 0/4 [Time: 00:00]

    Computing Single Dataset Checks - Train Dataset:
    |#2   | 1/4 [Time: 00:00, Check=Mean Average Precision Report]

    Computing Single Dataset Checks - Train Dataset:
    |##5  | 2/4 [Time: 00:00, Check=Mean Average Recall Report]   

    Computing Single Dataset Checks - Train Dataset:
    |#####| 4/4 [Time: 00:07, Check=Image Segment Performance] 

    Computing Single Dataset Checks - Train Dataset:
    |#####| 4/4 [Time: 00:07, Check=Image Segment Performance]


    Ingesting Batches - Test Dataset:
    |     | 0/2 [Time: 00:00]


    Ingesting Batches - Test Dataset:
    |##5  | 1/2 [Time: 00:04]


    Ingesting Batches - Test Dataset:
    |#####| 2/2 [Time: 00:05]


    Ingesting Batches - Test Dataset:
    |#####| 2/2 [Time: 00:05]



    Computing Single Dataset Checks - Test Dataset:
    |     | 0/4 [Time: 00:00]



    Computing Single Dataset Checks - Test Dataset:
    |##5  | 2/4 [Time: 00:00, Check=Mean Average Recall Report]



    Computing Single Dataset Checks - Test Dataset:
    |#####| 4/4 [Time: 00:00, Check=Image Segment Performance] 



    Computing Single Dataset Checks - Test Dataset:
    |#####| 4/4 [Time: 00:00, Check=Image Segment Performance]




    Computing Checks:
    |     | 0/4 [Time: 00:00]




    Computing Checks:
    |     | 0/4 [Time: 00:00, Check=Class Performance]




    Computing Checks:
    |#2   | 1/4 [Time: 00:00, Check=Class Performance]




    Computing Checks:
    |#2   | 1/4 [Time: 00:00, Check=Train Test Prediction Drift]




    Computing Checks:
    |##5  | 2/4 [Time: 00:00, Check=Train Test Prediction Drift]




    Computing Checks:
    |##5  | 2/4 [Time: 00:00, Check=Simple Model Comparison]    




    Computing Checks:
    |##5  | 2/4 [Time: 00:00, Check=Model Error Analysis]   Default parameter min_samples_leaf will change in version 2.6.See https://github.com/scikit-learn-contrib/category_encoders/issues/327
    Default parameter smoothing will change in version 2.6.See https://github.com/scikit-learn-contrib/category_encoders/issues/327





    Computing Checks:
    |#####| 4/4 [Time: 00:00, Check=Model Error Analysis]




    Computing Checks:
    |#####| 4/4 [Time: 00:00, Check=Model Error Analysis]                                           
                                                                          

                                                                                                               


                                                               



                                                                                                              




                                                                           



.. GENERATED FROM PYTHON SOURCE LINES 348-353

We also have suites for:
:func:`data integrity <deepchecks.vision.suites.default_suites.data_integrity>`
- validating a single dataset and
:func:`train test validation <deepchecks.vision.suites.default_suites.train_test_validation>` -
validating the dataset split

.. GENERATED FROM PYTHON SOURCE LINES 355-360

.. _observing_the_result:

Observing the results:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The results can be saved as a html file with the following code:

.. GENERATED FROM PYTHON SOURCE LINES 360-363

.. code-block:: default


    result.save_as_html('output.html')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    'output (3).html'



.. GENERATED FROM PYTHON SOURCE LINES 364-365

Or, if working inside a notebook, the output can be displayed directly by simply printing the result object:

.. GENERATED FROM PYTHON SOURCE LINES 365-367

.. code-block:: default


    result





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <!--
        ~ ----------------------------------------------------------------------------
        ~ Copyright (C) 2021-2022 Deepchecks (https://www.deepchecks.com)
        ~
        ~ This file is part of Deepchecks.
        ~ Deepchecks is distributed under the terms of the GNU Affero General
        ~ Public License (version 3 or later).
        ~ You should have received a copy of the GNU Affero General Public License
        ~ along with Deepchecks.  If not, see <http://www.gnu.org/licenses/>.
        ~ ----------------------------------------------------------------------------
        ~
    -->
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Model Evaluation Suite</title>
        <link rel="icon" type="image/x-icon" href="https://deepchecks.com/wp-content/themes/deepchecks/assets/favicons/favicon.ico">
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
                font-size: 1rem;
                line-height: 1.5;
                color: #212529;
                text-align: left;
                max-width: 1200px;
                margin: auto;
                background-color: white;
            }

            div.nbinput.container div.prompt *,
            div.nboutput.container div.prompt *,
            div.nbinput.container div.input_area pre,
            div.nboutput.container div.output_area pre,
            div.nbinput.container div.input_area .highlight,
            div.nboutput.container div.output_area .highlight {
                border: none;
                padding: 0;
                margin: 0;
                box-shadow: none;
            }

            div.nbinput.container > div[class*=highlight],
            div.nboutput.container > div[class*=highlight] {
                margin: 0;
            }

            div.nbinput.container div.prompt *,
            div.nboutput.container div.prompt * {
                background: none;
            }

            div.nboutput.container div.output_area .highlight,
            div.nboutput.container div.output_area pre {
                background: unset;
            }

            div.nboutput.container div.output_area div.highlight {
                color: unset;  /* override Pygments text color */
            }

            /* avoid gaps between output lines */
            div.nboutput.container div[class*=highlight] pre {
                line-height: normal;
            }

            /* input/output containers */
            div.nbinput.container,
            div.nboutput.container {
                display: -webkit-flex;
                display: flex;
                align-items: flex-start;
                margin: 0;
                width: 100%;
            }
            @media (max-width: 540px) {
                div.nbinput.container,
                div.nboutput.container {
                    flex-direction: column;
                }
            }

            /* input container */
            div.nbinput.container {
                padding-top: 5px;
            }

            /* last container */
            div.nblast.container {
                padding-bottom: 5px;
            }

            /* input prompt */
            div.nbinput.container div.prompt pre {
                color: #307FC1;
            }

            /* output prompt */
            div.nboutput.container div.prompt pre {
                color: #BF5B3D;
            }

            /* all prompts */
            div.nbinput.container div.prompt,
            div.nboutput.container div.prompt {
                width: 4.5ex;
                padding-top: 5px;
                position: relative;
                user-select: none;
            }

            div.nbinput.container div.prompt > div,
            div.nboutput.container div.prompt > div {
                position: absolute;
                right: 0;
                margin-right: 0.3ex;
            }

            @media (max-width: 540px) {
                div.nbinput.container div.prompt,
                div.nboutput.container div.prompt {
                    width: unset;
                    text-align: left;
                    padding: 0.4em;
                }
                div.nboutput.container div.prompt.empty {
                    padding: 0;
                }

                div.nbinput.container div.prompt > div,
                div.nboutput.container div.prompt > div {
                    position: unset;
                }
            }

            /* disable scrollbars on prompts */
            div.nbinput.container div.prompt pre,
            div.nboutput.container div.prompt pre {
                overflow: hidden;
            }

            /* input/output area */
            div.nbinput.container div.input_area,
            div.nboutput.container div.output_area {
                -webkit-flex: 1;
                flex: 1;
                overflow: auto;
            }
            @media (max-width: 540px) {
                div.nbinput.container div.input_area,
                div.nboutput.container div.output_area {
                    width: 100%;
                }
            }

            /* input area */
            div.nbinput.container div.input_area {
                border: 1px solid #e0e0e0;
                border-radius: 2px;
                /*background: #f5f5f5;*/
            }

            /* override MathJax center alignment in output cells */
            div.nboutput.container div[class*=MathJax] {
                text-align: left !important;
            }

            /* override sphinx.ext.imgmath center alignment in output cells */
            div.nboutput.container div.math p {
                text-align: left;
            }

            /* standard error */
            div.nboutput.container div.output_area.stderr {
                background: #fdd;
            }

            /* ANSI colors */
            .ansi-black-fg { color: #3E424D; }
            .ansi-black-bg { background-color: #3E424D; }
            .ansi-black-intense-fg { color: #282C36; }
            .ansi-black-intense-bg { background-color: #282C36; }
            .ansi-red-fg { color: #E75C58; }
            .ansi-red-bg { background-color: #E75C58; }
            .ansi-red-intense-fg { color: #B22B31; }
            .ansi-red-intense-bg { background-color: #B22B31; }
            .ansi-green-fg { color: #00A250; }
            .ansi-green-bg { background-color: #00A250; }
            .ansi-green-intense-fg { color: #007427; }
            .ansi-green-intense-bg { background-color: #007427; }
            .ansi-yellow-fg { color: #DDB62B; }
            .ansi-yellow-bg { background-color: #DDB62B; }
            .ansi-yellow-intense-fg { color: #B27D12; }
            .ansi-yellow-intense-bg { background-color: #B27D12; }
            .ansi-blue-fg { color: #208FFB; }
            .ansi-blue-bg { background-color: #208FFB; }
            .ansi-blue-intense-fg { color: #0065CA; }
            .ansi-blue-intense-bg { background-color: #0065CA; }
            .ansi-magenta-fg { color: #D160C4; }
            .ansi-magenta-bg { background-color: #D160C4; }
            .ansi-magenta-intense-fg { color: #A03196; }
            .ansi-magenta-intense-bg { background-color: #A03196; }
            .ansi-cyan-fg { color: #60C6C8; }
            .ansi-cyan-bg { background-color: #60C6C8; }
            .ansi-cyan-intense-fg { color: #258F8F; }
            .ansi-cyan-intense-bg { background-color: #258F8F; }
            .ansi-white-fg { color: #C5C1B4; }
            .ansi-white-bg { background-color: #C5C1B4; }
            .ansi-white-intense-fg { color: #A1A6B2; }
            .ansi-white-intense-bg { background-color: #A1A6B2; }

            .ansi-default-inverse-fg { color: #FFFFFF; }
            .ansi-default-inverse-bg { background-color: #000000; }

            .ansi-bold { font-weight: bold; }
            .ansi-underline { text-decoration: underline; }


            div.nbinput.container div.input_area div[class*=highlight] > pre,
            div.nboutput.container div.output_area div[class*=highlight] > pre,
            div.nboutput.container div.output_area div[class*=highlight].math,
            div.nboutput.container div.output_area.rendered_html,
            div.nboutput.container div.output_area > div.output_javascript,
            div.nboutput.container div.output_area:not(.rendered_html) > img{
                padding: 5px;
                margin: 0;
            }

            /* fix copybtn overflow problem in chromium (needed for 'sphinx_copybutton') */
            div.nbinput.container div.input_area > div[class^='highlight'],
            div.nboutput.container div.output_area > div[class^='highlight']{
                overflow-y: hidden;
            }

            /* hide copybtn icon on prompts (needed for 'sphinx_copybutton') */
            .prompt .copybtn {
                display: none;
            }

            /* Some additional styling taken form the Jupyter notebook CSS */
            div.rendered_html table {
            border: none;
            border-collapse: collapse;
            border-spacing: 0;
            color: black;
            font-size: 12px;
            table-layout: fixed;
            }
            div.rendered_html thead {
            border-bottom: 1px solid black;
            vertical-align: bottom;
            }
            div.rendered_html tr,
            div.rendered_html th,
            div.rendered_html td {
            text-align: right;
            vertical-align: middle;
            padding: 0.5em 0.5em;
            line-height: normal;
            white-space: normal;
            max-width: none;
            border: none;
            }
            div.rendered_html th {
            font-weight: bold;
            }
            div.rendered_html tbody tr:nth-child(odd) {
            background: #f5f5f5;
            }
            div.rendered_html tbody tr:hover {
            background: rgba(66, 165, 245, 0.2);
            }
        </style>
    </head>
    <body>
        <script src="https://unpkg.com/@jupyter-widgets/html-manager@^0.20.1/dist/embed.js" crossorigin="anonymous"></script>
    

    <script type="application/vnd.jupyter.widget-state+json">
    {"version_major": 2, "version_minor": 0, "state": {"6697accac97848f9abbff14f92be966f": {"model_name": "AccordionModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "_titles": {"0": "Model Evaluation Suite"}, "children": ["IPY_MODEL_c09a8eab40a145b6a1cbc8de58dcad77"], "layout": "IPY_MODEL_0dfde01b3ecf4e768f3ec1403cc38ec5"}}, "c09a8eab40a145b6a1cbc8de58dcad77": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_b4a7d6197e354c5392b73e5c8c56125c", "IPY_MODEL_417fbd2db76641b3a9350320c2d3abbc", "IPY_MODEL_a14483d9d5314d2693c28f19c0b33ec1", "IPY_MODEL_adbff32d30fa4c5baccabe26c093751f", "IPY_MODEL_e737baeb1b604369bff50d7e979c02dd"], "layout": "IPY_MODEL_0a2a72f38519400aaba4af48b5b9767f"}}, "b4a7d6197e354c5392b73e5c8c56125c": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_b119e616bd434eeab78c82c4cf20e593", "style": "IPY_MODEL_44ceb3c050bb4d3893c614991a152441", "value": "\n            <h1 id=\"summary_UH17J8QO09VS9KKH4A3YJTU7F\">Model Evaluation Suite</h1>\n            <p>\n                The suite is composed of various checks such as: Image Segment Performance, Train Test Prediction Drift, Model Error Analysis, etc...<br>\n                Each check may contain conditions (which will result in pass / fail / warning / error\n                , represented by \n<span style=\"color: green;display:inline-block\">\u2713</span> /\n<span style=\"color: red;display:inline-block\">\u2716</span> /\n<span style=\"color: orange;font-weight:bold;display:inline-block\">!</span> /\n<span style=\"color: firebrick;font-weight:bold;display:inline-block\">\u2048</span>\n) as well as other outputs such as plots or tables.<br>\n                Suites, checks and conditions can all be modified. Read more about\n                <a href=https://docs.deepchecks.com/en/stable/examples/guides/create_a_custom_suite.html?utm_source=display_output&utm_medium=referral&utm_campaign=suite_link target=\"_blank\">custom suites</a>.\n            </p>\n\n"}}, "b119e616bd434eeab78c82c4cf20e593": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "44ceb3c050bb4d3893c614991a152441": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "417fbd2db76641b3a9350320c2d3abbc": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_49d0ca54a7a142728fe1bef40d787029", "IPY_MODEL_7e99b19ebf544ead8a87e0bfe39f9c27"], "layout": "IPY_MODEL_c4fda67b256a41da921b5102aede2109"}}, "49d0ca54a7a142728fe1bef40d787029": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_b341883bd8be46458ae039a5c51174d9", "style": "IPY_MODEL_02f1e12ef9e742ed8ffaa3ece5c8dbae", "value": "<span id=\"summary_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\"></span>"}}, "b341883bd8be46458ae039a5c51174d9": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "02f1e12ef9e742ed8ffaa3ece5c8dbae": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "7e99b19ebf544ead8a87e0bfe39f9c27": {"model_name": "AccordionModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "_titles": {"0": "Didn't Pass"}, "children": ["IPY_MODEL_8bb38872b5ce43ce8ad0b21ca26eb33f"], "layout": "IPY_MODEL_7d5f51686af44b8eae597c592464f7c6", "selected_index": null}}, "8bb38872b5ce43ce8ad0b21ca26eb33f": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_541ef8074ab640ebbd6b05826e8c517b", "IPY_MODEL_6adf9fc7b1db44288bc16bb633ea741c", "IPY_MODEL_ee0a824e67294df0b3ce1db6fe66201d", "IPY_MODEL_3bb108b22d904ec78913a72db94bdbf1", "IPY_MODEL_067dde78fc2e46bfb510cba14f1f2a42", "IPY_MODEL_3bb108b22d904ec78913a72db94bdbf1", "IPY_MODEL_df5b385b3cec401db094c4d7ced25cbf", "IPY_MODEL_3bb108b22d904ec78913a72db94bdbf1", "IPY_MODEL_df9a8577b82641b2960bfe2b5a96bf49", "IPY_MODEL_3bb108b22d904ec78913a72db94bdbf1", "IPY_MODEL_c09b0d3d86e1477fb6b823f3fe86882a"], "layout": "IPY_MODEL_2e615e29cede467fb660dd4daaf12d61"}}, "541ef8074ab640ebbd6b05826e8c517b": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_8f02da8ea6f5410cab3658215d9996e1", "style": "IPY_MODEL_5fb9645b850a454bab1ce25ff5180664", "value": "<style type=\"text/css\">\n#T_9d5d7_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_9d5d7_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_9d5d7_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_9d5d7_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_9d5d7_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_9d5d7_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Status</th>\n      <th class=\"col_heading level0 col1\" >Check</th>\n      <th class=\"col_heading level0 col2\" >Condition</th>\n      <th class=\"col_heading level0 col3\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_9d5d7_row0_col0\" class=\"data row0 col0\" ><div style=\"color: red;text-align: center\">\u2716</div></td>\n      <td id=\"T_9d5d7_row0_col1\" class=\"data row0 col1\" ><a href=\"#ClassPerformance_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\">Class Performance</a></td>\n      <td id=\"T_9d5d7_row0_col2\" class=\"data row0 col2\" >Train-Test scores relative degradation is less than 0.1</td>\n      <td id=\"T_9d5d7_row0_col3\" class=\"data row0 col3\" >2 scores failed. Found max degradation of 49.42% for metric Average Precision and class Tomato.</td>\n    </tr>\n    <tr>\n      <td id=\"T_9d5d7_row1_col0\" class=\"data row1 col0\" ><div style=\"color: red;text-align: center\">\u2716</div></td>\n      <td id=\"T_9d5d7_row1_col1\" class=\"data row1 col1\" ><a href=\"#MeanAveragePrecisionReport-TestDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\">Mean Average Precision Report - Test Dataset</a></td>\n      <td id=\"T_9d5d7_row1_col2\" class=\"data row1 col2\" >mAP score is greater than 0.3</td>\n      <td id=\"T_9d5d7_row1_col3\" class=\"data row1 col3\" >mAP score is: 0.01</td>\n    </tr>\n    <tr>\n      <td id=\"T_9d5d7_row2_col0\" class=\"data row2 col0\" ><div style=\"color: red;text-align: center\">\u2716</div></td>\n      <td id=\"T_9d5d7_row2_col1\" class=\"data row2 col1\" ><a href=\"#MeanAveragePrecisionReport-TrainDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\">Mean Average Precision Report - Train Dataset</a></td>\n      <td id=\"T_9d5d7_row2_col2\" class=\"data row2 col2\" >mAP score is greater than 0.3</td>\n      <td id=\"T_9d5d7_row2_col3\" class=\"data row2 col3\" >mAP score is: 0.03</td>\n    </tr>\n    <tr>\n      <td id=\"T_9d5d7_row3_col0\" class=\"data row3 col0\" ><div style=\"color: red;text-align: center\">\u2716</div></td>\n      <td id=\"T_9d5d7_row3_col1\" class=\"data row3 col1\" ><a href=\"#ImageSegmentPerformance-TestDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\">Image Segment Performance - Test Dataset</a></td>\n      <td id=\"T_9d5d7_row3_col2\" class=\"data row3 col2\" >Segment's ratio between score to mean is greater than 80%</td>\n      <td id=\"T_9d5d7_row3_col3\" class=\"data row3 col3\" >Properties with failed segments: Brightness: {'Range': '(-inf, 0.33)', 'Metric': 'Average Precision', 'Ratio': 0.11}, Mean Blue Relative Intensity: {'Range': '[0.2, 0.23)', 'Metric': 'Average Precision', 'Ratio': 0.29}, Mean Green Relative Intensity: {'Range': '[0.41, 0.45)', 'Metric': 'Average Reca...</td>\n    </tr>\n    <tr>\n      <td id=\"T_9d5d7_row4_col0\" class=\"data row4 col0\" ><div style=\"color: red;text-align: center\">\u2716</div></td>\n      <td id=\"T_9d5d7_row4_col1\" class=\"data row4 col1\" ><a href=\"#ImageSegmentPerformance-TrainDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\">Image Segment Performance - Train Dataset</a></td>\n      <td id=\"T_9d5d7_row4_col2\" class=\"data row4 col2\" >Segment's ratio between score to mean is greater than 80%</td>\n      <td id=\"T_9d5d7_row4_col3\" class=\"data row4 col3\" >Properties with failed segments: Brightness: {'Range': '[0.32, 0.38)', 'Metric': 'Average Recall', 'Ratio': 0.53}, Mean Blue Relative Intensity: {'Range': '(-inf, 0.2)', 'Metric': 'Average Recall', 'Ratio': 0.68}, Mean Green Relative Intensity: {'Range': '[0.45, 0.48)', 'Metric': 'Average Precision'...</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "8f02da8ea6f5410cab3658215d9996e1": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "5fb9645b850a454bab1ce25ff5180664": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "6adf9fc7b1db44288bc16bb633ea741c": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_55d8f112f0194a64999ce83c20af664d", "style": "IPY_MODEL_a048123da0c945f4b3e6a60dc1d04006", "value": "<hr style=\"background-color: #eee;border: 0 none;color: #eee;height: 4px;\">"}}, "55d8f112f0194a64999ce83c20af664d": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "a048123da0c945f4b3e6a60dc1d04006": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "ee0a824e67294df0b3ce1db6fe66201d": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "children": ["IPY_MODEL_b3ce740a0ef34153942cad964f4e511a", "IPY_MODEL_8101af31e4594cee95d3db9267e55101", "IPY_MODEL_88976da38853455e93c7549602ebe99b", "IPY_MODEL_37dcc1c216e84e4ba43724e598cbe4f5"], "layout": "IPY_MODEL_090f673c95b14e5ba353f120ec01e385"}}, "b3ce740a0ef34153942cad964f4e511a": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_9aa4228f7ffc4014b8cb7cc4ad80395d", "style": "IPY_MODEL_f878144cd72e43d2a15415d74613185f", "value": "<h4 id=\"ClassPerformance_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\"><b>Class Performance</b></h4>"}}, "9aa4228f7ffc4014b8cb7cc4ad80395d": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "f878144cd72e43d2a15415d74613185f": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "8101af31e4594cee95d3db9267e55101": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_ef9250dfcff74823ac366ff6c9d02828", "style": "IPY_MODEL_ee521e7ca8c74a5bb59638a57fb8dddb", "value": "<p>Summarize given metrics on a dataset and model. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_class_performance.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"}}, "ef9250dfcff74823ac366ff6c9d02828": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "ee521e7ca8c74a5bb59638a57fb8dddb": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "88976da38853455e93c7549602ebe99b": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_57b51712529b4dbaba6d64e2079754fc", "style": "IPY_MODEL_dbd29249a696480a81382cab1cee259e", "value": "<h5><b>Conditions Summary</b></h5><style type=\"text/css\">\n#T_43fba_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_43fba_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_43fba_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_43fba_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_43fba_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_43fba_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Status</th>\n      <th class=\"col_heading level0 col1\" >Condition</th>\n      <th class=\"col_heading level0 col2\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_43fba_row0_col0\" class=\"data row0 col0\" ><div style=\"color: red;text-align: center\">\u2716</div></td>\n      <td id=\"T_43fba_row0_col1\" class=\"data row0 col1\" >Train-Test scores relative degradation is less than 0.1</td>\n      <td id=\"T_43fba_row0_col2\" class=\"data row0 col2\" >2 scores failed. Found max degradation of 49.42% for metric Average Precision and class Tomato.</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "57b51712529b4dbaba6d64e2079754fc": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "dbd29249a696480a81382cab1cee259e": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "37dcc1c216e84e4ba43724e598cbe4f5": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_d42e6fe39ea3479eb7987a49edddba62", "IPY_MODEL_406a1f44209547b8a1cdbe1c46949621", "IPY_MODEL_3d0686ff473b4200bc6b104dd1b8b2a7"], "layout": "IPY_MODEL_541737c5aabb4c43b1dbce7d9a60ff04"}}, "d42e6fe39ea3479eb7987a49edddba62": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_80b199c618084a0789d98e24de41a515", "style": "IPY_MODEL_d4e052a70f9a4eb4a867db3dae877aa3", "value": "<h5><b>Additional Outputs</b></h5>"}}, "80b199c618084a0789d98e24de41a515": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "d4e052a70f9a4eb4a867db3dae877aa3": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "406a1f44209547b8a1cdbe1c46949621": {"model_name": "FigureModel", "model_module": "jupyterlab-plotly", "model_module_version": "^5.11.0", "state": {"_config": {"plotlyServerURL": "https://plot.ly"}, "_data": [{"alignmentgroup": "True", "bingroup": "x", "histfunc": "sum", "hovertemplate": "Dataset=Train<br>Metric=Average Recall<br>Class Name=%{x}<br>sum of Value=%{y}<extra></extra>", "legendgroup": "Train", "marker": {"color": "#00008b", "pattern": {"shape": ""}}, "name": "Train", "offsetgroup": "Train", "orientation": "v", "showlegend": true, "x": ["Tomato"], "xaxis": "x", "y": {"dtype": "float64", "shape": [1]}, "yaxis": "y", "type": "histogram", "uid": "eb98681f-3303-404a-b219-006480c1f70b"}, {"alignmentgroup": "True", "bingroup": "x", "histfunc": "sum", "hovertemplate": "Dataset=Train<br>Metric=Average Precision<br>Class Name=%{x}<br>sum of Value=%{y}<extra></extra>", "legendgroup": "Train", "marker": {"color": "#00008b", "pattern": {"shape": ""}}, "name": "Train", "offsetgroup": "Train", "orientation": "v", "showlegend": false, "x": ["Tomato"], "xaxis": "x2", "y": {"dtype": "float64", "shape": [1]}, "yaxis": "y2", "type": "histogram", "uid": "25145409-fa84-45d1-a401-e4fb7f5cd1bf"}, {"alignmentgroup": "True", "bingroup": "x", "histfunc": "sum", "hovertemplate": "Dataset=Test<br>Metric=Average Recall<br>Class Name=%{x}<br>sum of Value=%{y}<extra></extra>", "legendgroup": "Test", "marker": {"color": "#69b3a2", "pattern": {"shape": ""}}, "name": "Test", "offsetgroup": "Test", "orientation": "v", "showlegend": true, "x": ["Tomato"], "xaxis": "x", "y": {"dtype": "float64", "shape": [1]}, "yaxis": "y", "type": "histogram", "uid": "3b781289-ab71-4258-8e30-57a6c98056d0"}, {"alignmentgroup": "True", "bingroup": "x", "histfunc": "sum", "hovertemplate": "Dataset=Test<br>Metric=Average Precision<br>Class Name=%{x}<br>sum of Value=%{y}<extra></extra>", "legendgroup": "Test", "marker": {"color": "#69b3a2", "pattern": {"shape": ""}}, "name": "Test", "offsetgroup": "Test", "orientation": "v", "showlegend": false, "x": ["Tomato"], "xaxis": "x2", "y": {"dtype": "float64", "shape": [1]}, "yaxis": "y2", "type": "histogram", "uid": "450c48b5-b4f0-4f1e-99c3-8b02d5d77c51"}], "_dom_classes": [], "_js2py_layoutDelta": {}, "_js2py_pointsCallback": {}, "_js2py_relayout": {}, "_js2py_restyle": {}, "_js2py_traceDeltas": {}, "_js2py_update": {}, "_layout": {"annotations": [{"showarrow": false, "text": "Average Recall", "x": 0.2375, "xanchor": "center", "xref": "paper", "y": 1.0, "yanchor": "bottom", "yref": "paper"}, {"showarrow": false, "text": "Average Precision", "x": 0.7625, "xanchor": "center", "xref": "paper", "y": 1.0, "yanchor": "bottom", "yref": "paper"}], "barmode": "group", "legend": {"title": {"text": "Dataset"}, "tracegroupgap": 0}, "margin": {"t": 60}, "template": {"data": {"barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "barpolar"}], "bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "bar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram": [{"marker": {"pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "histogram"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatter": [{"fillpattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}, "type": "scatter"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "xaxis": {"anchor": "y", "domain": [0.0, 0.475], "title": {"text": "Class"}, "type": "category"}, "yaxis": {"anchor": "x", "domain": [0.0, 1.0], "showticklabels": true, "title": {"text": "Value"}}, "xaxis2": {"anchor": "y2", "domain": [0.525, 1.0], "matches": "x", "title": {"text": "Class"}, "type": "category"}, "yaxis2": {"anchor": "x2", "domain": [0.0, 1.0], "showticklabels": true, "title": {"text": "Value"}}}, "_py2js_addTraces": {}, "_py2js_animate": {}, "_py2js_deleteTraces": {}, "_py2js_moveTraces": {}, "_py2js_relayout": {}, "_py2js_removeLayoutProps": {}, "_py2js_removeTraceProps": {}, "_py2js_restyle": {}, "_py2js_update": {}, "_view_count": 0}, "buffers": [{"encoding": "base64", "path": ["_data", 0, "y", "buffer"], "data": "a7nPcI9Srz8="}, {"encoding": "base64", "path": ["_data", 1, "y", "buffer"], "data": "Nr3odJkgnT8="}, {"encoding": "base64", "path": ["_data", 2, "y", "buffer"], "data": "gaoocvZKpj8="}, {"encoding": "base64", "path": ["_data", 3, "y", "buffer"], "data": "XTbPw752jT8="}]}, "3d0686ff473b4200bc6b104dd1b8b2a7": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_7f08a95f92184541b85490510c7d5390", "style": "IPY_MODEL_c7b7bef78eb74e53a3a6b93f612bda51", "value": "<br><a href=\"#summary_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\" style=\"font-size: 14px;\">Go to top</a>"}}, "7f08a95f92184541b85490510c7d5390": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "c7b7bef78eb74e53a3a6b93f612bda51": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "541737c5aabb4c43b1dbce7d9a60ff04": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "090f673c95b14e5ba353f120ec01e385": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "3bb108b22d904ec78913a72db94bdbf1": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_10dacdda7918492db4bd3c0da52ace67", "style": "IPY_MODEL_02a37e3255544897b6b4ff7406b13951", "value": "<hr style=\"background-color: #eee;border: 0 none;color: #eee;height: 4px;\">"}}, "10dacdda7918492db4bd3c0da52ace67": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "02a37e3255544897b6b4ff7406b13951": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "067dde78fc2e46bfb510cba14f1f2a42": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "children": ["IPY_MODEL_87c7230c09714bf39d3acbd7e83eac6e", "IPY_MODEL_b4167b958e7b4148b110d417803eee0d", "IPY_MODEL_8c7aeb70a11b441db7075127f73df357", "IPY_MODEL_3ad7c8f3cd0f46559e32cbd0c3f7ef8b"], "layout": "IPY_MODEL_f55459f9b5754ad4a5b725573ed8d624"}}, "87c7230c09714bf39d3acbd7e83eac6e": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_da130b243ea6455aaf6ab5d252896fec", "style": "IPY_MODEL_29672668708c44f886841a9f4509f2a7", "value": "<h4 id=\"MeanAveragePrecisionReport-TestDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\"><b>Mean Average Precision Report - Test Dataset</b></h4>"}}, "da130b243ea6455aaf6ab5d252896fec": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "29672668708c44f886841a9f4509f2a7": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "b4167b958e7b4148b110d417803eee0d": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_f5d651ea7add499cbf3a1543860324ca", "style": "IPY_MODEL_e53ad56eb5de4362a5ee1b60e132b870", "value": "<p>Summarize mean average precision metrics on a dataset and model per IoU and bounding box area. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_mean_average_precision_report.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"}}, "f5d651ea7add499cbf3a1543860324ca": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "e53ad56eb5de4362a5ee1b60e132b870": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "8c7aeb70a11b441db7075127f73df357": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_71aabc0cbd7b4437b789e65532db7ad4", "style": "IPY_MODEL_d226295cc8ad434f8cef22bfd699e75a", "value": "<h5><b>Conditions Summary</b></h5><style type=\"text/css\">\n#T_ea1be_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_ea1be_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_ea1be_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_ea1be_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_ea1be_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_ea1be_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Status</th>\n      <th class=\"col_heading level0 col1\" >Condition</th>\n      <th class=\"col_heading level0 col2\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_ea1be_row0_col0\" class=\"data row0 col0\" ><div style=\"color: red;text-align: center\">\u2716</div></td>\n      <td id=\"T_ea1be_row0_col1\" class=\"data row0 col1\" >mAP score is greater than 0.3</td>\n      <td id=\"T_ea1be_row0_col2\" class=\"data row0 col2\" >mAP score is: 0.01</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "71aabc0cbd7b4437b789e65532db7ad4": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "d226295cc8ad434f8cef22bfd699e75a": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "3ad7c8f3cd0f46559e32cbd0c3f7ef8b": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_5a7e3a3a95c9469d9a02cf7636c85e83", "IPY_MODEL_33db3471b4b4428aaf514dd839a65ed0", "IPY_MODEL_ede9e2a538ec47dcbe299ae74d65f375", "IPY_MODEL_59b6b99f736e45a194443d68b057d1b2"], "layout": "IPY_MODEL_13abb08ec7d64c16b12a1bc3b559f682"}}, "5a7e3a3a95c9469d9a02cf7636c85e83": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_ffb86795ba8c429aa0b3cc244eddaa74", "style": "IPY_MODEL_6bd213c6459843218b96fa4e54488c43", "value": "<h5><b>Additional Outputs</b></h5>"}}, "ffb86795ba8c429aa0b3cc244eddaa74": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "6bd213c6459843218b96fa4e54488c43": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "33db3471b4b4428aaf514dd839a65ed0": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_f16833f1307b4f22829af6e38346eef5", "style": "IPY_MODEL_2f03d252dee247bbbeabe575679d8394", "value": "<style type=\"text/css\">\n#T_07670_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_07670_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_07670_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_07670_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_07670_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_07670_\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th class=\"col_heading level0 col0\" >mAP@[.50::.95] (avg.%)</th>\n      <th class=\"col_heading level0 col1\" >mAP@.50 (%)</th>\n      <th class=\"col_heading level0 col2\" >mAP@.75 (%)</th>\n    </tr>\n    <tr>\n      <th class=\"index_name level0\" >Area size</th>\n      <th class=\"blank col0\" >&nbsp;</th>\n      <th class=\"blank col1\" >&nbsp;</th>\n      <th class=\"blank col2\" >&nbsp;</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_07670_level0_row0\" class=\"row_heading level0 row0\" >All</th>\n      <td id=\"T_07670_row0_col0\" class=\"data row0 col0\" >0.01</td>\n      <td id=\"T_07670_row0_col1\" class=\"data row0 col1\" >0.05</td>\n      <td id=\"T_07670_row0_col2\" class=\"data row0 col2\" >0.01</td>\n    </tr>\n    <tr>\n      <th id=\"T_07670_level0_row1\" class=\"row_heading level0 row1\" >Small (area < 32^2)</th>\n      <td id=\"T_07670_row1_col0\" class=\"data row1 col0\" >0.00</td>\n      <td id=\"T_07670_row1_col1\" class=\"data row1 col1\" >0.01</td>\n      <td id=\"T_07670_row1_col2\" class=\"data row1 col2\" >0.00</td>\n    </tr>\n    <tr>\n      <th id=\"T_07670_level0_row2\" class=\"row_heading level0 row2\" >Medium (32^2 < area < 96^2)</th>\n      <td id=\"T_07670_row2_col0\" class=\"data row2 col0\" >0.06</td>\n      <td id=\"T_07670_row2_col1\" class=\"data row2 col1\" >0.20</td>\n      <td id=\"T_07670_row2_col2\" class=\"data row2 col2\" >0.02</td>\n    </tr>\n    <tr>\n      <th id=\"T_07670_level0_row3\" class=\"row_heading level0 row3\" >Large (area < 96^2)</th>\n      <td id=\"T_07670_row3_col0\" class=\"data row3 col0\" >0.00</td>\n      <td id=\"T_07670_row3_col1\" class=\"data row3 col1\" >0.00</td>\n      <td id=\"T_07670_row3_col2\" class=\"data row3 col2\" >0.00</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "f16833f1307b4f22829af6e38346eef5": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "2f03d252dee247bbbeabe575679d8394": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "ede9e2a538ec47dcbe299ae74d65f375": {"model_name": "FigureModel", "model_module": "jupyterlab-plotly", "model_module_version": "^5.11.0", "state": {"_config": {"plotlyServerURL": "https://plot.ly"}, "_data": [{"hovertemplate": "IoU threshold=%{x}<br>mAP (%)=%{y}<extra></extra>", "legendgroup": "", "line": {"color": "#636efa", "dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines", "name": "", "orientation": "v", "showlegend": false, "x": {"dtype": "float64", "shape": [10]}, "xaxis": "x", "y": {"dtype": "float64", "shape": [10]}, "yaxis": "y", "type": "scatter", "uid": "2cf21bf6-4160-45b1-971d-ce6e3dd88d90"}], "_dom_classes": [], "_js2py_layoutDelta": {}, "_js2py_pointsCallback": {}, "_js2py_relayout": {}, "_js2py_restyle": {}, "_js2py_traceDeltas": {}, "_js2py_update": {}, "_layout": {"legend": {"tracegroupgap": 0}, "template": {"data": {"barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "barpolar"}], "bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "bar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram": [{"marker": {"pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "histogram"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatter": [{"fillpattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}, "type": "scatter"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "title": {"text": "Mean Average Precision over increasing IoU thresholds"}, "xaxis": {"anchor": "y", "domain": [0.0, 1.0], "title": {"text": "IoU threshold"}}, "yaxis": {"anchor": "x", "domain": [0.0, 1.0], "title": {"text": "mAP (%)"}}}, "_py2js_addTraces": {}, "_py2js_animate": {}, "_py2js_deleteTraces": {}, "_py2js_moveTraces": {}, "_py2js_relayout": {}, "_py2js_removeLayoutProps": {}, "_py2js_removeTraceProps": {}, "_py2js_restyle": {}, "_py2js_update": {}, "_view_count": 0}, "buffers": [{"encoding": "base64", "path": ["_data", 0, "x", "buffer"], "data": "AAAAAAAA4D+amZmZmZnhPzMzMzMzM+M/zczMzMzM5D9mZmZmZmbmPwAAAAAAAOg/mpmZmZmZ6T8zMzMzMzPrP8zMzMzMzOw/ZmZmZmZm7j8="}, {"encoding": "base64", "path": ["_data", 0, "y", "buffer"], "data": "BgvmbtEZqz+QrX77JeSgPw/SHG8RMZg/FzPxFFFKkD+d5TgXdvSFP90AvT0pBnc/cGmN5aPcWj+g9wM0ODY8PwAAAAAAAAAAAAAAAAAAAAA="}]}, "59b6b99f736e45a194443d68b057d1b2": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_133cc1be177f421a9966f66d3fe1b646", "style": "IPY_MODEL_347551a7203f4be89f4431027592b8e3", "value": "<br><a href=\"#summary_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\" style=\"font-size: 14px;\">Go to top</a>"}}, "133cc1be177f421a9966f66d3fe1b646": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "347551a7203f4be89f4431027592b8e3": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "13abb08ec7d64c16b12a1bc3b559f682": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "f55459f9b5754ad4a5b725573ed8d624": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "df5b385b3cec401db094c4d7ced25cbf": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "children": ["IPY_MODEL_3b351cec565841ae8d6379acb2a811bd", "IPY_MODEL_3b63094628424a82965e8e69133a9873", "IPY_MODEL_9b8fce3330264a1c81cd66edbb005a12", "IPY_MODEL_a6173b8c934444419df4b9ac3db856c4"], "layout": "IPY_MODEL_4879104a6701449dbb8d2018474915c2"}}, "3b351cec565841ae8d6379acb2a811bd": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_a36bac0608454ef1a37199a6ab13ceb1", "style": "IPY_MODEL_f2d4fde0db974f08b09d37121ab06780", "value": "<h4 id=\"MeanAveragePrecisionReport-TrainDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\"><b>Mean Average Precision Report - Train Dataset</b></h4>"}}, "a36bac0608454ef1a37199a6ab13ceb1": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "f2d4fde0db974f08b09d37121ab06780": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "3b63094628424a82965e8e69133a9873": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_aea3aa438902481586287450f1669641", "style": "IPY_MODEL_ef067640e8504c18850788a3f2d3c8b4", "value": "<p>Summarize mean average precision metrics on a dataset and model per IoU and bounding box area. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_mean_average_precision_report.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"}}, "aea3aa438902481586287450f1669641": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "ef067640e8504c18850788a3f2d3c8b4": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "9b8fce3330264a1c81cd66edbb005a12": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_87bc3afbe9dc43908272531ec59db8e7", "style": "IPY_MODEL_2397e40c10aa4d0f88d679f19bc542db", "value": "<h5><b>Conditions Summary</b></h5><style type=\"text/css\">\n#T_dee93_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_dee93_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_dee93_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_dee93_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_dee93_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_dee93_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Status</th>\n      <th class=\"col_heading level0 col1\" >Condition</th>\n      <th class=\"col_heading level0 col2\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_dee93_row0_col0\" class=\"data row0 col0\" ><div style=\"color: red;text-align: center\">\u2716</div></td>\n      <td id=\"T_dee93_row0_col1\" class=\"data row0 col1\" >mAP score is greater than 0.3</td>\n      <td id=\"T_dee93_row0_col2\" class=\"data row0 col2\" >mAP score is: 0.03</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "87bc3afbe9dc43908272531ec59db8e7": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "2397e40c10aa4d0f88d679f19bc542db": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "a6173b8c934444419df4b9ac3db856c4": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_54f71d7e24654efdb3ca47927c54fc0f", "IPY_MODEL_b97c54b532434499979fd3a9391e1f9c", "IPY_MODEL_e243d7d9d6764d5293cd4d3ee4161a1c", "IPY_MODEL_865f606cf15845b093621ad1adac1e31"], "layout": "IPY_MODEL_49d1dc36edaa49abbe2ef6c867824ca1"}}, "54f71d7e24654efdb3ca47927c54fc0f": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_5e3054c393cb427dbc63bb8a28b72349", "style": "IPY_MODEL_3e350a24cd77499bbfafe035d6b8be7a", "value": "<h5><b>Additional Outputs</b></h5>"}}, "5e3054c393cb427dbc63bb8a28b72349": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "3e350a24cd77499bbfafe035d6b8be7a": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "b97c54b532434499979fd3a9391e1f9c": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_1c6fe9475d2c422c9ed183b4fd517f45", "style": "IPY_MODEL_e44f462b56c24a78a60cbbeb03f879b0", "value": "<style type=\"text/css\">\n#T_840d4_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_840d4_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_840d4_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_840d4_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_840d4_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_840d4_\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th class=\"col_heading level0 col0\" >mAP@[.50::.95] (avg.%)</th>\n      <th class=\"col_heading level0 col1\" >mAP@.50 (%)</th>\n      <th class=\"col_heading level0 col2\" >mAP@.75 (%)</th>\n    </tr>\n    <tr>\n      <th class=\"index_name level0\" >Area size</th>\n      <th class=\"blank col0\" >&nbsp;</th>\n      <th class=\"blank col1\" >&nbsp;</th>\n      <th class=\"blank col2\" >&nbsp;</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_840d4_level0_row0\" class=\"row_heading level0 row0\" >All</th>\n      <td id=\"T_840d4_row0_col0\" class=\"data row0 col0\" >0.03</td>\n      <td id=\"T_840d4_row0_col1\" class=\"data row0 col1\" >0.07</td>\n      <td id=\"T_840d4_row0_col2\" class=\"data row0 col2\" >0.02</td>\n    </tr>\n    <tr>\n      <th id=\"T_840d4_level0_row1\" class=\"row_heading level0 row1\" >Small (area < 32^2)</th>\n      <td id=\"T_840d4_row1_col0\" class=\"data row1 col0\" >0.00</td>\n      <td id=\"T_840d4_row1_col1\" class=\"data row1 col1\" >0.00</td>\n      <td id=\"T_840d4_row1_col2\" class=\"data row1 col2\" >0.00</td>\n    </tr>\n    <tr>\n      <th id=\"T_840d4_level0_row2\" class=\"row_heading level0 row2\" >Medium (32^2 < area < 96^2)</th>\n      <td id=\"T_840d4_row2_col0\" class=\"data row2 col0\" >0.10</td>\n      <td id=\"T_840d4_row2_col1\" class=\"data row2 col1\" >0.27</td>\n      <td id=\"T_840d4_row2_col2\" class=\"data row2 col2\" >0.06</td>\n    </tr>\n    <tr>\n      <th id=\"T_840d4_level0_row3\" class=\"row_heading level0 row3\" >Large (area < 96^2)</th>\n      <td id=\"T_840d4_row3_col0\" class=\"data row3 col0\" >0.02</td>\n      <td id=\"T_840d4_row3_col1\" class=\"data row3 col1\" >0.04</td>\n      <td id=\"T_840d4_row3_col2\" class=\"data row3 col2\" >0.02</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "1c6fe9475d2c422c9ed183b4fd517f45": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "e44f462b56c24a78a60cbbeb03f879b0": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "e243d7d9d6764d5293cd4d3ee4161a1c": {"model_name": "FigureModel", "model_module": "jupyterlab-plotly", "model_module_version": "^5.11.0", "state": {"_config": {"plotlyServerURL": "https://plot.ly"}, "_data": [{"hovertemplate": "IoU threshold=%{x}<br>mAP (%)=%{y}<extra></extra>", "legendgroup": "", "line": {"color": "#636efa", "dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines", "name": "", "orientation": "v", "showlegend": false, "x": {"dtype": "float64", "shape": [10]}, "xaxis": "x", "y": {"dtype": "float64", "shape": [10]}, "yaxis": "y", "type": "scatter", "uid": "055b8907-486d-44f5-bd5a-49fdb5962265"}], "_dom_classes": [], "_js2py_layoutDelta": {}, "_js2py_pointsCallback": {}, "_js2py_relayout": {}, "_js2py_restyle": {}, "_js2py_traceDeltas": {}, "_js2py_update": {}, "_layout": {"legend": {"tracegroupgap": 0}, "template": {"data": {"barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "barpolar"}], "bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "bar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram": [{"marker": {"pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "histogram"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatter": [{"fillpattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}, "type": "scatter"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "title": {"text": "Mean Average Precision over increasing IoU thresholds"}, "xaxis": {"anchor": "y", "domain": [0.0, 1.0], "title": {"text": "IoU threshold"}}, "yaxis": {"anchor": "x", "domain": [0.0, 1.0], "title": {"text": "mAP (%)"}}}, "_py2js_addTraces": {}, "_py2js_animate": {}, "_py2js_deleteTraces": {}, "_py2js_moveTraces": {}, "_py2js_relayout": {}, "_py2js_removeLayoutProps": {}, "_py2js_removeTraceProps": {}, "_py2js_restyle": {}, "_py2js_update": {}, "_view_count": 0}, "buffers": [{"encoding": "base64", "path": ["_data", 0, "x", "buffer"], "data": "AAAAAAAA4D+amZmZmZnhPzMzMzMzM+M/zczMzMzM5D9mZmZmZmbmPwAAAAAAAOg/mpmZmZmZ6T8zMzMzMzPrP8zMzMzMzOw/ZmZmZmZm7j8="}, {"encoding": "base64", "path": ["_data", 0, "y", "buffer"], "data": "BSFOmC5zsT8514rrNLyqP2iHz+I3DqU/v5hhfP1PoD+QNvwyd9uZP3+pzGst+ZM//fA+IwNojj+OtiyKbl+HP/GgbeQr0YQ/+tliZfhGhD8="}]}, "865f606cf15845b093621ad1adac1e31": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_2905cec415284bb3a3491c0c7c8701a5", "style": "IPY_MODEL_d68e618d70134b66bf31cc5b60495951", "value": "<br><a href=\"#summary_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\" style=\"font-size: 14px;\">Go to top</a>"}}, "2905cec415284bb3a3491c0c7c8701a5": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "d68e618d70134b66bf31cc5b60495951": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "49d1dc36edaa49abbe2ef6c867824ca1": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "4879104a6701449dbb8d2018474915c2": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "df9a8577b82641b2960bfe2b5a96bf49": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "children": ["IPY_MODEL_40d7469c09f04b34a8eaf003bec6d24b", "IPY_MODEL_313ca28306254e4eade0ad7906782f0f", "IPY_MODEL_e9a9004ed4bd479fa221f01330360663", "IPY_MODEL_c3e45c01898d4467a78362b8c2857e99"], "layout": "IPY_MODEL_0c6ad34f152e4e8db4affb23ad4f7e70"}}, "40d7469c09f04b34a8eaf003bec6d24b": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_07c028ba359a448e87bfceb2bf23d45d", "style": "IPY_MODEL_d2ce89fa24c3477f8c9ca07a52ab5dcf", "value": "<h4 id=\"ImageSegmentPerformance-TestDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\"><b>Image Segment Performance - Test Dataset</b></h4>"}}, "07c028ba359a448e87bfceb2bf23d45d": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "d2ce89fa24c3477f8c9ca07a52ab5dcf": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "313ca28306254e4eade0ad7906782f0f": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_1fdbe83a515a414aaabbcaa2f7adf190", "style": "IPY_MODEL_abc62e26d6de4ebf86de3598b6857c8a", "value": "<p>Segment the data by various properties of the image, and compare the performance of the segments. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_image_segment_performance.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"}}, "1fdbe83a515a414aaabbcaa2f7adf190": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "abc62e26d6de4ebf86de3598b6857c8a": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "e9a9004ed4bd479fa221f01330360663": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_64fcd72f1a8245dea2e090ff4bea779d", "style": "IPY_MODEL_de0f8672c83244319650fc2899a1f063", "value": "<h5><b>Conditions Summary</b></h5><style type=\"text/css\">\n#T_c7921_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_c7921_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_c7921_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_c7921_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_c7921_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_c7921_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Status</th>\n      <th class=\"col_heading level0 col1\" >Condition</th>\n      <th class=\"col_heading level0 col2\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_c7921_row0_col0\" class=\"data row0 col0\" ><div style=\"color: red;text-align: center\">\u2716</div></td>\n      <td id=\"T_c7921_row0_col1\" class=\"data row0 col1\" >Segment's ratio between score to mean is greater than 80%</td>\n      <td id=\"T_c7921_row0_col2\" class=\"data row0 col2\" >Properties with failed segments: Brightness: {'Range': '(-inf, 0.33)', 'Metric': 'Average Precision', 'Ratio': 0.11}, Mean Blue Relative Intensity: {'Range': '[0.2, 0.23)', 'Metric': 'Average Precision', 'Ratio': 0.29}, Mean Green Relative Intensity: {'Range': '[0.41, 0.45)', 'Metric': 'Average Recall', 'Ratio': 0.28}, Mean Red Relative Intensity: {'Range': '(-inf, 0.31)', 'Metric': 'Average Precision', 'Ratio': 0.03}, RMS Contrast: {'Range': '[0.16, 0.19)', 'Metric': 'Average Precision', 'Ratio': 0.45}</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "64fcd72f1a8245dea2e090ff4bea779d": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "de0f8672c83244319650fc2899a1f063": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "c3e45c01898d4467a78362b8c2857e99": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_4b10e116e7774613ae86448d4ce299e0", "IPY_MODEL_27a870cb5905440495f7c695869e1027", "IPY_MODEL_018af7ebf66d49d486e940aa4e8677c5"], "layout": "IPY_MODEL_b2299fa76f4e41a1a51d3a2260bb9685"}}, "4b10e116e7774613ae86448d4ce299e0": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_6507c747e9f545d697f73419b22c8859", "style": "IPY_MODEL_864f8a280b62440193e40cbf5055696b", "value": "<h5><b>Additional Outputs</b></h5>"}}, "6507c747e9f545d697f73419b22c8859": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "864f8a280b62440193e40cbf5055696b": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "27a870cb5905440495f7c695869e1027": {"model_name": "FigureModel", "model_module": "jupyterlab-plotly", "model_module_version": "^5.11.0", "state": {"_config": {"plotlyServerURL": "https://plot.ly"}, "_data": [{"alignmentgroup": "True", "customdata": [[18], [18], [18], [18], [18]], "hovertemplate": "Metric=Average Precision<br>Property=Brightness<br>Range=%{x}<br>Value=%{y}<br>Number of samples=%{customdata[0]}<extra></extra>", "legendgroup": "Average Precision", "marker": {"color": "rgb(102, 197, 204)", "pattern": {"shape": ""}}, "name": "Average Precision", "offsetgroup": "Average Precision", "orientation": "v", "showlegend": true, "textposition": "auto", "width": 0.2, "x": ["(-inf, 0.33)", "[0.33, 0.38)", "[0.38, 0.44)", "[0.44, 0.52)", "[0.52, inf)"], "xaxis": "x", "y": {"dtype": "float64", "shape": [5]}, "yaxis": "y", "type": "bar", "uid": "5be42bbc-e3fb-496c-9dd1-b679923567ff"}, {"alignmentgroup": "True", "customdata": [[18], [18], [18], [18], [18]], "hovertemplate": "Metric=Average Precision<br>Property=RMS Contrast<br>Range=%{x}<br>Value=%{y}<br>Number of samples=%{customdata[0]}<extra></extra>", "legendgroup": "Average Precision", "marker": {"color": "rgb(102, 197, 204)", "pattern": {"shape": ""}}, "name": "Average Precision", "offsetgroup": "Average Precision", "orientation": "v", "showlegend": false, "textposition": "auto", "width": 0.2, "x": ["(-inf, 0.13)", "[0.13, 0.16)", "[0.16, 0.19)", "[0.19, 0.23)", "[0.23, inf)"], "xaxis": "x2", "y": {"dtype": "float64", "shape": [5]}, "yaxis": "y2", "type": "bar", "uid": "accf8c1e-a247-4b13-ad28-6fd30ea3f73d"}, {"alignmentgroup": "True", "customdata": [[18], [18], [18], [18], [18]], "hovertemplate": "Metric=Average Precision<br>Property=Mean Blue Relative Intensity<br>Range=%{x}<br>Value=%{y}<br>Number of samples=%{customdata[0]}<extra></extra>", "legendgroup": "Average Precision", "marker": {"color": "rgb(102, 197, 204)", "pattern": {"shape": ""}}, "name": "Average Precision", "offsetgroup": "Average Precision", "orientation": "v", "showlegend": false, "textposition": "auto", "width": 0.2, "x": ["(-inf, 0.2)", "[0.2, 0.23)", "[0.23, 0.26)", "[0.26, 0.29)", "[0.29, inf)"], "xaxis": "x3", "y": {"dtype": "float64", "shape": [5]}, "yaxis": "y3", "type": "bar", "uid": "21452ad4-c3a0-4e90-9a1c-d6caea3724f5"}], "_dom_classes": [], "_js2py_layoutDelta": {}, "_js2py_pointsCallback": {}, "_js2py_relayout": {}, "_js2py_restyle": {}, "_js2py_traceDeltas": {}, "_js2py_update": {}, "_layout": {"annotations": [{"showarrow": false, "text": "Brightness", "x": 0.14666666666666667, "xanchor": "center", "xref": "paper", "y": 1.0, "yanchor": "bottom", "yref": "paper"}, {"showarrow": false, "text": "RMS Contrast", "x": 0.49, "xanchor": "center", "xref": "paper", "y": 1.0, "yanchor": "bottom", "yref": "paper"}, {"showarrow": false, "text": "Mean Blue Relative Intensity", "x": 0.8333333333333333, "xanchor": "center", "xref": "paper", "y": 1.0, "yanchor": "bottom", "yref": "paper"}, {"showarrow": false, "text": "Average Precision", "textangle": 90, "x": 0.98, "xanchor": "left", "xref": "paper", "y": 0.5, "yanchor": "middle", "yref": "paper"}], "barmode": "group", "legend": {"title": {"text": "Metric"}, "tracegroupgap": 0}, "template": {"data": {"barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "barpolar"}], "bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "bar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram": [{"marker": {"pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "histogram"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatter": [{"fillpattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}, "type": "scatter"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "title": {"text": "Metric Score Per Property Value Segment (showing top 3 properties by diffrence in segments)"}, "xaxis": {"anchor": "y", "domain": [0.0, 0.29333333333333333], "type": "category"}, "yaxis": {"anchor": "x", "domain": [0.0, 1.0], "showticklabels": true}, "xaxis2": {"anchor": "y2", "domain": [0.3433333333333333, 0.6366666666666667], "type": "category"}, "yaxis2": {"anchor": "x2", "domain": [0.0, 1.0], "matches": "y", "showticklabels": true}, "xaxis3": {"anchor": "y3", "domain": [0.6866666666666666, 0.98], "type": "category"}, "yaxis3": {"anchor": "x3", "domain": [0.0, 1.0], "matches": "y", "showticklabels": true}}, "_py2js_addTraces": {}, "_py2js_animate": {}, "_py2js_deleteTraces": {}, "_py2js_moveTraces": {}, "_py2js_relayout": {}, "_py2js_removeLayoutProps": {}, "_py2js_removeTraceProps": {}, "_py2js_restyle": {}, "_py2js_update": {}, "_view_count": 0}, "buffers": [{"encoding": "base64", "path": ["_data", 0, "y", "buffer"], "data": "UOFT4sEBZD+6EJcGS8x1P2gkhY/WApw/UGgMQnwpoz/NSkZvchKmPw=="}, {"encoding": "base64", "path": ["_data", 1, "y", "buffer"], "data": "qjdGlZCXij9xnsMvsMiFP1b//Ih7IIM/ls5SDDJMrT8aPbEx4+6NPw=="}, {"encoding": "base64", "path": ["_data", 2, "y", "buffer"], "data": "SYq3yNbwgD9CQ0U/Qtd/PxDD/6MD8Is/5zzwEx41mT/6j4Ubqhi0Pw=="}]}, "018af7ebf66d49d486e940aa4e8677c5": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_90a4831e22cd49838a212d761b6ebd5e", "style": "IPY_MODEL_ff9b151bc12a4b19b54624d79a621b2e", "value": "<br><a href=\"#summary_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\" style=\"font-size: 14px;\">Go to top</a>"}}, "90a4831e22cd49838a212d761b6ebd5e": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "ff9b151bc12a4b19b54624d79a621b2e": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "b2299fa76f4e41a1a51d3a2260bb9685": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "0c6ad34f152e4e8db4affb23ad4f7e70": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "c09b0d3d86e1477fb6b823f3fe86882a": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "children": ["IPY_MODEL_946745218aa147639e534049ddd6aeeb", "IPY_MODEL_9f57da96608c48c9b29f3df09daa4483", "IPY_MODEL_c500ac9eb3fc44db81308b1b5ec0eb6d", "IPY_MODEL_53b8b20768fc4ee7ad851cad65220771"], "layout": "IPY_MODEL_aa55055839b94e53b7a98a736a0f0f83"}}, "946745218aa147639e534049ddd6aeeb": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_3e104c682d85475cbc9f317f01bbe8dd", "style": "IPY_MODEL_8ba76ba053114dde93dd880ee0dd5b8a", "value": "<h4 id=\"ImageSegmentPerformance-TrainDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\"><b>Image Segment Performance - Train Dataset</b></h4>"}}, "3e104c682d85475cbc9f317f01bbe8dd": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "8ba76ba053114dde93dd880ee0dd5b8a": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "9f57da96608c48c9b29f3df09daa4483": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_bf8403e6b4314c9a86c7c492a707ba52", "style": "IPY_MODEL_ba5e2c72837545b8b64f5d7c67e17ac8", "value": "<p>Segment the data by various properties of the image, and compare the performance of the segments. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_image_segment_performance.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"}}, "bf8403e6b4314c9a86c7c492a707ba52": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "ba5e2c72837545b8b64f5d7c67e17ac8": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "c500ac9eb3fc44db81308b1b5ec0eb6d": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_83fb7069e1ac4e6cb64fee75eb2d7122", "style": "IPY_MODEL_3f489d412f81407c8157c9820dfa92f3", "value": "<h5><b>Conditions Summary</b></h5><style type=\"text/css\">\n#T_00421_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_00421_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_00421_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_00421_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_00421_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_00421_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Status</th>\n      <th class=\"col_heading level0 col1\" >Condition</th>\n      <th class=\"col_heading level0 col2\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_00421_row0_col0\" class=\"data row0 col0\" ><div style=\"color: red;text-align: center\">\u2716</div></td>\n      <td id=\"T_00421_row0_col1\" class=\"data row0 col1\" >Segment's ratio between score to mean is greater than 80%</td>\n      <td id=\"T_00421_row0_col2\" class=\"data row0 col2\" >Properties with failed segments: Brightness: {'Range': '[0.32, 0.38)', 'Metric': 'Average Recall', 'Ratio': 0.53}, Mean Blue Relative Intensity: {'Range': '(-inf, 0.2)', 'Metric': 'Average Recall', 'Ratio': 0.68}, Mean Green Relative Intensity: {'Range': '[0.45, 0.48)', 'Metric': 'Average Precision', 'Ratio': 0.54}, Mean Red Relative Intensity: {'Range': '(-inf, 0.31)', 'Metric': 'Average Recall', 'Ratio': 0.71}, RMS Contrast: {'Range': '[0.17, 0.2)', 'Metric': 'Average Precision', 'Ratio': 0.64}</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "83fb7069e1ac4e6cb64fee75eb2d7122": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "3f489d412f81407c8157c9820dfa92f3": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "53b8b20768fc4ee7ad851cad65220771": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_dc249674d7304d0797284d3c236d9f49", "IPY_MODEL_ca7ca745adef4dbe935ff14036cf9e03", "IPY_MODEL_ec48afe4540f46119b8740515e1c164d"], "layout": "IPY_MODEL_cc108a2a966d4fdf87fdb54283cbbda8"}}, "dc249674d7304d0797284d3c236d9f49": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_184ec91040534544911e95c0556f75df", "style": "IPY_MODEL_6947931cd75d47ef85b02d64a319abd7", "value": "<h5><b>Additional Outputs</b></h5>"}}, "184ec91040534544911e95c0556f75df": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "6947931cd75d47ef85b02d64a319abd7": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "ca7ca745adef4dbe935ff14036cf9e03": {"model_name": "FigureModel", "model_module": "jupyterlab-plotly", "model_module_version": "^5.11.0", "state": {"_config": {"plotlyServerURL": "https://plot.ly"}, "_data": [{"alignmentgroup": "True", "customdata": [[161], [161], [161], [161], [161]], "hovertemplate": "Metric=Average Precision<br>Property=RMS Contrast<br>Range=%{x}<br>Value=%{y}<br>Number of samples=%{customdata[0]}<extra></extra>", "legendgroup": "Average Precision", "marker": {"color": "rgb(102, 197, 204)", "pattern": {"shape": ""}}, "name": "Average Precision", "offsetgroup": "Average Precision", "orientation": "v", "showlegend": true, "textposition": "auto", "width": 0.2, "x": ["(-inf, 0.13)", "[0.13, 0.17)", "[0.17, 0.2)", "[0.2, 0.22)", "[0.22, inf)"], "xaxis": "x", "y": {"dtype": "float64", "shape": [5]}, "yaxis": "y", "type": "bar", "uid": "55833c29-a518-4e0f-9c76-03d44bd5b1bf"}, {"alignmentgroup": "True", "customdata": [[161], [161], [161], [161], [161]], "hovertemplate": "Metric=Average Precision<br>Property=Mean Red Relative Intensity<br>Range=%{x}<br>Value=%{y}<br>Number of samples=%{customdata[0]}<extra></extra>", "legendgroup": "Average Precision", "marker": {"color": "rgb(102, 197, 204)", "pattern": {"shape": ""}}, "name": "Average Precision", "offsetgroup": "Average Precision", "orientation": "v", "showlegend": false, "textposition": "auto", "width": 0.2, "x": ["(-inf, 0.31)", "[0.31, 0.33)", "[0.33, 0.34)", "[0.34, 0.36)", "[0.36, inf)"], "xaxis": "x2", "y": {"dtype": "float64", "shape": [5]}, "yaxis": "y2", "type": "bar", "uid": "ab2f7d0d-8589-4992-b81e-f88055e9e743"}, {"alignmentgroup": "True", "customdata": [[161], [161], [161], [161], [161]], "hovertemplate": "Metric=Average Precision<br>Property=Mean Green Relative Intensity<br>Range=%{x}<br>Value=%{y}<br>Number of samples=%{customdata[0]}<extra></extra>", "legendgroup": "Average Precision", "marker": {"color": "rgb(102, 197, 204)", "pattern": {"shape": ""}}, "name": "Average Precision", "offsetgroup": "Average Precision", "orientation": "v", "showlegend": false, "textposition": "auto", "width": 0.2, "x": ["(-inf, 0.36)", "[0.36, 0.41)", "[0.41, 0.45)", "[0.45, 0.48)", "[0.48, inf)"], "xaxis": "x3", "y": {"dtype": "float64", "shape": [5]}, "yaxis": "y3", "type": "bar", "uid": "2dc3a7c0-3097-4565-b8e9-d622a25d71e7"}], "_dom_classes": [], "_js2py_layoutDelta": {}, "_js2py_pointsCallback": {}, "_js2py_relayout": {}, "_js2py_restyle": {}, "_js2py_traceDeltas": {}, "_js2py_update": {}, "_layout": {"annotations": [{"showarrow": false, "text": "RMS Contrast", "x": 0.14666666666666667, "xanchor": "center", "xref": "paper", "y": 1.0, "yanchor": "bottom", "yref": "paper"}, {"showarrow": false, "text": "Mean Red Relative Intensity", "x": 0.49, "xanchor": "center", "xref": "paper", "y": 1.0, "yanchor": "bottom", "yref": "paper"}, {"showarrow": false, "text": "Mean Green Relative Intensity", "x": 0.8333333333333333, "xanchor": "center", "xref": "paper", "y": 1.0, "yanchor": "bottom", "yref": "paper"}, {"showarrow": false, "text": "Average Precision", "textangle": 90, "x": 0.98, "xanchor": "left", "xref": "paper", "y": 0.5, "yanchor": "middle", "yref": "paper"}], "barmode": "group", "legend": {"title": {"text": "Metric"}, "tracegroupgap": 0}, "template": {"data": {"barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "barpolar"}], "bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "bar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram": [{"marker": {"pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "histogram"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatter": [{"fillpattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}, "type": "scatter"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "title": {"text": "Metric Score Per Property Value Segment (showing top 3 properties by diffrence in segments)"}, "xaxis": {"anchor": "y", "domain": [0.0, 0.29333333333333333], "type": "category"}, "yaxis": {"anchor": "x", "domain": [0.0, 1.0], "showticklabels": true}, "xaxis2": {"anchor": "y2", "domain": [0.3433333333333333, 0.6366666666666667], "type": "category"}, "yaxis2": {"anchor": "x2", "domain": [0.0, 1.0], "matches": "y", "showticklabels": true}, "xaxis3": {"anchor": "y3", "domain": [0.6866666666666666, 0.98], "type": "category"}, "yaxis3": {"anchor": "x3", "domain": [0.0, 1.0], "matches": "y", "showticklabels": true}}, "_py2js_addTraces": {}, "_py2js_animate": {}, "_py2js_deleteTraces": {}, "_py2js_moveTraces": {}, "_py2js_relayout": {}, "_py2js_removeLayoutProps": {}, "_py2js_removeTraceProps": {}, "_py2js_restyle": {}, "_py2js_update": {}, "_view_count": 0}, "buffers": [{"encoding": "base64", "path": ["_data", 0, "y", "buffer"], "data": "JXRcXuJalz+r47LAByaWPzYUli4HK5I/Iz8Q103dnz/G/oETTdimPw=="}, {"encoding": "base64", "path": ["_data", 1, "y", "buffer"], "data": "yjHMU8Kbkz+KLQLnymqTP3ea8WbsTJQ/HCKWQnsdlD8hb5+BaSGoPw=="}, {"encoding": "base64", "path": ["_data", 2, "y", "buffer"], "data": "YsKDDHeUpz/rH3r8KfagP/balbPxtJM/5SBNxni8jT+R12fT6YSWPw=="}]}, "ec48afe4540f46119b8740515e1c164d": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_d3ea21c070944b6abbb19e4c8da19ca6", "style": "IPY_MODEL_4ce2cb33374b444da0dea9bbd1f37410", "value": "<br><a href=\"#summary_UH17J8QO09VS9KKH4A3YJTU7F-section-BMENU\" style=\"font-size: 14px;\">Go to top</a>"}}, "d3ea21c070944b6abbb19e4c8da19ca6": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "4ce2cb33374b444da0dea9bbd1f37410": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "cc108a2a966d4fdf87fdb54283cbbda8": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "aa55055839b94e53b7a98a736a0f0f83": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "2e615e29cede467fb660dd4daaf12d61": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "7d5f51686af44b8eae597c592464f7c6": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "c4fda67b256a41da921b5102aede2109": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "a14483d9d5314d2693c28f19c0b33ec1": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_8e19c878dde44c48bbff02e7dd157cbd", "IPY_MODEL_3f5012aca8f147819f6e0eb0bdc45a67"], "layout": "IPY_MODEL_4e82ce1ce9284f7d8ea74d2bf59f262d"}}, "8e19c878dde44c48bbff02e7dd157cbd": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_02f814864d2642cbaf4c0f086bc68a64", "style": "IPY_MODEL_1d70a63252c549e0844c2fe8dbcc27af", "value": "<span id=\"summary_UH17J8QO09VS9KKH4A3YJTU7F-section-I3DO7\"></span>"}}, "02f814864d2642cbaf4c0f086bc68a64": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "1d70a63252c549e0844c2fe8dbcc27af": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "3f5012aca8f147819f6e0eb0bdc45a67": {"model_name": "AccordionModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "_titles": {"0": "Passed"}, "children": ["IPY_MODEL_6057245c5fc24f1ba3432fc7c1b81e2b"], "layout": "IPY_MODEL_7ba28605ae934f36be23c965002254e1", "selected_index": null}}, "6057245c5fc24f1ba3432fc7c1b81e2b": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_5433740ffd044a6eb043564064e9295b", "IPY_MODEL_4e6c133cda5f4e29bc3ea0f158ab08af", "IPY_MODEL_ea18939f07194af59d649c6b67f07b17"], "layout": "IPY_MODEL_05a069fe06cf44018cc26874e2fee6a7"}}, "5433740ffd044a6eb043564064e9295b": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_91d8e81ea8d84f72ab076c48b1afe0db", "style": "IPY_MODEL_e8a2727b60dc4f23a20c71a74506e09c", "value": "<style type=\"text/css\">\n#T_37204_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_37204_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_37204_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_37204_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_37204_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_37204_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Status</th>\n      <th class=\"col_heading level0 col1\" >Check</th>\n      <th class=\"col_heading level0 col2\" >Condition</th>\n      <th class=\"col_heading level0 col3\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_37204_row0_col0\" class=\"data row0 col0\" ><div style=\"color: green;text-align: center\">\u2713</div></td>\n      <td id=\"T_37204_row0_col1\" class=\"data row0 col1\" ><a href=\"#TrainTestPredictionDrift_UH17J8QO09VS9KKH4A3YJTU7F-section-I3DO7\">Train Test Prediction Drift</a></td>\n      <td id=\"T_37204_row0_col2\" class=\"data row0 col2\" >categorical drift score < 0.15 and numerical drift score < 0.075 for prediction drift</td>\n      <td id=\"T_37204_row0_col3\" class=\"data row0 col3\" >Passed for 3 prediction properties out of 3 prediction properties.\nFound prediction property \"Samples Per Class\" has the highest categorical drift score: 0\nFound prediction property \"Bounding Box Area (in pixels)\" has the highest numerical drift score: 0.05</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "91d8e81ea8d84f72ab076c48b1afe0db": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "e8a2727b60dc4f23a20c71a74506e09c": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "4e6c133cda5f4e29bc3ea0f158ab08af": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_32f867fcac0c45c39206ad025150853b", "style": "IPY_MODEL_94eaef3fe4924a6fa520bb03ba1ae56a", "value": "<hr style=\"background-color: #eee;border: 0 none;color: #eee;height: 4px;\">"}}, "32f867fcac0c45c39206ad025150853b": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "94eaef3fe4924a6fa520bb03ba1ae56a": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "ea18939f07194af59d649c6b67f07b17": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "children": ["IPY_MODEL_04e3ed3266144500ba9c4fb8054c5001", "IPY_MODEL_3b1e76c68f444a118e0ac8737081f3be", "IPY_MODEL_9a6736aa52824b1ba9f2a8a80506e8d8", "IPY_MODEL_feafac129420478c983ed6463e5b1c14"], "layout": "IPY_MODEL_2c1e9c4adfcf4cd3b74256c7c600f8a7"}}, "04e3ed3266144500ba9c4fb8054c5001": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_3246c33a2356471097d01ad5958c00e1", "style": "IPY_MODEL_cf59313c723e4f3f9f30247492f8ef72", "value": "<h4 id=\"TrainTestPredictionDrift_UH17J8QO09VS9KKH4A3YJTU7F-section-I3DO7\"><b>Train Test Prediction Drift</b></h4>"}}, "3246c33a2356471097d01ad5958c00e1": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "cf59313c723e4f3f9f30247492f8ef72": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "3b1e76c68f444a118e0ac8737081f3be": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_522e8368dbbc4462bc4367b46141dc32", "style": "IPY_MODEL_0e73bb8d0601491eaccdf1b2ae3bc645", "value": "<p>    Calculate prediction drift between train dataset and test dataset, using statistical measures. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_train_test_prediction_drift.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"}}, "522e8368dbbc4462bc4367b46141dc32": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "0e73bb8d0601491eaccdf1b2ae3bc645": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "9a6736aa52824b1ba9f2a8a80506e8d8": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_24b70c6d114f4ae6a8968c79a29cf759", "style": "IPY_MODEL_30559bde80d345adb0e2acd6f4dfa75d", "value": "<h5><b>Conditions Summary</b></h5><style type=\"text/css\">\n#T_d81fb_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_d81fb_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_d81fb_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_d81fb_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_d81fb_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_d81fb_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Status</th>\n      <th class=\"col_heading level0 col1\" >Condition</th>\n      <th class=\"col_heading level0 col2\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_d81fb_row0_col0\" class=\"data row0 col0\" ><div style=\"color: green;text-align: center\">\u2713</div></td>\n      <td id=\"T_d81fb_row0_col1\" class=\"data row0 col1\" >categorical drift score < 0.15 and numerical drift score < 0.075 for prediction drift</td>\n      <td id=\"T_d81fb_row0_col2\" class=\"data row0 col2\" >Passed for 3 prediction properties out of 3 prediction properties.\nFound prediction property \"Samples Per Class\" has the highest categorical drift score: 0\nFound prediction property \"Bounding Box Area (in pixels)\" has the highest numerical drift score: 0.05</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "24b70c6d114f4ae6a8968c79a29cf759": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "30559bde80d345adb0e2acd6f4dfa75d": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "feafac129420478c983ed6463e5b1c14": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_6615824ebc514ba0ad893fc58f2a189f", "IPY_MODEL_fafac57581da4339909a3fa4311a4d28", "IPY_MODEL_5917aabea8b942498f9a1aaafcf9b47e", "IPY_MODEL_e8d9038450ae480f917ce3afe00796e5", "IPY_MODEL_593b1ca24c0e46a4bbe2c1bcc50d8095", "IPY_MODEL_22959f1069b7471bbfcc9d976c6844ff", "IPY_MODEL_e0d1c9dcf486406bb873bf4226ce61f5"], "layout": "IPY_MODEL_a41dcc189b434bce8cdced9ebc9b79a7"}}, "6615824ebc514ba0ad893fc58f2a189f": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_03ebd4f2af344b7d8949b8c38d30e4e4", "style": "IPY_MODEL_d9d8d9f122d745b49594deeb31b21e38", "value": "<h5><b>Additional Outputs</b></h5>"}}, "03ebd4f2af344b7d8949b8c38d30e4e4": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "d9d8d9f122d745b49594deeb31b21e38": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "fafac57581da4339909a3fa4311a4d28": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_595000d884b04ae5b244243d9651cfe4", "style": "IPY_MODEL_5ac7d356c0314f388b615c0fdaef78e4", "value": "<div><span>The Drift score is a measure for the difference between two distributions. In this check, drift is measured for the distribution of the following prediction properties: ['Samples Per Class', 'Bounding Box Area (in pixels)', 'Number of Bounding Boxes Per Image']. </span></div>"}}, "595000d884b04ae5b244243d9651cfe4": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "5ac7d356c0314f388b615c0fdaef78e4": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "5917aabea8b942498f9a1aaafcf9b47e": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_af09652c6cbb400ea1a187e0e65e4234", "style": "IPY_MODEL_6848343d5f2c4714993344458cd5a4c0", "value": "<div>For discrete distribution plots, showing the top 10 categories with largest difference between train and test.</div>"}}, "af09652c6cbb400ea1a187e0e65e4234": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "6848343d5f2c4714993344458cd5a4c0": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "e8d9038450ae480f917ce3afe00796e5": {"model_name": "FigureModel", "model_module": "jupyterlab-plotly", "model_module_version": "^5.11.0", "state": {"_config": {"plotlyServerURL": "https://plot.ly"}, "_data": [{"base": 0, "marker": {"color": "#01B8AA"}, "offsetgroup": "0", "orientation": "h", "showlegend": false, "x": [0.04909983289982629], "xaxis": "x", "y": ["Drift Score"], "yaxis": "y", "type": "bar", "uid": "f68d90a9-bb3e-4905-a158-548680c84338"}, {"fill": "tozeroy", "line": {"color": "#00008b", "shape": "spline"}, "name": "Train Dataset", "x": [0.0, 40.57234451293945, 88.40034179687501, 101.94984039306641, 142.885078125, 144.57436096191407, 209.68835510253908, 210.84809470663265, 233.3550714111328, 255.44640502929687, 277.5053771972656, 286.138935546875, 337.81747192382807, 341.54990844726564, 375.3567028808594, 391.6453649902344, 421.6961894132653, 435.5433337402344, 476.99168090820314, 477.0551733398436, 532.7958935546876, 550.8075854492188, 609.4138110351562, 610.4113647460938, 632.544284119898, 674.1289916992188, 687.7242089843751, 729.5895654296875, 790.2676708984377, 822.4559155273437, 843.3923788265306, 874.9538818359376, 967.7557666015625, 989.3529272460937, 1047.158798828125, 1054.2404735331634, 1059.1815087890625, 1146.2523876953126, 1189.4223876953126, 1239.7685546875, 1265.088568239796, 1310.629248046875, 1315.47939453125, 1382.8502880859376, 1405.4354980468752, 1434.7302783203127, 1475.9366629464284, 1485.2040722656252, 1508.4928369140625, 1533.6705048230351, 1541.8587548828125, 1561.3465576171875, 1602.7967529296877, 1609.080810546875, 1609.080810546875, 1648.795517578125, 1659.3760205078127, 1666.134924816991, 1686.7847576530612, 1706.5015576171875, 1714.1850244140628, 1730.3003662109375, 1757.8273046875, 1772.892802734375, 1808.639404296875, 1808.639404296875, 1809.9861474609377, 1844.8886083984373, 1852.6264892578124, 1873.8375830078128, 1894.84630859375, 1897.632852359694, 1921.667861328125, 1934.5618359375, 1936.8492041015627, 1975.7114892578124, 1981.9228271484374, 2022.8222265625002, 2027.868525390625, 2059.975859375, 2064.825390625, 2089.370546875, 2108.4809470663267, 2111.687177734375, 2130.0811328125, 2159.62873046875, 2188.644189453125, 2204.190009765625, 2235.8789062500005, 2251.7717968750003, 2252.12998046875, 2284.6782519531253, 2312.38740234375, 2319.329041772959, 2353.8146484375, 2379.2007324218753, 2387.1789550781255, 2443.326240234375, 2470.8709375000003, 2500.2277246093745, 2514.27498046875, 2530.177136479592, 2537.6693359375, 2564.443701171875, 2587.2828515625006, 2623.5709472656254, 2674.396259765625, 2677.584912109375, 2741.0252311862246, 2780.139609375001, 2794.009824218751, 2895.4793359375003, 2951.873325892857, 3017.5436328125, 3083.181962890628, 3162.7214205994896, 3289.70162109375, 3373.5695153061224, 3454.780908203125, 3584.417610012755, 3795.265704719388, 4006.1137994260203, 4216.9618941326535, 4427.809988839285, 4638.658083545918, 4849.506178252551, 5060.354272959184, 5271.202367665816, 5482.050462372449, 5692.898557079082, 5903.746651785714, 6114.5947464923465, 6325.442841198979, 6536.290935905612, 6747.139030612245, 6957.987125318878, 7168.83522002551, 7379.683314732143, 7590.531409438776, 7801.379504145408, 8012.2275988520405, 8223.075693558674, 8433.923788265307, 8644.771882971938, 8855.61997767857, 9066.468072385203, 9277.316167091836, 9488.164261798469, 9699.012356505102, 9909.860451211734, 10120.708545918367, 10331.556640625], "xaxis": "x2", "y": {"dtype": "float64", "shape": [152]}, "yaxis": "y2", "type": "scatter", "uid": "44b154af-c536-48e0-a6ca-9771c1f51957"}, {"line": {"color": "#00008b", "dash": "dash"}, "mode": "lines+markers", "name": "Train Mean", "x": [1533.6705048230351, 1533.6705048230351], "xaxis": "x2", "y": [0, 0.0003529046444468393], "yaxis": "y2", "type": "scatter", "uid": "aab7b002-68a2-41a2-be6c-77f8e6c7d9cb"}, {"line": {"color": "#00008b"}, "mode": "lines", "name": "Train Median", "x": [1609.080810546875, 1609.080810546875], "xaxis": "x2", "y": [0, 0.0003733876784879912], "yaxis": "y2", "type": "scatter", "uid": "35384c5f-c5d3-4427-8072-34534d526e18"}, {"fill": "tozeroy", "line": {"color": "#69b3a2", "shape": "spline"}, "name": "Test Dataset", "x": [0.0, 40.57234451293945, 88.40034179687501, 101.94984039306641, 142.885078125, 144.57436096191407, 209.68835510253908, 210.84809470663265, 233.3550714111328, 255.44640502929687, 277.5053771972656, 286.138935546875, 337.81747192382807, 341.54990844726564, 375.3567028808594, 391.6453649902344, 421.6961894132653, 435.5433337402344, 476.99168090820314, 477.0551733398436, 532.7958935546876, 550.8075854492188, 609.4138110351562, 610.4113647460938, 632.544284119898, 674.1289916992188, 687.7242089843751, 729.5895654296875, 790.2676708984377, 822.4559155273437, 843.3923788265306, 874.9538818359376, 967.7557666015625, 989.3529272460937, 1047.158798828125, 1054.2404735331634, 1059.1815087890625, 1146.2523876953126, 1189.4223876953126, 1239.7685546875, 1265.088568239796, 1310.629248046875, 1315.47939453125, 1382.8502880859376, 1405.4354980468752, 1434.7302783203127, 1475.9366629464284, 1485.2040722656252, 1508.4928369140625, 1533.6705048230351, 1541.8587548828125, 1561.3465576171875, 1602.7967529296877, 1609.080810546875, 1609.080810546875, 1648.795517578125, 1659.3760205078127, 1666.134924816991, 1686.7847576530612, 1706.5015576171875, 1714.1850244140628, 1730.3003662109375, 1757.8273046875, 1772.892802734375, 1808.639404296875, 1808.639404296875, 1809.9861474609377, 1844.8886083984373, 1852.6264892578124, 1873.8375830078128, 1894.84630859375, 1897.632852359694, 1921.667861328125, 1934.5618359375, 1936.8492041015627, 1975.7114892578124, 1981.9228271484374, 2022.8222265625002, 2027.868525390625, 2059.975859375, 2064.825390625, 2089.370546875, 2108.4809470663267, 2111.687177734375, 2130.0811328125, 2159.62873046875, 2188.644189453125, 2204.190009765625, 2235.8789062500005, 2251.7717968750003, 2252.12998046875, 2284.6782519531253, 2312.38740234375, 2319.329041772959, 2353.8146484375, 2379.2007324218753, 2387.1789550781255, 2443.326240234375, 2470.8709375000003, 2500.2277246093745, 2514.27498046875, 2530.177136479592, 2537.6693359375, 2564.443701171875, 2587.2828515625006, 2623.5709472656254, 2674.396259765625, 2677.584912109375, 2741.0252311862246, 2780.139609375001, 2794.009824218751, 2895.4793359375003, 2951.873325892857, 3017.5436328125, 3083.181962890628, 3162.7214205994896, 3289.70162109375, 3373.5695153061224, 3454.780908203125, 3584.417610012755, 3795.265704719388, 4006.1137994260203, 4216.9618941326535, 4427.809988839285, 4638.658083545918, 4849.506178252551, 5060.354272959184, 5271.202367665816, 5482.050462372449, 5692.898557079082, 5903.746651785714, 6114.5947464923465, 6325.442841198979, 6536.290935905612, 6747.139030612245, 6957.987125318878, 7168.83522002551, 7379.683314732143, 7590.531409438776, 7801.379504145408, 8012.2275988520405, 8223.075693558674, 8433.923788265307, 8644.771882971938, 8855.61997767857, 9066.468072385203, 9277.316167091836, 9488.164261798469, 9699.012356505102, 9909.860451211734, 10120.708545918367, 10331.556640625], "xaxis": "x2", "y": {"dtype": "float64", "shape": [152]}, "yaxis": "y2", "type": "scatter", "uid": "10103126-af7a-4b32-ae95-4eaa218b9724"}, {"line": {"color": "#69b3a2", "dash": "dash"}, "mode": "lines+markers", "name": "Test Mean", "x": [1666.134924816991, 1666.134924816991], "xaxis": "x2", "y": [0, 0.0004169810240095183], "yaxis": "y2", "type": "scatter", "uid": "e6ca9805-2f5a-4d68-b2b9-a2cd9968db56"}, {"line": {"color": "#69b3a2"}, "mode": "lines", "name": "Test Median", "x": [1808.639404296875, 1808.639404296875], "xaxis": "x2", "y": [0, 0.0004779631531220677], "yaxis": "y2", "type": "scatter", "uid": "c761d7fa-cec9-4aab-b6e8-2fd94c3184b4"}], "_dom_classes": [], "_js2py_layoutDelta": {}, "_js2py_pointsCallback": {}, "_js2py_relayout": {}, "_js2py_restyle": {}, "_js2py_traceDeltas": {}, "_js2py_update": {}, "_layout": {"annotations": [{"font": {"size": 16}, "showarrow": false, "text": "Drift Score (Earth Mover's Distance)", "x": 0.5, "xanchor": "center", "xref": "paper", "y": 1.0000000000000002, "yanchor": "bottom", "yref": "paper"}, {"font": {"size": 16}, "showarrow": false, "text": "Distribution Plot", "x": 0.5, "xanchor": "center", "xref": "paper", "y": 0.7200000000000001, "yanchor": "bottom", "yref": "paper"}], "bargroupgap": 0, "height": 400, "legend": {"title": {"text": "Legend"}, "y": 0.6, "yanchor": "top"}, "template": {"data": {"barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "barpolar"}], "bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "bar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram": [{"marker": {"pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "histogram"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatter": [{"fillpattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}, "type": "scatter"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "title": {"text": "Bounding Box Area (in pixels)", "x": 0.5, "xanchor": "center"}, "xaxis": {"anchor": "y", "domain": [0.0, 1.0], "dtick": 0.05, "fixedrange": true, "gridcolor": "black", "linecolor": "black", "range": [0, 0.4], "showgrid": false}, "yaxis": {"anchor": "x", "autorange": true, "color": "black", "domain": [0.9200000000000002, 1.0], "fixedrange": true, "rangemode": "normal", "showgrid": false, "showline": false, "showticklabels": false, "zeroline": false}, "xaxis2": {"anchor": "y2", "domain": [0.0, 1.0], "fixedrange": false, "range": [40.57234451293945, 3454.780908203125], "title": {"text": "Bounding Box Area (in pixels)"}}, "yaxis2": {"anchor": "x2", "domain": [0.0, 0.7200000000000001], "fixedrange": true, "title": {"text": "Probability Density"}}}, "_py2js_addTraces": {}, "_py2js_animate": {}, "_py2js_deleteTraces": {}, "_py2js_moveTraces": {}, "_py2js_relayout": {}, "_py2js_removeLayoutProps": {}, "_py2js_removeTraceProps": {}, "_py2js_restyle": {}, "_py2js_update": {}, "_view_count": 0}, "buffers": [{"encoding": "base64", "path": ["_data", 1, "y", "buffer"], "data": "IVcLYJiZKj9DD6Oyre0tP5y4cO9I1DA/gQ1vm+1TMT9Tn1UcXboyP3ttqDEryDI/VtZGpxyWND8z+f8rAZ00PxeTUbDYGDU/r69+QaN/NT8tDIexWdM1P1c3ba3u7jU/maXppr1XNj8Loe8gZVs2P4h+m6moZTY/ZK5LEZBcNj/XyEq8wjU2P1pbpakBGzY//nYxCt+tNT9d4/2WrK01P7VkhtMQ5TQ/UzxlzQCbND96VpWh+5kzP6BoyCKClTM/jUDIg1QyMz+Bkh+eCnwyP1a5N5uwQjI/xy/cwKecMT/8MHbOQNEwPxGoKLbWejA/0VHBcVlLMD9SKS32MhEwPyWCr8Uqiy8/9Ys9goaQLz/5lMRGzucvPzp0YuSf+S8/CR78kHoDMD8a02QeObMwP7VQyEFvMDE/yP+yrGbeMT84zD4q8z8yP25Ak/O//TI/E8YeveoSMz/LlJudfUc0P8lePI51szQ/2GMeMWVBNT9g+SFyawo2P+e/g0WLNzY/6s6Dq1eoNj+lwRDowSA3P8rCMIpzRzc/Qj3TbmSiNz8pMHOqEF04Pwd0Kt5neDg/B3Qq3md4OD+Ez8CmHR45P6sBPV/4Rzk/O8E0vCZiOT+duOVFS685PzOUi2yr9Dk/yAlRX38OOj95sW5QWUI6PwPE/Rw2kzo/ZxCpSxe7Oj90eGYdZAw7P3R4Zh1kDDs/XjSiQxIPOz9ucREhUUo7PyRL7vu1VDs/Mn8tFuprOz/7f7xPE3s7P26jxaZ9fDs/yQ0/K9GCOz8jZUlD0oE7Pw5hMmtSgTs/HHiWguFpOz+T+vC6gmM7P2qLlMScJzs/gP41BRUeOz+jNJQer9Y6Pz5RT3JPyjo/PcBVi3mFOj+y00Ud6Ug6P1Oi/awrPjo/DXthK3H9OT8rUKVt2oo5P5fPUSyPDjk/GWqDQJLHOD+DlbF7Ui44P06LuOyN3Tc/u65h2LTbNz+FGHF6JC83P0o80NjflTY/Y31v5bJuNj+buRrhQag1P7ltf9LnEjU//fW6dofjND/T6anRWJIzP4W5D7bI6zI/MFfpS2g6Mj85ST14xeUxP8zzXFpAhjE/QF+UfWBZMT8fLF2h0rkwPxwDKDPiMjA/OyUYQiO+Lj+hgY+a8ngsP0qnF7j+VCw/5k5P5SWXKT8swSA19vMnP5sUezz3YSc/u7imnsdkIz+UbALSw1UhP7O2zwu9NR4/bMrfsrkmGj+3Kn5l8s0VP+qZhyXLJhA/sxhx/jVlCj+csRErc6cFP2sE/vNjWP8+jn2eW5go8j5mYPWzRK/lPntIXBMesdw+FSLP3Du00z6dxL3m1nzKPqAih8xk88Q+TclsGtCXxD6XdlPstNvCPonseRQKOcI+j+0BkHYAxT4iNdqERRnDPm0Pm9eBCLk+Yt7US1t/sj6iXHC62LOzPlx9iuyQULQ+OWoarpNbsz6loLb2X5azPtS/aS3gpbI+aWe/Q6pHqj6B+rKl7YqWPgt6c3j+vXQ+ZxqtDi79Qz6ZXxd85dU9PvCxWbxv/m8+1uaO0ykHkj5b+nFfucmjPpXHj9rlJqU+w+glUusmlj4ACBrGuFh9PuYDqBXfqYY+OV7pXpxfnz7NHFn54HOmPg=="}, {"encoding": "base64", "path": ["_data", 4, "y", "buffer"], "data": "VyLedikPIz8d9rnldfMlP+xLwiE+SCk/dV8c2LcwKj+N6z9DssksP5DWY7i54yw/reky2P0yMD/k2ZYW+jkwPzQFSCftuTA/TkC3ExkpMT90VSYAk4kxP17/L+lcqzE/g7IY65tHMj+5m3oG6k8yPxXePNbEiTI/4u4UTeyaMj9EIqQEh6kyPwh/p0VBqTI/+9251WuQMj92MwN6W5AyP/TDvDRDPTI/A+a2Z/cXMj/2ogZBioExP9pA2DykfjE/0AJTN9k7MT9x4A7NUbMwPw3jcIszhDA/CEidgzHcLz/J5ValGiEuP4aPq35zPS0/g0IBzcivLD/SiR49yucrPy2qwCPGJio/NBTKMYPkKT+8Wk4aMYkpPzByue81hyk/j9BglhKHKT9UVjhvdjQqP30mgvu3Cys/z6/z+Qd3LD8Lnm9SplstPwP6wxAIQy8/fWX6CZd8Lz8azsXDGoMxP59dZDF4LzI/FqmgZ3kcMz/Jelwws380P5JgMGaA0jQ/n+yeZkWmNT8Zdt2hvI82PxLWpO9Y3DY/bC8Z0WOTNz9LWKat9hc5PwAAHK1MUjk/AAAcrUxSOT+9M5o2lLs6P00FFGHwGDs/Wt113MdTOz+hNbwZMwM8P8PhWpK3ozw/NdHh8jPgPD8ix//B9Fo9PzLg86WTHj4/nF5I1niBPj/xlYEc5FI/P/GVgRzkUj8/rzkZ9w1aPz9TIMIQOQBAPxhE6n0bEEA/d90stMw2QD+Tw6EQFlZAPx+oqu+1WUA/RfZEIelzQD/bRPfIRX5AP56x5XvYf0A/kQGW/rmOQD8NvFsKGY9AP7V/CF65hEA/AnATAPyBQD/aMnE3umlAP1jIBZIYZUA/pJuPchpKQD/gy3dZSjFAP8OAMK7TLEA/wddReKoRQD+zAeLz8cE/P/f1hsyuVz8/DsYDW+YaPz/n/vgIbJc+P51kqPvUUT4/cLMIaTxQPj+0/4wgFro9P6CbTgT3MT0/tnnetpYOPT88Tu2LiFY8PwTqEYVGxTs/Tkuhg7uVOz/yUVVXNyo6P9tHRaBlYzk/niSIrl5/OD/H4Z+7Pgw4P0At2xU8hTc/MeAPluxDNz+CA2E061E2P5ko7ih+eTU//uG/c10RND8raeBpXQEyP6YWPWa03zE/+fQmhQWGLj/IIMRbjGgrPz5cYa+nVyo/6UpR/h99Iz+VkowQ4JIgP4ffeuekERw/UpoLYeSbGD9IrQvvxvMVP1ObSFEbCRM/DVYIw5DHED+QsYvUY/YLPzychXCvrQE/g36X8KLW4z6PS5Hvc7u1PvxBfBkUYHY+CWu2KL4zJT6KlxfT20HCPeVKJuKJWkw92cmkKpDCwzxhfWzpoqUoPJeqqdctPn07IRqYipT17TvlVQ64qfKLPLQDSBE9JRc9i0fWmVQEkT0AHhfrvzb2Pfthb+ZOvkk+Oa3czT98ij6MhC1TwTC4PsyQeJFZndM+bRANcx493D5Ane5KwAvSPg/nG8HLebQ+kIC/xRKghD7BzX5ysnFCPvFFZyPzSO09WEgJG7ejhD3vDkTH19MJPQo80qo0sXw8liXAjRZM3DvubzX1hMYoOwxIdanmQWM6uXYQNaqTijlnqMMb40egOA=="}]}, "593b1ca24c0e46a4bbe2c1bcc50d8095": {"model_name": "FigureModel", "model_module": "jupyterlab-plotly", "model_module_version": "^5.11.0", "state": {"_config": {"plotlyServerURL": "https://plot.ly"}, "_data": [{"base": 0, "marker": {"color": "#01B8AA"}, "offsetgroup": "0", "orientation": "h", "showlegend": false, "x": [0.020697123714912793], "xaxis": "x", "y": ["Drift Score"], "yaxis": "y", "type": "bar", "uid": "d5a398a8-4383-4035-94f3-d01edcdd1d64"}, {"marker": {"color": "#00008b"}, "name": "Train Dataset", "x": {"dtype": "float64", "shape": [16]}, "xaxis": "x2", "y": {"dtype": "float64", "shape": [16]}, "yaxis": "y2", "type": "bar", "uid": "471cc6d4-0148-444f-9d6c-5769037aa5ab"}, {"marker": {"color": "#69b3a2"}, "name": "Test Dataset", "x": {"dtype": "float64", "shape": [16]}, "xaxis": "x2", "y": {"dtype": "float64", "shape": [16]}, "yaxis": "y2", "type": "bar", "uid": "f8be7254-3fd2-454f-adb4-8fa3c4975020"}], "_dom_classes": [], "_js2py_layoutDelta": {}, "_js2py_pointsCallback": {}, "_js2py_relayout": {}, "_js2py_restyle": {}, "_js2py_traceDeltas": {}, "_js2py_update": {}, "_layout": {"annotations": [{"font": {"size": 16}, "showarrow": false, "text": "Drift Score (Earth Mover's Distance)", "x": 0.5, "xanchor": "center", "xref": "paper", "y": 1.0000000000000002, "yanchor": "bottom", "yref": "paper"}, {"font": {"size": 16}, "showarrow": false, "text": "Distribution Plot", "x": 0.5, "xanchor": "center", "xref": "paper", "y": 0.7200000000000001, "yanchor": "bottom", "yref": "paper"}], "bargroupgap": 0, "height": 400, "legend": {"title": {"text": "Legend"}, "y": 0.6, "yanchor": "top"}, "template": {"data": {"barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "barpolar"}], "bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "bar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram": [{"marker": {"pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "histogram"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatter": [{"fillpattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}, "type": "scatter"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "title": {"text": "Number of Bounding Boxes Per Image", "x": 0.5, "xanchor": "center"}, "xaxis": {"anchor": "y", "domain": [0.0, 1.0], "dtick": 0.05, "fixedrange": true, "gridcolor": "black", "linecolor": "black", "range": [0, 0.4], "showgrid": false}, "yaxis": {"anchor": "x", "autorange": true, "color": "black", "domain": [0.9200000000000002, 1.0], "fixedrange": true, "rangemode": "normal", "showgrid": false, "showline": false, "showticklabels": false, "zeroline": false}, "xaxis2": {"anchor": "y2", "domain": [0.0, 1.0], "range": [-3.4000000000000004, 20.4], "tickmode": "array", "ticks": "outside", "tickvals": {"dtype": "float64", "shape": [16]}}, "yaxis2": {"anchor": "x2", "autorange": true, "domain": [0.0, 0.7200000000000001], "fixedrange": true, "rangemode": "normal", "title": {"text": "Frequency"}}}, "_py2js_addTraces": {}, "_py2js_animate": {}, "_py2js_deleteTraces": {}, "_py2js_moveTraces": {}, "_py2js_relayout": {}, "_py2js_removeLayoutProps": {}, "_py2js_removeTraceProps": {}, "_py2js_restyle": {}, "_py2js_update": {}, "_view_count": 0}, "buffers": [{"encoding": "base64", "path": ["_data", 1, "x", "buffer"], "data": "AAAAAAAAAAAAAAAAAADwPwAAAAAAAABAAAAAAAAACEAAAAAAAAAQQAAAAAAAABRAAAAAAAAAGEAAAAAAAAAcQAAAAAAAACBAAAAAAAAAIkAAAAAAAAAkQAAAAAAAACZAAAAAAAAAKEAAAAAAAAAqQAAAAAAAACxAAAAAAAAAMUA="}, {"encoding": "base64", "path": ["_data", 1, "y", "buffer"], "data": "uQXWM9lxwj+dKnJlbYjHP8QL/wYiscc/ZCELWchCxj8Bpj7fmuW2P7kF1jPZcbI/gU8OlwGfrD+5BdYz2XGiPx2Boq0Gz5E/AaY+35rlhj8dgaKtBs+BP4+TcMZQWoQ/crgM+ORweT+Pk3DGUFpkP4+TcMZQWmQ/j5NwxlBaVD8="}, {"encoding": "base64", "path": ["_data", 2, "x", "buffer"], "data": "AAAAAAAAAAAAAAAAAADwPwAAAAAAAABAAAAAAAAACEAAAAAAAAAQQAAAAAAAABRAAAAAAAAAGEAAAAAAAAAcQAAAAAAAACBAAAAAAAAAIkAAAAAAAAAkQAAAAAAAACZAAAAAAAAAKEAAAAAAAAAqQAAAAAAAACxAAAAAAAAAMUA="}, {"encoding": "base64", "path": ["_data", 2, "y", "buffer"], "data": "F2zBFmzBxj8cx3Ecx3HMPxdswRZswbY/2IIt2IItyD8RERERERHBPxdswRZswaY/HMdxHMdxrD8RERERERGhPxdswRZswYY/F2zBFmzBlj8XbMEWbMGGPxdswRZswYY/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="}, {"encoding": "base64", "path": ["_layout", "xaxis2", "tickvals", "buffer"], "data": "AAAAAAAAAAAAAAAAAADwPwAAAAAAAABAAAAAAAAACEAAAAAAAAAQQAAAAAAAABRAAAAAAAAAGEAAAAAAAAAcQAAAAAAAACBAAAAAAAAAIkAAAAAAAAAkQAAAAAAAACZAAAAAAAAAKEAAAAAAAAAqQAAAAAAAACxAAAAAAAAAMUA="}]}, "22959f1069b7471bbfcc9d976c6844ff": {"model_name": "FigureModel", "model_module": "jupyterlab-plotly", "model_module_version": "^5.11.0", "state": {"_config": {"plotlyServerURL": "https://plot.ly"}, "_data": [{"base": 0, "marker": {"color": "#01B8AA"}, "offsetgroup": "0", "orientation": "h", "showlegend": false, "x": [0], "xaxis": "x", "y": ["Drift Score"], "yaxis": "y", "type": "bar", "uid": "c15b0e3a-68cf-4540-b0c6-96305ee4b128"}, {"marker": {"color": "#00008b"}, "name": "Train Dataset", "x": ["Tomato"], "xaxis": "x2", "y": {"dtype": "float64", "shape": [1]}, "yaxis": "y2", "type": "bar", "uid": "fd566567-8faf-4df0-9b08-d4933fdcc8f1"}, {"marker": {"color": "#69b3a2"}, "name": "Test Dataset", "x": ["Tomato"], "xaxis": "x2", "y": {"dtype": "float64", "shape": [1]}, "yaxis": "y2", "type": "bar", "uid": "4a8650cf-6feb-4397-9ec7-d6c7a2020285"}], "_dom_classes": [], "_js2py_layoutDelta": {}, "_js2py_pointsCallback": {}, "_js2py_relayout": {}, "_js2py_restyle": {}, "_js2py_traceDeltas": {}, "_js2py_update": {}, "_layout": {"annotations": [{"font": {"size": 16}, "showarrow": false, "text": "Drift Score (Cramer's V)", "x": 0.5, "xanchor": "center", "xref": "paper", "y": 1.0000000000000002, "yanchor": "bottom", "yref": "paper"}, {"font": {"size": 16}, "showarrow": false, "text": "Distribution Plot", "x": 0.5, "xanchor": "center", "xref": "paper", "y": 0.7200000000000001, "yanchor": "bottom", "yref": "paper"}], "bargroupgap": 0, "height": 400, "legend": {"title": {"text": "Legend"}, "y": 0.6, "yanchor": "top"}, "template": {"data": {"barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "barpolar"}], "bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "bar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram": [{"marker": {"pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "histogram"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatter": [{"fillpattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}, "type": "scatter"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "title": {"text": "Samples Per Class", "x": 0.5, "xanchor": "center"}, "xaxis": {"anchor": "y", "domain": [0.0, 1.0], "dtick": 0.05, "fixedrange": true, "gridcolor": "black", "linecolor": "black", "range": [0, 0.4], "showgrid": false}, "yaxis": {"anchor": "x", "autorange": true, "color": "black", "domain": [0.9200000000000002, 1.0], "fixedrange": true, "rangemode": "normal", "showgrid": false, "showline": false, "showticklabels": false, "zeroline": false}, "xaxis2": {"anchor": "y2", "domain": [0.0, 1.0], "range": [-3, 3], "type": "category"}, "yaxis2": {"anchor": "x2", "autorange": true, "domain": [0.0, 0.7200000000000001], "fixedrange": true, "rangemode": "normal", "title": {"text": "Frequency"}}}, "_py2js_addTraces": {}, "_py2js_animate": {}, "_py2js_deleteTraces": {}, "_py2js_moveTraces": {}, "_py2js_relayout": {}, "_py2js_removeLayoutProps": {}, "_py2js_removeTraceProps": {}, "_py2js_restyle": {}, "_py2js_update": {}, "_view_count": 0}, "buffers": [{"encoding": "base64", "path": ["_data", 1, "y", "buffer"], "data": "AAAAAAAA8D8="}, {"encoding": "base64", "path": ["_data", 2, "y", "buffer"], "data": "AAAAAAAA8D8="}]}, "e0d1c9dcf486406bb873bf4226ce61f5": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_88dc049716ce40849437bdfde5468ce4", "style": "IPY_MODEL_3fef04be69be46fca43f24db5aaa8a74", "value": "<br><a href=\"#summary_UH17J8QO09VS9KKH4A3YJTU7F-section-I3DO7\" style=\"font-size: 14px;\">Go to top</a>"}}, "88dc049716ce40849437bdfde5468ce4": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "3fef04be69be46fca43f24db5aaa8a74": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "a41dcc189b434bce8cdced9ebc9b79a7": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "2c1e9c4adfcf4cd3b74256c7c600f8a7": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "05a069fe06cf44018cc26874e2fee6a7": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "7ba28605ae934f36be23c965002254e1": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "4e82ce1ce9284f7d8ea74d2bf59f262d": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "adbff32d30fa4c5baccabe26c093751f": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_48c6af1b3fd349f48ac9eb54fb0fb788", "IPY_MODEL_00e45b3d2ba14d6f97fdf3be31007d7c"], "layout": "IPY_MODEL_ade6aac05a0e43139887adfc3891f07a"}}, "48c6af1b3fd349f48ac9eb54fb0fb788": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_5f9b1e9fa612495a9e70b25b79f4df57", "style": "IPY_MODEL_a3563de116d448e5b2de95f1102abb3a", "value": "<span id=\"summary_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\"></span>"}}, "5f9b1e9fa612495a9e70b25b79f4df57": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "a3563de116d448e5b2de95f1102abb3a": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "00e45b3d2ba14d6f97fdf3be31007d7c": {"model_name": "AccordionModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "_titles": {"0": "Other"}, "children": ["IPY_MODEL_8470776104d345929cfaee7efa05cc03"], "layout": "IPY_MODEL_30401e91492b424aa2168b71bb88e565", "selected_index": null}}, "8470776104d345929cfaee7efa05cc03": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_024f383fcc114e65b3005bc2e20e3312", "IPY_MODEL_f7db5ea2978e4818afa95ff13d753e6c", "IPY_MODEL_773c6f5d021042d28e99845586be7a51", "IPY_MODEL_6948d70ceb7b4bfc9fec81972490dd20", "IPY_MODEL_0515797a1f334bac838d302d8b667cf8", "IPY_MODEL_6948d70ceb7b4bfc9fec81972490dd20", "IPY_MODEL_fd553189226a4413afff2ffaf8a493fb", "IPY_MODEL_6948d70ceb7b4bfc9fec81972490dd20", "IPY_MODEL_4f399bc3bdd54687ad62688f1d14388c"], "layout": "IPY_MODEL_88503774773f41ed91c2b21454283a9b"}}, "024f383fcc114e65b3005bc2e20e3312": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_453c33878530455e962caefd7df53488", "style": "IPY_MODEL_978a08a1e2b7424da9c65d4bf43d3b99", "value": "<style type=\"text/css\">\n#T_1d4ca_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_1d4ca_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_1d4ca_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_1d4ca_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_1d4ca_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_1d4ca_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Check</th>\n      <th class=\"col_heading level0 col1\" >Summary</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_1d4ca_row0_col0\" class=\"data row0 col0\" ><a href=\"#MeanAverageRecallReport-TestDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\">Mean Average Recall Report - Test Dataset</a></td>\n      <td id=\"T_1d4ca_row0_col1\" class=\"data row0 col1\" >Summarize mean average recall metrics on a dataset and model per detections and area range. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_mean_average_recall_report.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></td>\n    </tr>\n    <tr>\n      <td id=\"T_1d4ca_row1_col0\" class=\"data row1 col0\" ><a href=\"#MeanAverageRecallReport-TrainDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\">Mean Average Recall Report - Train Dataset</a></td>\n      <td id=\"T_1d4ca_row1_col1\" class=\"data row1 col1\" >Summarize mean average recall metrics on a dataset and model per detections and area range. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_mean_average_recall_report.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></td>\n    </tr>\n    <tr>\n      <td id=\"T_1d4ca_row2_col0\" class=\"data row2 col0\" ><a href=\"#ConfusionMatrix-TestDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\">Confusion Matrix - Test Dataset</a></td>\n      <td id=\"T_1d4ca_row2_col1\" class=\"data row2 col1\" >Calculate the confusion matrix of the model on the given dataset. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_confusion_matrix.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></td>\n    </tr>\n    <tr>\n      <td id=\"T_1d4ca_row3_col0\" class=\"data row3 col0\" ><a href=\"#ConfusionMatrix-TrainDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\">Confusion Matrix - Train Dataset</a></td>\n      <td id=\"T_1d4ca_row3_col1\" class=\"data row3 col1\" >Calculate the confusion matrix of the model on the given dataset. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_confusion_matrix.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></td>\n    </tr>\n  </tbody>\n</table>\n"}}, "453c33878530455e962caefd7df53488": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "978a08a1e2b7424da9c65d4bf43d3b99": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "f7db5ea2978e4818afa95ff13d753e6c": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_03b0761e6fb046438cd01c0907e33830", "style": "IPY_MODEL_dfa6e593077942a486f80bc429bf40d0", "value": "<hr style=\"background-color: #eee;border: 0 none;color: #eee;height: 4px;\">"}}, "03b0761e6fb046438cd01c0907e33830": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "dfa6e593077942a486f80bc429bf40d0": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "773c6f5d021042d28e99845586be7a51": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "children": ["IPY_MODEL_3a69ff91eec2408e85ae5dd1fe64e8a9", "IPY_MODEL_cc882e2ce40946c7b3cdeaabe4842334", "IPY_MODEL_ee6189c47c814d438288ac5a58496646"], "layout": "IPY_MODEL_ee7b24684e8f4a948a77e0757702a01b"}}, "3a69ff91eec2408e85ae5dd1fe64e8a9": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_dc26b7a1f41b448993e576d0f603455e", "style": "IPY_MODEL_13d07c7265b24dac97fa03d59cb83d4f", "value": "<h4 id=\"MeanAverageRecallReport-TestDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\"><b>Mean Average Recall Report - Test Dataset</b></h4>"}}, "dc26b7a1f41b448993e576d0f603455e": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "13d07c7265b24dac97fa03d59cb83d4f": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "cc882e2ce40946c7b3cdeaabe4842334": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_538460b5e26e4719ba73350cbe1f6fbf", "style": "IPY_MODEL_d7ff216b5d084c8d818f66599d2c06fa", "value": "<p>Summarize mean average recall metrics on a dataset and model per detections and area range. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_mean_average_recall_report.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"}}, "538460b5e26e4719ba73350cbe1f6fbf": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "d7ff216b5d084c8d818f66599d2c06fa": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "ee6189c47c814d438288ac5a58496646": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_2bee7ca51b4445148581809e5a8ae05f", "IPY_MODEL_35c6986ff69c4fc686b6235a2de0203a", "IPY_MODEL_65de5c8af5924f6391064571d2621fae"], "layout": "IPY_MODEL_0d24b10161d8403f8603520f8f28f5ec"}}, "2bee7ca51b4445148581809e5a8ae05f": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_9996a087e566449ebad77369de1097df", "style": "IPY_MODEL_c3870bd8561e4f86a1e6ec09d9a4ecb6", "value": "<h5><b>Additional Outputs</b></h5>"}}, "9996a087e566449ebad77369de1097df": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "c3870bd8561e4f86a1e6ec09d9a4ecb6": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "35c6986ff69c4fc686b6235a2de0203a": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_efe4b65eb65c41148efcef9bee202b8c", "style": "IPY_MODEL_0cbaa3fd904042d09e6df3b1b317806b", "value": "<style type=\"text/css\">\n#T_ff352_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_ff352_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_ff352_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_ff352_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_ff352_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_ff352_\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th class=\"col_heading level0 col0\" >AR@1 (%)</th>\n      <th class=\"col_heading level0 col1\" >AR@10 (%)</th>\n      <th class=\"col_heading level0 col2\" >AR@100 (%)</th>\n    </tr>\n    <tr>\n      <th class=\"index_name level0\" >Area size</th>\n      <th class=\"blank col0\" >&nbsp;</th>\n      <th class=\"blank col1\" >&nbsp;</th>\n      <th class=\"blank col2\" >&nbsp;</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_ff352_level0_row0\" class=\"row_heading level0 row0\" >All</th>\n      <td id=\"T_ff352_row0_col0\" class=\"data row0 col0\" >0.02</td>\n      <td id=\"T_ff352_row0_col1\" class=\"data row0 col1\" >0.04</td>\n      <td id=\"T_ff352_row0_col2\" class=\"data row0 col2\" >0.04</td>\n    </tr>\n    <tr>\n      <th id=\"T_ff352_level0_row1\" class=\"row_heading level0 row1\" >Small (area < 32^2)</th>\n      <td id=\"T_ff352_row1_col0\" class=\"data row1 col0\" >0.00</td>\n      <td id=\"T_ff352_row1_col1\" class=\"data row1 col1\" >0.01</td>\n      <td id=\"T_ff352_row1_col2\" class=\"data row1 col2\" >0.01</td>\n    </tr>\n    <tr>\n      <th id=\"T_ff352_level0_row2\" class=\"row_heading level0 row2\" >Medium (32^2 < area < 96^2)</th>\n      <td id=\"T_ff352_row2_col0\" class=\"data row2 col0\" >0.07</td>\n      <td id=\"T_ff352_row2_col1\" class=\"data row2 col1\" >0.17</td>\n      <td id=\"T_ff352_row2_col2\" class=\"data row2 col2\" >0.17</td>\n    </tr>\n    <tr>\n      <th id=\"T_ff352_level0_row3\" class=\"row_heading level0 row3\" >Large (area < 96^2)</th>\n      <td id=\"T_ff352_row3_col0\" class=\"data row3 col0\" >0.00</td>\n      <td id=\"T_ff352_row3_col1\" class=\"data row3 col1\" >0.00</td>\n      <td id=\"T_ff352_row3_col2\" class=\"data row3 col2\" >0.00</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "efe4b65eb65c41148efcef9bee202b8c": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "0cbaa3fd904042d09e6df3b1b317806b": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "65de5c8af5924f6391064571d2621fae": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_cf8c5383498b4b2a881333a80120626f", "style": "IPY_MODEL_4a3eec9dcdd5470b805ca7fbd9a11dfe", "value": "<br><a href=\"#summary_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\" style=\"font-size: 14px;\">Go to top</a>"}}, "cf8c5383498b4b2a881333a80120626f": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "4a3eec9dcdd5470b805ca7fbd9a11dfe": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "0d24b10161d8403f8603520f8f28f5ec": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "ee7b24684e8f4a948a77e0757702a01b": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "6948d70ceb7b4bfc9fec81972490dd20": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_4958a47dab20416b89385f3c9ce5d167", "style": "IPY_MODEL_4223b72c5cbd4c8a909b0374f3bedaa2", "value": "<hr style=\"background-color: #eee;border: 0 none;color: #eee;height: 4px;\">"}}, "4958a47dab20416b89385f3c9ce5d167": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "4223b72c5cbd4c8a909b0374f3bedaa2": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "0515797a1f334bac838d302d8b667cf8": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "children": ["IPY_MODEL_85f95dd431f24a5abbff454d932b3405", "IPY_MODEL_9e1caadf58aa4b78af7373095b1863a6", "IPY_MODEL_b1142550cd9e419b84216ded91ea9186"], "layout": "IPY_MODEL_9b1fd86efec7498b8699a534d943b03b"}}, "85f95dd431f24a5abbff454d932b3405": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_bb837fe73db44d72a0038205fc8c96bc", "style": "IPY_MODEL_6c1518cdb555443088f5b4dda0ce3893", "value": "<h4 id=\"MeanAverageRecallReport-TrainDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\"><b>Mean Average Recall Report - Train Dataset</b></h4>"}}, "bb837fe73db44d72a0038205fc8c96bc": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "6c1518cdb555443088f5b4dda0ce3893": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "9e1caadf58aa4b78af7373095b1863a6": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_118ddc2925fc477baffe968c3c9e8ad1", "style": "IPY_MODEL_cef9a065dea44c5a83f255d15efa3e89", "value": "<p>Summarize mean average recall metrics on a dataset and model per detections and area range. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_mean_average_recall_report.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"}}, "118ddc2925fc477baffe968c3c9e8ad1": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "cef9a065dea44c5a83f255d15efa3e89": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "b1142550cd9e419b84216ded91ea9186": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_229780b49c334130a2c6df067fc7599c", "IPY_MODEL_ce1c28339caa42c2a087d8bc16a5a0d8", "IPY_MODEL_14c86d6bd8ea4f9c92ed969994bb3dc6"], "layout": "IPY_MODEL_74f6c67e229f427bbd5e66fede8b0cba"}}, "229780b49c334130a2c6df067fc7599c": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_4298c59a914e40fcb26e234f58d293cd", "style": "IPY_MODEL_5dace9cc07a746a394e4fce71a9bd51c", "value": "<h5><b>Additional Outputs</b></h5>"}}, "4298c59a914e40fcb26e234f58d293cd": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "5dace9cc07a746a394e4fce71a9bd51c": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "ce1c28339caa42c2a087d8bc16a5a0d8": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_45c8547b0f01408f94953690712422e9", "style": "IPY_MODEL_7ef1aaffb4b34d17ba38fd387a7a5ee3", "value": "<style type=\"text/css\">\n#T_272d9_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_272d9_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_272d9_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_272d9_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_272d9_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_272d9_\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th class=\"col_heading level0 col0\" >AR@1 (%)</th>\n      <th class=\"col_heading level0 col1\" >AR@10 (%)</th>\n      <th class=\"col_heading level0 col2\" >AR@100 (%)</th>\n    </tr>\n    <tr>\n      <th class=\"index_name level0\" >Area size</th>\n      <th class=\"blank col0\" >&nbsp;</th>\n      <th class=\"blank col1\" >&nbsp;</th>\n      <th class=\"blank col2\" >&nbsp;</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_272d9_level0_row0\" class=\"row_heading level0 row0\" >All</th>\n      <td id=\"T_272d9_row0_col0\" class=\"data row0 col0\" >0.02</td>\n      <td id=\"T_272d9_row0_col1\" class=\"data row0 col1\" >0.06</td>\n      <td id=\"T_272d9_row0_col2\" class=\"data row0 col2\" >0.06</td>\n    </tr>\n    <tr>\n      <th id=\"T_272d9_level0_row1\" class=\"row_heading level0 row1\" >Small (area < 32^2)</th>\n      <td id=\"T_272d9_row1_col0\" class=\"data row1 col0\" >0.00</td>\n      <td id=\"T_272d9_row1_col1\" class=\"data row1 col1\" >0.01</td>\n      <td id=\"T_272d9_row1_col2\" class=\"data row1 col2\" >0.01</td>\n    </tr>\n    <tr>\n      <th id=\"T_272d9_level0_row2\" class=\"row_heading level0 row2\" >Medium (32^2 < area < 96^2)</th>\n      <td id=\"T_272d9_row2_col0\" class=\"data row2 col0\" >0.09</td>\n      <td id=\"T_272d9_row2_col1\" class=\"data row2 col1\" >0.22</td>\n      <td id=\"T_272d9_row2_col2\" class=\"data row2 col2\" >0.22</td>\n    </tr>\n    <tr>\n      <th id=\"T_272d9_level0_row3\" class=\"row_heading level0 row3\" >Large (area < 96^2)</th>\n      <td id=\"T_272d9_row3_col0\" class=\"data row3 col0\" >0.00</td>\n      <td id=\"T_272d9_row3_col1\" class=\"data row3 col1\" >0.02</td>\n      <td id=\"T_272d9_row3_col2\" class=\"data row3 col2\" >0.02</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "45c8547b0f01408f94953690712422e9": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "7ef1aaffb4b34d17ba38fd387a7a5ee3": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "14c86d6bd8ea4f9c92ed969994bb3dc6": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_fa6399f15349458e877cb23876d85e18", "style": "IPY_MODEL_c1316929404e42cd8d23df70ae52ba7b", "value": "<br><a href=\"#summary_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\" style=\"font-size: 14px;\">Go to top</a>"}}, "fa6399f15349458e877cb23876d85e18": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "c1316929404e42cd8d23df70ae52ba7b": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "74f6c67e229f427bbd5e66fede8b0cba": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "9b1fd86efec7498b8699a534d943b03b": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "fd553189226a4413afff2ffaf8a493fb": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "children": ["IPY_MODEL_32e1ad9e785c4b85b13f050ec912c8f5", "IPY_MODEL_0aa96ee9f0ff49d0bce8a35751762aa6", "IPY_MODEL_7ff5d917995744fbbf815c55e14b0f5f"], "layout": "IPY_MODEL_4d347b8354a4408d8ac89791cdd9fb9f"}}, "32e1ad9e785c4b85b13f050ec912c8f5": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_70fe306f253d472d8743490e8f0cf099", "style": "IPY_MODEL_77da97bf8cdb463e973d8743c2701587", "value": "<h4 id=\"ConfusionMatrix-TestDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\"><b>Confusion Matrix - Test Dataset</b></h4>"}}, "70fe306f253d472d8743490e8f0cf099": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "77da97bf8cdb463e973d8743c2701587": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "0aa96ee9f0ff49d0bce8a35751762aa6": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_648b7fc17a8b4797b52834a95ef60a08", "style": "IPY_MODEL_ce792fbd917148f888a22401b83c4d49", "value": "<p>Calculate the confusion matrix of the model on the given dataset. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_confusion_matrix.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"}}, "648b7fc17a8b4797b52834a95ef60a08": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "ce792fbd917148f888a22401b83c4d49": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "7ff5d917995744fbbf815c55e14b0f5f": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_4d97022d6fd747958865865cd6fe6bd4", "IPY_MODEL_6ff803618ea84f44aa5863b5e22eae6c", "IPY_MODEL_c80ed310928e460f925f078b97cfb4fc", "IPY_MODEL_9ced833fc5304046b99bee8be1038eee", "IPY_MODEL_9473a9cb312c4ae4a6fa6bd002eab3b7"], "layout": "IPY_MODEL_904c117ef92744a4a3f26bc9691cf558"}}, "4d97022d6fd747958865865cd6fe6bd4": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_0ea0fc64fcc8456ea58a452d8e4ec737", "style": "IPY_MODEL_61fe0181686045eab8a0036483163fef", "value": "<h5><b>Additional Outputs</b></h5>"}}, "0ea0fc64fcc8456ea58a452d8e4ec737": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "61fe0181686045eab8a0036483163fef": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "6ff803618ea84f44aa5863b5e22eae6c": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_05319c7558b84f658afb66f584bf04bc", "style": "IPY_MODEL_a039f6cb94d84fb5879b91ca013acddd", "value": "<div>Showing 10 of 1 classes:</div>"}}, "05319c7558b84f658afb66f584bf04bc": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "a039f6cb94d84fb5879b91ca013acddd": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "c80ed310928e460f925f078b97cfb4fc": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_e8fa5695f7c94d54af75a82c491fbcb0", "style": "IPY_MODEL_5629fb5dbeab4482bd118688a62f82ed", "value": "<div>\"No overlapping\" categories are labels and prediction which did not have a matching label/prediction.<br>For example a predictions that did not have a sufficiently overlapping label bounding box will appear under \"No overlapping\" category in the True Value axis (y-axis).</div>"}}, "e8fa5695f7c94d54af75a82c491fbcb0": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "5629fb5dbeab4482bd118688a62f82ed": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "9ced833fc5304046b99bee8be1038eee": {"model_name": "FigureModel", "model_module": "jupyterlab-plotly", "model_module_version": "^5.11.0", "state": {"_config": {"plotlyServerURL": "https://plot.ly"}, "_data": [{"colorbar": {"title": {"text": "% out of<br>True Values"}}, "text": [[49.0, 369.0], [84.0, 0.0]], "texttemplate": "%{z}%<br>(%{text})", "x": ["Tomato", "No overlapping"], "y": ["Tomato", "No overlapping"], "z": [["11.72", "88.28"], ["100", "0"]], "type": "heatmap", "uid": "eac5591b-7723-4177-87f8-233ad33df6ed"}], "_dom_classes": [], "_js2py_layoutDelta": {}, "_js2py_pointsCallback": {}, "_js2py_relayout": {}, "_js2py_restyle": {}, "_js2py_traceDeltas": {}, "_js2py_update": {}, "_layout": {"height": 600, "template": {"data": {"barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "barpolar"}], "bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "bar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram": [{"marker": {"pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "histogram"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatter": [{"fillpattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}, "type": "scatter"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "title": {"text": "Percent Out of True Values (Count)"}, "xaxis": {"constrain": "domain", "scaleanchor": "y", "title": {"text": "Predicted Value"}, "type": "category"}, "yaxis": {"autorange": "reversed", "constrain": "domain", "title": {"text": "True value"}, "type": "category"}}, "_py2js_addTraces": {}, "_py2js_animate": {}, "_py2js_deleteTraces": {}, "_py2js_moveTraces": {}, "_py2js_relayout": {}, "_py2js_removeLayoutProps": {}, "_py2js_removeTraceProps": {}, "_py2js_restyle": {}, "_py2js_update": {}, "_view_count": 0}}, "9473a9cb312c4ae4a6fa6bd002eab3b7": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_57312d0a8b724b4895c4c78cba63a9d1", "style": "IPY_MODEL_8eb91df6848d48fabacc38e1b353f67a", "value": "<br><a href=\"#summary_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\" style=\"font-size: 14px;\">Go to top</a>"}}, "57312d0a8b724b4895c4c78cba63a9d1": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "8eb91df6848d48fabacc38e1b353f67a": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "904c117ef92744a4a3f26bc9691cf558": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "4d347b8354a4408d8ac89791cdd9fb9f": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "4f399bc3bdd54687ad62688f1d14388c": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "children": ["IPY_MODEL_427ef66e8aa0433b8043b3b8d8b673b3", "IPY_MODEL_54ad1b53059b4de3bf220a6dd7ad3d3d", "IPY_MODEL_bd882e06fc004fc190a4b2357f4308cc"], "layout": "IPY_MODEL_a51a5f13d9c742e8b17d5e50dcd68f65"}}, "427ef66e8aa0433b8043b3b8d8b673b3": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_824edabd92a54272b19f088263fafad4", "style": "IPY_MODEL_61a3870e093f448c8f774b0eb94faab9", "value": "<h4 id=\"ConfusionMatrix-TrainDataset_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\"><b>Confusion Matrix - Train Dataset</b></h4>"}}, "824edabd92a54272b19f088263fafad4": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "61a3870e093f448c8f774b0eb94faab9": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "54ad1b53059b4de3bf220a6dd7ad3d3d": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_2a940d26e8044a84855bc02853558b3a", "style": "IPY_MODEL_81c0b211039b48f0bce08af4291440cd", "value": "<p>Calculate the confusion matrix of the model on the given dataset. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/vision/model_evaluation/plot_confusion_matrix.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"}}, "2a940d26e8044a84855bc02853558b3a": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "81c0b211039b48f0bce08af4291440cd": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "bd882e06fc004fc190a4b2357f4308cc": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_0bbc8aedf74643dbb8aca3dd2c01b708", "IPY_MODEL_74c8019e74944192aaf9575166333f43", "IPY_MODEL_28b3377a1cef45c89800c642fbcaef7a", "IPY_MODEL_ddca687f2f714878ba96f98b20d8e8c1", "IPY_MODEL_2fe33fbfcf864a328cd6254de51341b4"], "layout": "IPY_MODEL_65a81a6167594846a613f78466036f9a"}}, "0bbc8aedf74643dbb8aca3dd2c01b708": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_0ded1fcb353c402bb879b79ed95a5233", "style": "IPY_MODEL_d7146d5203114181b4ae341a67329f06", "value": "<h5><b>Additional Outputs</b></h5>"}}, "0ded1fcb353c402bb879b79ed95a5233": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "d7146d5203114181b4ae341a67329f06": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "74c8019e74944192aaf9575166333f43": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_0973888d2db9456293abacec074dfbe5", "style": "IPY_MODEL_4b3b549d9626404f89be037d2601ea4d", "value": "<div>Showing 10 of 1 classes:</div>"}}, "0973888d2db9456293abacec074dfbe5": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "4b3b549d9626404f89be037d2601ea4d": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "28b3377a1cef45c89800c642fbcaef7a": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_82bb59a8478841ff8da24ed802dbb200", "style": "IPY_MODEL_a75aab7b113c4078a91e71c4aa9406ca", "value": "<div>\"No overlapping\" categories are labels and prediction which did not have a matching label/prediction.<br>For example a predictions that did not have a sufficiently overlapping label bounding box will appear under \"No overlapping\" category in the True Value axis (y-axis).</div>"}}, "82bb59a8478841ff8da24ed802dbb200": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "a75aab7b113c4078a91e71c4aa9406ca": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "ddca687f2f714878ba96f98b20d8e8c1": {"model_name": "FigureModel", "model_module": "jupyterlab-plotly", "model_module_version": "^5.11.0", "state": {"_config": {"plotlyServerURL": "https://plot.ly"}, "_data": [{"colorbar": {"title": {"text": "% out of<br>True Values"}}, "text": [[535.0, 3527.0], [958.0, 0.0]], "texttemplate": "%{z}%<br>(%{text})", "x": ["Tomato", "No overlapping"], "y": ["Tomato", "No overlapping"], "z": [["13.17", "86.83"], ["100", "0"]], "type": "heatmap", "uid": "83ca5088-9990-4f07-9382-e9f782952394"}], "_dom_classes": [], "_js2py_layoutDelta": {}, "_js2py_pointsCallback": {}, "_js2py_relayout": {}, "_js2py_restyle": {}, "_js2py_traceDeltas": {}, "_js2py_update": {}, "_layout": {"height": 600, "template": {"data": {"barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "barpolar"}], "bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}, "pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "bar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram": [{"marker": {"pattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}}, "type": "histogram"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatter": [{"fillpattern": {"fillmode": "overlay", "size": 10, "solidity": 0.2}, "type": "scatter"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "title": {"text": "Percent Out of True Values (Count)"}, "xaxis": {"constrain": "domain", "scaleanchor": "y", "title": {"text": "Predicted Value"}, "type": "category"}, "yaxis": {"autorange": "reversed", "constrain": "domain", "title": {"text": "True value"}, "type": "category"}}, "_py2js_addTraces": {}, "_py2js_animate": {}, "_py2js_deleteTraces": {}, "_py2js_moveTraces": {}, "_py2js_relayout": {}, "_py2js_removeLayoutProps": {}, "_py2js_removeTraceProps": {}, "_py2js_restyle": {}, "_py2js_update": {}, "_view_count": 0}}, "2fe33fbfcf864a328cd6254de51341b4": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_8575e80ea0b74ba6ad8c58d61e50822f", "style": "IPY_MODEL_f91c3623ffc342708f7a4d852b81783b", "value": "<br><a href=\"#summary_UH17J8QO09VS9KKH4A3YJTU7F-section-002G3\" style=\"font-size: 14px;\">Go to top</a>"}}, "8575e80ea0b74ba6ad8c58d61e50822f": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "f91c3623ffc342708f7a4d852b81783b": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "65a81a6167594846a613f78466036f9a": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "a51a5f13d9c742e8b17d5e50dcd68f65": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "88503774773f41ed91c2b21454283a9b": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "30401e91492b424aa2168b71bb88e565": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "ade6aac05a0e43139887adfc3891f07a": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "e737baeb1b604369bff50d7e979c02dd": {"model_name": "VBoxModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "children": ["IPY_MODEL_4f4bfab3a1004dfdbd527ec794fce461", "IPY_MODEL_a26085fe43164e308c9c00629481a77d"], "layout": "IPY_MODEL_ab9d3abdaeba42cc8aadda721ab4ae39"}}, "4f4bfab3a1004dfdbd527ec794fce461": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_7ce691bec9fa4769a06b8f5e14daa674", "style": "IPY_MODEL_b400c35882174748b78c2b62dfc48816"}}, "7ce691bec9fa4769a06b8f5e14daa674": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "b400c35882174748b78c2b62dfc48816": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "a26085fe43164e308c9c00629481a77d": {"model_name": "AccordionModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": ["rendered_html", "jp-RenderedHTMLCommon", "jp-RenderedHTML", "jp-OutputArea-output"], "_titles": {"0": "Didn't Run"}, "children": ["IPY_MODEL_2c881a2d6aec4b388af9da6ab2f2ebe7"], "layout": "IPY_MODEL_c2013402b3354079ae3430a83e522eb7", "selected_index": null}}, "2c881a2d6aec4b388af9da6ab2f2ebe7": {"model_name": "HTMLModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {"_dom_classes": [], "layout": "IPY_MODEL_2dddc9b84141454da2eff95974d6a917", "style": "IPY_MODEL_6cc8bcc650cd43ed8ee12dde00548c7e", "value": "<style type=\"text/css\">\n#T_94680_ table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_94680_ thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_94680_ tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_94680_ th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_94680_ td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_94680_\">\n  <thead>\n    <tr>\n      <th class=\"col_heading level0 col0\" >Check</th>\n      <th class=\"col_heading level0 col1\" >Reason</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_94680_row0_col0\" class=\"data row0 col0\" >Simple Model Comparison</td>\n      <td id=\"T_94680_row0_col1\" class=\"data row0 col1\" >Check is irrelevant for task of type TaskType.OBJECT_DETECTION</td>\n    </tr>\n    <tr>\n      <td id=\"T_94680_row1_col0\" class=\"data row1 col0\" >Model Error Analysis</td>\n      <td id=\"T_94680_row1_col1\" class=\"data row1 col1\" >DeepchecksProcessError: Unable to train meaningful error model (r^2 score: 0.2)</td>\n    </tr>\n  </tbody>\n</table>\n"}}, "2dddc9b84141454da2eff95974d6a917": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "6cc8bcc650cd43ed8ee12dde00548c7e": {"model_name": "DescriptionStyleModel", "model_module": "@jupyter-widgets/controls", "model_module_version": "1.5.0", "state": {}}, "c2013402b3354079ae3430a83e522eb7": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "ab9d3abdaeba42cc8aadda721ab4ae39": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "0a2a72f38519400aaba4af48b5b9767f": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}, "0dfde01b3ecf4e768f3ec1403cc38ec5": {"model_name": "LayoutModel", "model_module": "@jupyter-widgets/base", "model_module_version": "1.2.0", "state": {}}}}
    </script>
    <script type="application/vnd.jupyter.widget-view+json">
    {"version_major": 2, "version_minor": 0, "model_id": "6697accac97848f9abbff14f92be966f"}
    </script>

    </body>
    </html>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  49.551 seconds)


.. _sphx_glr_download_user-guide_vision_auto_quickstarts_plot_detection_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_detection_tutorial.py <plot_detection_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_detection_tutorial.ipynb <plot_detection_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
