
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "user-guide/vision/auto_tutorials/plot_custom_checks.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_user-guide_vision_auto_tutorials_plot_custom_checks.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_user-guide_vision_auto_tutorials_plot_custom_checks.py:


=============================================
Writing Custom Computer Vision Checks
=============================================

Deepchecks offers a wide range of checks for computer vision problems, addressing distribution issues, performance
checks and more. Nevertheless, in order to fully validate your ML pipeline you often need to write your own checks.
This guide will walk you through the basics of writing your own checks.

We recommend writing a single check for each aspect of the model or data you would like to validate. As explained in
:doc:`/user-guide/general/deepchecks_hierarchy`, the role of the check is to run the logic and output a display and
a pythonic value. Then, a condition can be defined on that value to determine if the check is successful or not.

1. `Vision Checks Structure <#vision-checks-structure>`__
2. `Write a Basic Check <#write-a-basic-check>`__
3. `Check Display <#check-display>`__
4. `Defining a Condition <#defining-a-condition>`__
5. `Base Checks Types <#base-checks-types>`__

Vision Checks Structure
========================

The first step when writing a vision check is to decide what check base class to use. You can read more in the
`Base Checks Types <#base-checks-types>`__ section. In this case, we wish to compare train and test dataset, so we select the
``TrainTestBaseCheck``. This type of check must implement the following three methods:

- initialize_run - Actions to be performed before starting to iterate over the dataloader batches.
- update - Actions to be performed on each batch.
- compute - Actions to be performed after iterating over all the batches. Returns the check display and the return
  value.

While `ModelOnlyCheck` alone do not implement the update method. Apart from that, the check init should recipient and
handle check parameters.


Write a Basic Check
========================

Let's implement a simple check, comparing the average of each color channel between the train and the test dataset.

We'll start by writing the simplest possible example, returning only a dict of the color averages. We'll use external
functions when implementing the check in order to be able to reuse them later.

**Good to know: the return value of a check can be any object, a number, dictionary, string, etc…**

.. GENERATED FROM PYTHON SOURCE LINES 46-116

.. code-block:: default

    import typing as t

    import numpy as np

    from deepchecks.core.check_result import CheckResult
    from deepchecks.core.checks import DatasetKind
    from deepchecks.core.condition import ConditionCategory
    from deepchecks.vision.base_checks import TrainTestCheck
    from deepchecks.vision.batch_wrapper import Batch
    from deepchecks.vision.context import Context


    def init_color_averages_dict() -> t.Dict[str, np.array]:
        """Initialize the color averages dicts."""
        return {
                DatasetKind.TRAIN.value: np.zeros((3,), dtype=np.float64),
                DatasetKind.TEST.value: np.zeros((3,), dtype=np.float64),
        }


    def init_pixel_counts_dict() -> t.Dict[str, int]:
        """Initialize the pixel counts dicts."""
        return {
                DatasetKind.TRAIN.value: 0,
                DatasetKind.TEST.value: 0,
        }


    def sum_pixel_values(batch: Batch) -> np.array:
        """Sum the values of all the pixels in the batch, returning a numpy array with an entry per channel."""
        images = batch.images
        return sum(image.sum(axis=(0, 1)) for image in images)  # sum over the batch and pixels


    def count_pixels_in_batch(batch: Batch) -> int:
        """Count the pixels in the batch."""
        return sum((image.shape[0] * image.shape[1] for image in batch.images))


    class ColorAveragesCheck(TrainTestCheck):
        """Check if the average of each color channel is the same between the train and test dataset."""

        def __init__(self, channel_names: t.Tuple[str] = None):
            """Init the check and enable customization of the channel_names."""
            super().__init__()
            if channel_names is None:
                self.channel_names = ('R', 'G', 'B')

        def initialize_run(self, context: Context):
            """Initialize the color_averages dict and pixel counter dict."""
            self._color_averages = init_color_averages_dict()
            self._pixel_count = init_pixel_counts_dict()

        def update(self, context: Context, batch: Batch, dataset_kind: DatasetKind):
            """Add the batch color counts to the color_averages dict, and update counter."""

            self._color_averages[dataset_kind.value] += sum_pixel_values(batch)  # add to the color_averages dict
            # count the number of pixels we have summed
            self._pixel_count[dataset_kind.value] += count_pixels_in_batch(batch)

        def compute(self, context: Context):
            """Compute the color averages and return them."""
            # Divide by the number of pixels to get the average pixel value per color channel
            for dataset_kind in DatasetKind:
                self._color_averages[dataset_kind.value] /= self._pixel_count[dataset_kind.value]
            # Return the color averages in a dict by channel name
            return_value = {d_kind: dict(zip(self.channel_names, color_averages))
                            for d_kind, color_averages in self._color_averages.items()}
            return CheckResult(return_value)








.. GENERATED FROM PYTHON SOURCE LINES 117-118

Hooray! we just implemented a custom check. To read more about the internal objects  Let's run it and see what happens:

.. GENERATED FROM PYTHON SOURCE LINES 118-127

.. code-block:: default


    from deepchecks.vision.datasets.detection.coco import load_dataset

    train_ds = load_dataset(train=True, object_type='VisionData')
    test_ds = load_dataset(train=False, object_type='VisionData')

    result = ColorAveragesCheck().run(train_ds, test_ds)
    result





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Validating Input:   0%| | 0/1 [00:00<?, ? /s]                                                 Ingesting Batches - Train Dataset:   0%|  | 0/2 [00:00<?, ? Batch/s]    Ingesting Batches - Train Dataset:  50%|# | 1/2 [00:00<00:00,  2.20 Batch/s]    Ingesting Batches - Train Dataset: 100%|##| 2/2 [00:00<00:00,  2.30 Batch/s]                                                                                Ingesting Batches - Test Dataset:   0%|  | 0/2 [00:00<?, ? Batch/s]    Ingesting Batches - Test Dataset:  50%|# | 1/2 [00:00<00:00,  2.65 Batch/s]    Ingesting Batches - Test Dataset: 100%|##| 2/2 [00:00<00:00,  2.44 Batch/s]                                                                               Computing Check:   0%| | 0/1 [00:00<?, ? Check/s]                                                 

.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <!--
        ~ ----------------------------------------------------------------------------
        ~ Copyright (C) 2021-2022 Deepchecks (https://www.deepchecks.com)
        ~
        ~ This file is part of Deepchecks.
        ~ Deepchecks is distributed under the terms of the GNU Affero General
        ~ Public License (version 3 or later).
        ~ You should have received a copy of the GNU Affero General Public License
        ~ along with Deepchecks.  If not, see <http://www.gnu.org/licenses/>.
        ~ ----------------------------------------------------------------------------
        ~
    -->
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Color Averages Check</title>
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
                font-size: 1rem;
                line-height: 1.5;
                color: #212529;
                text-align: left;
                max-width: 1200px;
                margin: auto;
            }

            div.nbinput.container div.prompt *,
            div.nboutput.container div.prompt *,
            div.nbinput.container div.input_area pre,
            div.nboutput.container div.output_area pre,
            div.nbinput.container div.input_area .highlight,
            div.nboutput.container div.output_area .highlight {
                border: none;
                padding: 0;
                margin: 0;
                box-shadow: none;
            }

            div.nbinput.container > div[class*=highlight],
            div.nboutput.container > div[class*=highlight] {
                margin: 0;
            }

            div.nbinput.container div.prompt *,
            div.nboutput.container div.prompt * {
                background: none;
            }

            div.nboutput.container div.output_area .highlight,
            div.nboutput.container div.output_area pre {
                background: unset;
            }

            div.nboutput.container div.output_area div.highlight {
                color: unset;  /* override Pygments text color */
            }

            /* avoid gaps between output lines */
            div.nboutput.container div[class*=highlight] pre {
                line-height: normal;
            }

            /* input/output containers */
            div.nbinput.container,
            div.nboutput.container {
                display: -webkit-flex;
                display: flex;
                align-items: flex-start;
                margin: 0;
                width: 100%;
            }
            @media (max-width: 540px) {
                div.nbinput.container,
                div.nboutput.container {
                    flex-direction: column;
                }
            }

            /* input container */
            div.nbinput.container {
                padding-top: 5px;
            }

            /* last container */
            div.nblast.container {
                padding-bottom: 5px;
            }

            /* input prompt */
            div.nbinput.container div.prompt pre {
                color: #307FC1;
            }

            /* output prompt */
            div.nboutput.container div.prompt pre {
                color: #BF5B3D;
            }

            /* all prompts */
            div.nbinput.container div.prompt,
            div.nboutput.container div.prompt {
                width: 4.5ex;
                padding-top: 5px;
                position: relative;
                user-select: none;
            }

            div.nbinput.container div.prompt > div,
            div.nboutput.container div.prompt > div {
                position: absolute;
                right: 0;
                margin-right: 0.3ex;
            }

            @media (max-width: 540px) {
                div.nbinput.container div.prompt,
                div.nboutput.container div.prompt {
                    width: unset;
                    text-align: left;
                    padding: 0.4em;
                }
                div.nboutput.container div.prompt.empty {
                    padding: 0;
                }

                div.nbinput.container div.prompt > div,
                div.nboutput.container div.prompt > div {
                    position: unset;
                }
            }

            /* disable scrollbars on prompts */
            div.nbinput.container div.prompt pre,
            div.nboutput.container div.prompt pre {
                overflow: hidden;
            }

            /* input/output area */
            div.nbinput.container div.input_area,
            div.nboutput.container div.output_area {
                -webkit-flex: 1;
                flex: 1;
                overflow: auto;
            }
            @media (max-width: 540px) {
                div.nbinput.container div.input_area,
                div.nboutput.container div.output_area {
                    width: 100%;
                }
            }

            /* input area */
            div.nbinput.container div.input_area {
                border: 1px solid #e0e0e0;
                border-radius: 2px;
                /*background: #f5f5f5;*/
            }

            /* override MathJax center alignment in output cells */
            div.nboutput.container div[class*=MathJax] {
                text-align: left !important;
            }

            /* override sphinx.ext.imgmath center alignment in output cells */
            div.nboutput.container div.math p {
                text-align: left;
            }

            /* standard error */
            div.nboutput.container div.output_area.stderr {
                background: #fdd;
            }

            /* ANSI colors */
            .ansi-black-fg { color: #3E424D; }
            .ansi-black-bg { background-color: #3E424D; }
            .ansi-black-intense-fg { color: #282C36; }
            .ansi-black-intense-bg { background-color: #282C36; }
            .ansi-red-fg { color: #E75C58; }
            .ansi-red-bg { background-color: #E75C58; }
            .ansi-red-intense-fg { color: #B22B31; }
            .ansi-red-intense-bg { background-color: #B22B31; }
            .ansi-green-fg { color: #00A250; }
            .ansi-green-bg { background-color: #00A250; }
            .ansi-green-intense-fg { color: #007427; }
            .ansi-green-intense-bg { background-color: #007427; }
            .ansi-yellow-fg { color: #DDB62B; }
            .ansi-yellow-bg { background-color: #DDB62B; }
            .ansi-yellow-intense-fg { color: #B27D12; }
            .ansi-yellow-intense-bg { background-color: #B27D12; }
            .ansi-blue-fg { color: #208FFB; }
            .ansi-blue-bg { background-color: #208FFB; }
            .ansi-blue-intense-fg { color: #0065CA; }
            .ansi-blue-intense-bg { background-color: #0065CA; }
            .ansi-magenta-fg { color: #D160C4; }
            .ansi-magenta-bg { background-color: #D160C4; }
            .ansi-magenta-intense-fg { color: #A03196; }
            .ansi-magenta-intense-bg { background-color: #A03196; }
            .ansi-cyan-fg { color: #60C6C8; }
            .ansi-cyan-bg { background-color: #60C6C8; }
            .ansi-cyan-intense-fg { color: #258F8F; }
            .ansi-cyan-intense-bg { background-color: #258F8F; }
            .ansi-white-fg { color: #C5C1B4; }
            .ansi-white-bg { background-color: #C5C1B4; }
            .ansi-white-intense-fg { color: #A1A6B2; }
            .ansi-white-intense-bg { background-color: #A1A6B2; }

            .ansi-default-inverse-fg { color: #FFFFFF; }
            .ansi-default-inverse-bg { background-color: #000000; }

            .ansi-bold { font-weight: bold; }
            .ansi-underline { text-decoration: underline; }


            div.nbinput.container div.input_area div[class*=highlight] > pre,
            div.nboutput.container div.output_area div[class*=highlight] > pre,
            div.nboutput.container div.output_area div[class*=highlight].math,
            div.nboutput.container div.output_area.rendered_html,
            div.nboutput.container div.output_area > div.output_javascript,
            div.nboutput.container div.output_area:not(.rendered_html) > img{
                padding: 5px;
                margin: 0;
            }

            /* fix copybtn overflow problem in chromium (needed for 'sphinx_copybutton') */
            div.nbinput.container div.input_area > div[class^='highlight'],
            div.nboutput.container div.output_area > div[class^='highlight']{
                overflow-y: hidden;
            }

            /* hide copybtn icon on prompts (needed for 'sphinx_copybutton') */
            .prompt .copybtn {
                display: none;
            }

            /* Some additional styling taken form the Jupyter notebook CSS */
            div.rendered_html table {
            border: none;
            border-collapse: collapse;
            border-spacing: 0;
            color: black;
            font-size: 12px;
            table-layout: fixed;
            }
            div.rendered_html thead {
            border-bottom: 1px solid black;
            vertical-align: bottom;
            }
            div.rendered_html tr,
            div.rendered_html th,
            div.rendered_html td {
            text-align: right;
            vertical-align: middle;
            padding: 0.5em 0.5em;
            line-height: normal;
            white-space: normal;
            max-width: none;
            border: none;
            }
            div.rendered_html th {
            font-weight: bold;
            }
            div.rendered_html tbody tr:nth-child(odd) {
            background: #f5f5f5;
            }
            div.rendered_html tbody tr:hover {
            background: rgba(66, 165, 245, 0.2);
            }
        </style>
        <script>
            (!window.navigator.onLine ? alert('needs internet connection') : '');
        </script>
    </head>
    <body>
    
    <script src="" crossorigin="anonymous"></script>
    <script type="application/vnd.jupyter.widget-state+json">
    {
      "version_major": 2,
      "version_minor": 0,
      "state": {
        "bfd1cb5b8a844dd2956ab90950979073": {
          "model_name": "VBoxModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [
              "rendered_html",
              "jp-RenderedHTMLCommon",
              "jp-RenderedHTML",
              "jp-OutputArea-output"
            ],
            "children": [
              "IPY_MODEL_f531bed28a6e41d384e1612f625f48bb",
              "IPY_MODEL_9a6a3df03085490680011f8f4b168a2c",
              "IPY_MODEL_b2f74f74023a414e96b0f94c918ad01a",
              "IPY_MODEL_d8de7b5216334406be3cf92a59254dd6"
            ],
            "layout": "IPY_MODEL_002acc61a5134758874e833819e33ac0"
          }
        },
        "f531bed28a6e41d384e1612f625f48bb": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_792f27b3934248979b7ffdef64518e31",
            "style": "IPY_MODEL_d7cab1d7c72a408894a6cdc4b39b1f74",
            "value": "<h4><b>Color Averages Check</b></h4>"
          }
        },
        "792f27b3934248979b7ffdef64518e31": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "d7cab1d7c72a408894a6cdc4b39b1f74": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "9a6a3df03085490680011f8f4b168a2c": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_d18065bf886b49a89c9480e75f38fad4",
            "style": "IPY_MODEL_c474fefc06614e498d824776a99a40c6",
            "value": "<p>Check if the average of each color channel is the same between the train and test dataset.</p>"
          }
        },
        "d18065bf886b49a89c9480e75f38fad4": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "c474fefc06614e498d824776a99a40c6": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "b2f74f74023a414e96b0f94c918ad01a": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_a3aee293c11346259612a7ffc2e701a6",
            "style": "IPY_MODEL_ca4156fc2016486282339e7bc105f223"
          }
        },
        "a3aee293c11346259612a7ffc2e701a6": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "ca4156fc2016486282339e7bc105f223": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "d8de7b5216334406be3cf92a59254dd6": {
          "model_name": "VBoxModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "children": [
              "IPY_MODEL_1b9eb4d626fc4c99ad394e636c99656e",
              "IPY_MODEL_d0eac0f08f454cd48f68fe2e1d4b3e1c"
            ],
            "layout": "IPY_MODEL_6c440d3914f743c888e0570286455725"
          }
        },
        "1b9eb4d626fc4c99ad394e636c99656e": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_da6b1dbdc3b44ec4adaf4a187921c89e",
            "style": "IPY_MODEL_06aa99b1cd3f4f458816f45a53710596",
            "value": "<h5><b>Additional Outputs</b></h5>"
          }
        },
        "da6b1dbdc3b44ec4adaf4a187921c89e": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "06aa99b1cd3f4f458816f45a53710596": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "d0eac0f08f454cd48f68fe2e1d4b3e1c": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_c584f44ebfc441e09404c42b72dc27b6",
            "style": "IPY_MODEL_35fd0abdf93d4fe3aedff0f8ca3444a0",
            "value": "<p><b>&#x2713;</b>Nothing to display</p>"
          }
        },
        "c584f44ebfc441e09404c42b72dc27b6": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "35fd0abdf93d4fe3aedff0f8ca3444a0": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "6c440d3914f743c888e0570286455725": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "002acc61a5134758874e833819e33ac0": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        }
      }
    }
    </script>
    <script type="application/vnd.jupyter.widget-view+json">
    {"version_major": 2, "version_minor": 0, "model_id": "bfd1cb5b8a844dd2956ab90950979073"}
    </script>

    </body>
    </html>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 128-131

Our check ran successfully, but we got the print “Nothing found”. This is because we haven’t defined to the check
anything to display, so the default behavior is to print “Nothing found”. In order to access the value that we have
defined earlier we can use the “value” property on the result.

.. GENERATED FROM PYTHON SOURCE LINES 131-135

.. code-block:: default


    result.value






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    {'Train': {'R': 120.59282480343832, 'G': 117.66383923861159, 'B': 102.58390542973886}, 'Test': {'R': 114.69132386085319, 'G': 107.46618940457067, 'B': 97.39751220459796}}



.. GENERATED FROM PYTHON SOURCE LINES 136-137

favorite checks from our :doc:`API ref <../../../api/deepchecks.vision>`.

.. GENERATED FROM PYTHON SOURCE LINES 139-148

Check Display
========================

Most of the times we will want our checks to have a visual display that will quickly summarize the check result. We
can pass objects for display to the CheckResult. Objects for display should be of type: html string, dataframe or a
function that plots a graph. Let’s define a graph that will be displayed using `Plotly <https://plotly.com/>`_. We
will inherit from the original check to shorten the code an update only the compute method.

**Good to know: ``display`` can receive a single object to display or a list of objects**

.. GENERATED FROM PYTHON SOURCE LINES 148-193

.. code-block:: default


    import pandas as pd
    import plotly.express as px


    class ColorAveragesCheck(TrainTestCheck):
        """Check if the average of each color channel is the same between the train and test dataset."""

        def __init__(self, channel_names: t.Tuple[str] = None):
            """Init the check and enable customization of the channel_names."""
            super().__init__()
            if channel_names is None:
                self.channel_names = ('R', 'G', 'B')

        def initialize_run(self, context: Context):
            """Initialize the color_averages dict and pixel counter dict."""
            self._color_averages = init_color_averages_dict()
            self._pixel_count = init_pixel_counts_dict()

        def update(self, context: Context, batch: Batch, dataset_kind: DatasetKind):
            """Add the batch color counts to the color_averages dict, and update counter."""

            self._color_averages[dataset_kind.value] += sum_pixel_values(batch)  # add to the color_averages dict
            # count the number of pixels we have summed
            self._pixel_count[dataset_kind.value] += count_pixels_in_batch(batch)

        def compute(self, context: Context):
            """Compute the color averages and return them. Also display a histogram comparing train and test."""
            # Divide by the number of pixels to get the average pixel value per color channel
            for dataset_kind in DatasetKind:
                self._color_averages[dataset_kind.value] /= self._pixel_count[dataset_kind.value]
            # Return the color averages in a dict by channel name
            return_value = {d_kind: dict(zip(self.channel_names, color_averages))
                            for d_kind, color_averages in self._color_averages.items()}

            # **New Code Here**!!!
            # ========================
            # Display a histogram comparing train and test
            color_averages_df = pd.DataFrame(return_value).unstack().reset_index()
            color_averages_df.columns = ['Dataset', 'Channel', 'Pixel Value']
            fig = px.histogram(color_averages_df, x='Dataset', y='Pixel Value', color='Channel', barmode='group',
                               histfunc='avg', color_discrete_sequence=['rgb(255,0,0)', 'rgb(0,255,0)', 'rgb(0,0,255)'],
                               title='Color Averages Histogram')
            return CheckResult(return_value, display=[fig])








.. GENERATED FROM PYTHON SOURCE LINES 194-195

Let check it out:

.. GENERATED FROM PYTHON SOURCE LINES 195-199

.. code-block:: default


    result = ColorAveragesCheck().run(train_ds, test_ds)
    result





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Validating Input:   0%| | 0/1 [00:00<?, ? /s]                                                 Ingesting Batches - Train Dataset:   0%|  | 0/2 [00:00<?, ? Batch/s]    Ingesting Batches - Train Dataset:  50%|# | 1/2 [00:00<00:00,  2.25 Batch/s]    Ingesting Batches - Train Dataset: 100%|##| 2/2 [00:00<00:00,  2.35 Batch/s]                                                                                Ingesting Batches - Test Dataset:   0%|  | 0/2 [00:00<?, ? Batch/s]    Ingesting Batches - Test Dataset:  50%|# | 1/2 [00:00<00:00,  2.65 Batch/s]    Ingesting Batches - Test Dataset: 100%|##| 2/2 [00:00<00:00,  2.45 Batch/s]                                                                               Computing Check:   0%| | 0/1 [00:00<?, ? Check/s]                                                 

.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <!--
        ~ ----------------------------------------------------------------------------
        ~ Copyright (C) 2021-2022 Deepchecks (https://www.deepchecks.com)
        ~
        ~ This file is part of Deepchecks.
        ~ Deepchecks is distributed under the terms of the GNU Affero General
        ~ Public License (version 3 or later).
        ~ You should have received a copy of the GNU Affero General Public License
        ~ along with Deepchecks.  If not, see <http://www.gnu.org/licenses/>.
        ~ ----------------------------------------------------------------------------
        ~
    -->
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Color Averages Check</title>
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
                font-size: 1rem;
                line-height: 1.5;
                color: #212529;
                text-align: left;
                max-width: 1200px;
                margin: auto;
            }

            div.nbinput.container div.prompt *,
            div.nboutput.container div.prompt *,
            div.nbinput.container div.input_area pre,
            div.nboutput.container div.output_area pre,
            div.nbinput.container div.input_area .highlight,
            div.nboutput.container div.output_area .highlight {
                border: none;
                padding: 0;
                margin: 0;
                box-shadow: none;
            }

            div.nbinput.container > div[class*=highlight],
            div.nboutput.container > div[class*=highlight] {
                margin: 0;
            }

            div.nbinput.container div.prompt *,
            div.nboutput.container div.prompt * {
                background: none;
            }

            div.nboutput.container div.output_area .highlight,
            div.nboutput.container div.output_area pre {
                background: unset;
            }

            div.nboutput.container div.output_area div.highlight {
                color: unset;  /* override Pygments text color */
            }

            /* avoid gaps between output lines */
            div.nboutput.container div[class*=highlight] pre {
                line-height: normal;
            }

            /* input/output containers */
            div.nbinput.container,
            div.nboutput.container {
                display: -webkit-flex;
                display: flex;
                align-items: flex-start;
                margin: 0;
                width: 100%;
            }
            @media (max-width: 540px) {
                div.nbinput.container,
                div.nboutput.container {
                    flex-direction: column;
                }
            }

            /* input container */
            div.nbinput.container {
                padding-top: 5px;
            }

            /* last container */
            div.nblast.container {
                padding-bottom: 5px;
            }

            /* input prompt */
            div.nbinput.container div.prompt pre {
                color: #307FC1;
            }

            /* output prompt */
            div.nboutput.container div.prompt pre {
                color: #BF5B3D;
            }

            /* all prompts */
            div.nbinput.container div.prompt,
            div.nboutput.container div.prompt {
                width: 4.5ex;
                padding-top: 5px;
                position: relative;
                user-select: none;
            }

            div.nbinput.container div.prompt > div,
            div.nboutput.container div.prompt > div {
                position: absolute;
                right: 0;
                margin-right: 0.3ex;
            }

            @media (max-width: 540px) {
                div.nbinput.container div.prompt,
                div.nboutput.container div.prompt {
                    width: unset;
                    text-align: left;
                    padding: 0.4em;
                }
                div.nboutput.container div.prompt.empty {
                    padding: 0;
                }

                div.nbinput.container div.prompt > div,
                div.nboutput.container div.prompt > div {
                    position: unset;
                }
            }

            /* disable scrollbars on prompts */
            div.nbinput.container div.prompt pre,
            div.nboutput.container div.prompt pre {
                overflow: hidden;
            }

            /* input/output area */
            div.nbinput.container div.input_area,
            div.nboutput.container div.output_area {
                -webkit-flex: 1;
                flex: 1;
                overflow: auto;
            }
            @media (max-width: 540px) {
                div.nbinput.container div.input_area,
                div.nboutput.container div.output_area {
                    width: 100%;
                }
            }

            /* input area */
            div.nbinput.container div.input_area {
                border: 1px solid #e0e0e0;
                border-radius: 2px;
                /*background: #f5f5f5;*/
            }

            /* override MathJax center alignment in output cells */
            div.nboutput.container div[class*=MathJax] {
                text-align: left !important;
            }

            /* override sphinx.ext.imgmath center alignment in output cells */
            div.nboutput.container div.math p {
                text-align: left;
            }

            /* standard error */
            div.nboutput.container div.output_area.stderr {
                background: #fdd;
            }

            /* ANSI colors */
            .ansi-black-fg { color: #3E424D; }
            .ansi-black-bg { background-color: #3E424D; }
            .ansi-black-intense-fg { color: #282C36; }
            .ansi-black-intense-bg { background-color: #282C36; }
            .ansi-red-fg { color: #E75C58; }
            .ansi-red-bg { background-color: #E75C58; }
            .ansi-red-intense-fg { color: #B22B31; }
            .ansi-red-intense-bg { background-color: #B22B31; }
            .ansi-green-fg { color: #00A250; }
            .ansi-green-bg { background-color: #00A250; }
            .ansi-green-intense-fg { color: #007427; }
            .ansi-green-intense-bg { background-color: #007427; }
            .ansi-yellow-fg { color: #DDB62B; }
            .ansi-yellow-bg { background-color: #DDB62B; }
            .ansi-yellow-intense-fg { color: #B27D12; }
            .ansi-yellow-intense-bg { background-color: #B27D12; }
            .ansi-blue-fg { color: #208FFB; }
            .ansi-blue-bg { background-color: #208FFB; }
            .ansi-blue-intense-fg { color: #0065CA; }
            .ansi-blue-intense-bg { background-color: #0065CA; }
            .ansi-magenta-fg { color: #D160C4; }
            .ansi-magenta-bg { background-color: #D160C4; }
            .ansi-magenta-intense-fg { color: #A03196; }
            .ansi-magenta-intense-bg { background-color: #A03196; }
            .ansi-cyan-fg { color: #60C6C8; }
            .ansi-cyan-bg { background-color: #60C6C8; }
            .ansi-cyan-intense-fg { color: #258F8F; }
            .ansi-cyan-intense-bg { background-color: #258F8F; }
            .ansi-white-fg { color: #C5C1B4; }
            .ansi-white-bg { background-color: #C5C1B4; }
            .ansi-white-intense-fg { color: #A1A6B2; }
            .ansi-white-intense-bg { background-color: #A1A6B2; }

            .ansi-default-inverse-fg { color: #FFFFFF; }
            .ansi-default-inverse-bg { background-color: #000000; }

            .ansi-bold { font-weight: bold; }
            .ansi-underline { text-decoration: underline; }


            div.nbinput.container div.input_area div[class*=highlight] > pre,
            div.nboutput.container div.output_area div[class*=highlight] > pre,
            div.nboutput.container div.output_area div[class*=highlight].math,
            div.nboutput.container div.output_area.rendered_html,
            div.nboutput.container div.output_area > div.output_javascript,
            div.nboutput.container div.output_area:not(.rendered_html) > img{
                padding: 5px;
                margin: 0;
            }

            /* fix copybtn overflow problem in chromium (needed for 'sphinx_copybutton') */
            div.nbinput.container div.input_area > div[class^='highlight'],
            div.nboutput.container div.output_area > div[class^='highlight']{
                overflow-y: hidden;
            }

            /* hide copybtn icon on prompts (needed for 'sphinx_copybutton') */
            .prompt .copybtn {
                display: none;
            }

            /* Some additional styling taken form the Jupyter notebook CSS */
            div.rendered_html table {
            border: none;
            border-collapse: collapse;
            border-spacing: 0;
            color: black;
            font-size: 12px;
            table-layout: fixed;
            }
            div.rendered_html thead {
            border-bottom: 1px solid black;
            vertical-align: bottom;
            }
            div.rendered_html tr,
            div.rendered_html th,
            div.rendered_html td {
            text-align: right;
            vertical-align: middle;
            padding: 0.5em 0.5em;
            line-height: normal;
            white-space: normal;
            max-width: none;
            border: none;
            }
            div.rendered_html th {
            font-weight: bold;
            }
            div.rendered_html tbody tr:nth-child(odd) {
            background: #f5f5f5;
            }
            div.rendered_html tbody tr:hover {
            background: rgba(66, 165, 245, 0.2);
            }
        </style>
        <script>
            (!window.navigator.onLine ? alert('needs internet connection') : '');
        </script>
    </head>
    <body>
    
    <script src="" crossorigin="anonymous"></script>
    <script type="application/vnd.jupyter.widget-state+json">
    {
      "version_major": 2,
      "version_minor": 0,
      "state": {
        "5f0204ff9c3e45a2b242d9b850377dbb": {
          "model_name": "VBoxModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [
              "rendered_html",
              "jp-RenderedHTMLCommon",
              "jp-RenderedHTML",
              "jp-OutputArea-output"
            ],
            "children": [
              "IPY_MODEL_3d703547dc6f420abde98f32ed38d244",
              "IPY_MODEL_b22e933a4ea2415990392764559ca5a4",
              "IPY_MODEL_422bb490c97e43b097814c46bbe5e2f9",
              "IPY_MODEL_aca82c043ede4ecb9c4299f54b9481b0"
            ],
            "layout": "IPY_MODEL_040714eb55104ee29141a650c803df30"
          }
        },
        "3d703547dc6f420abde98f32ed38d244": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_3f65836483234eef9dfd02df13526405",
            "style": "IPY_MODEL_ea9eccea7f4543af8e1a570438cc0633",
            "value": "<h4><b>Color Averages Check</b></h4>"
          }
        },
        "3f65836483234eef9dfd02df13526405": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "ea9eccea7f4543af8e1a570438cc0633": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "b22e933a4ea2415990392764559ca5a4": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_9f849ad8086244fc829f5bb61cb55a7a",
            "style": "IPY_MODEL_11a79eca70104b5f998935b0b166e768",
            "value": "<p>Check if the average of each color channel is the same between the train and test dataset.</p>"
          }
        },
        "9f849ad8086244fc829f5bb61cb55a7a": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "11a79eca70104b5f998935b0b166e768": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "422bb490c97e43b097814c46bbe5e2f9": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_dcbb9bd7f26a4f639918b5f1dd65cedc",
            "style": "IPY_MODEL_2898ce34caf54d258d820609bb256cca"
          }
        },
        "dcbb9bd7f26a4f639918b5f1dd65cedc": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "2898ce34caf54d258d820609bb256cca": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "aca82c043ede4ecb9c4299f54b9481b0": {
          "model_name": "VBoxModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "children": [
              "IPY_MODEL_e1400c5735c442cb87a687f46ffc93b3",
              "IPY_MODEL_605807ae323942e4875c0f44e92f116a"
            ],
            "layout": "IPY_MODEL_86d4eb272a3a4c7192822ffd8993ca64"
          }
        },
        "e1400c5735c442cb87a687f46ffc93b3": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_9b960321449f42cea7d2e1281f2347e0",
            "style": "IPY_MODEL_032d9762718a4cb4bf1e61453a275317",
            "value": "<h5><b>Additional Outputs</b></h5>"
          }
        },
        "9b960321449f42cea7d2e1281f2347e0": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "032d9762718a4cb4bf1e61453a275317": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "605807ae323942e4875c0f44e92f116a": {
          "model_name": "FigureModel",
          "model_module": "jupyterlab-plotly",
          "model_module_version": "^5.5.0",
          "state": {
            "_config": {
              "plotlyServerURL": "https://plot.ly"
            },
            "_data": [
              {
                "alignmentgroup": "True",
                "bingroup": "x",
                "histfunc": "avg",
                "hovertemplate": "Channel=R<br>Dataset=%{x}<br>avg of Pixel Value=%{y}<extra></extra>",
                "legendgroup": "R",
                "marker": {
                  "color": "rgb(255,0,0)",
                  "pattern": {
                    "shape": ""
                  }
                },
                "name": "R",
                "offsetgroup": "R",
                "orientation": "v",
                "showlegend": true,
                "x": [
                  "Train",
                  "Test"
                ],
                "xaxis": "x",
                "y": {
                  "dtype": "float64",
                  "shape": [
                    2
                  ]
                },
                "yaxis": "y",
                "type": "histogram",
                "uid": "021ff0ac-7d48-4dcc-a063-a7b3a3c95517"
              },
              {
                "alignmentgroup": "True",
                "bingroup": "x",
                "histfunc": "avg",
                "hovertemplate": "Channel=G<br>Dataset=%{x}<br>avg of Pixel Value=%{y}<extra></extra>",
                "legendgroup": "G",
                "marker": {
                  "color": "rgb(0,255,0)",
                  "pattern": {
                    "shape": ""
                  }
                },
                "name": "G",
                "offsetgroup": "G",
                "orientation": "v",
                "showlegend": true,
                "x": [
                  "Train",
                  "Test"
                ],
                "xaxis": "x",
                "y": {
                  "dtype": "float64",
                  "shape": [
                    2
                  ]
                },
                "yaxis": "y",
                "type": "histogram",
                "uid": "7ea8a416-775f-420f-936e-6561ba6e3e03"
              },
              {
                "alignmentgroup": "True",
                "bingroup": "x",
                "histfunc": "avg",
                "hovertemplate": "Channel=B<br>Dataset=%{x}<br>avg of Pixel Value=%{y}<extra></extra>",
                "legendgroup": "B",
                "marker": {
                  "color": "rgb(0,0,255)",
                  "pattern": {
                    "shape": ""
                  }
                },
                "name": "B",
                "offsetgroup": "B",
                "orientation": "v",
                "showlegend": true,
                "x": [
                  "Train",
                  "Test"
                ],
                "xaxis": "x",
                "y": {
                  "dtype": "float64",
                  "shape": [
                    2
                  ]
                },
                "yaxis": "y",
                "type": "histogram",
                "uid": "7bc24035-567e-443b-8134-689fe5924287"
              }
            ],
            "_dom_classes": [],
            "_js2py_layoutDelta": {},
            "_js2py_pointsCallback": {},
            "_js2py_relayout": {},
            "_js2py_restyle": {},
            "_js2py_traceDeltas": {},
            "_js2py_update": {},
            "_layout": {
              "barmode": "group",
              "legend": {
                "title": {
                  "text": "Channel"
                },
                "tracegroupgap": 0
              },
              "template": {
                "data": {
                  "barpolar": [
                    {
                      "marker": {
                        "line": {
                          "color": "#E5ECF6",
                          "width": 0.5
                        },
                        "pattern": {
                          "fillmode": "overlay",
                          "size": 10,
                          "solidity": 0.2
                        }
                      },
                      "type": "barpolar"
                    }
                  ],
                  "bar": [
                    {
                      "error_x": {
                        "color": "#2a3f5f"
                      },
                      "error_y": {
                        "color": "#2a3f5f"
                      },
                      "marker": {
                        "line": {
                          "color": "#E5ECF6",
                          "width": 0.5
                        },
                        "pattern": {
                          "fillmode": "overlay",
                          "size": 10,
                          "solidity": 0.2
                        }
                      },
                      "type": "bar"
                    }
                  ],
                  "carpet": [
                    {
                      "aaxis": {
                        "endlinecolor": "#2a3f5f",
                        "gridcolor": "white",
                        "linecolor": "white",
                        "minorgridcolor": "white",
                        "startlinecolor": "#2a3f5f"
                      },
                      "baxis": {
                        "endlinecolor": "#2a3f5f",
                        "gridcolor": "white",
                        "linecolor": "white",
                        "minorgridcolor": "white",
                        "startlinecolor": "#2a3f5f"
                      },
                      "type": "carpet"
                    }
                  ],
                  "choropleth": [
                    {
                      "colorbar": {
                        "outlinewidth": 0,
                        "ticks": ""
                      },
                      "type": "choropleth"
                    }
                  ],
                  "contourcarpet": [
                    {
                      "colorbar": {
                        "outlinewidth": 0,
                        "ticks": ""
                      },
                      "type": "contourcarpet"
                    }
                  ],
                  "contour": [
                    {
                      "colorbar": {
                        "outlinewidth": 0,
                        "ticks": ""
                      },
                      "colorscale": [
                        [
                          0.0,
                          "#0d0887"
                        ],
                        [
                          0.1111111111111111,
                          "#46039f"
                        ],
                        [
                          0.2222222222222222,
                          "#7201a8"
                        ],
                        [
                          0.3333333333333333,
                          "#9c179e"
                        ],
                        [
                          0.4444444444444444,
                          "#bd3786"
                        ],
                        [
                          0.5555555555555556,
                          "#d8576b"
                        ],
                        [
                          0.6666666666666666,
                          "#ed7953"
                        ],
                        [
                          0.7777777777777778,
                          "#fb9f3a"
                        ],
                        [
                          0.8888888888888888,
                          "#fdca26"
                        ],
                        [
                          1.0,
                          "#f0f921"
                        ]
                      ],
                      "type": "contour"
                    }
                  ],
                  "heatmapgl": [
                    {
                      "colorbar": {
                        "outlinewidth": 0,
                        "ticks": ""
                      },
                      "colorscale": [
                        [
                          0.0,
                          "#0d0887"
                        ],
                        [
                          0.1111111111111111,
                          "#46039f"
                        ],
                        [
                          0.2222222222222222,
                          "#7201a8"
                        ],
                        [
                          0.3333333333333333,
                          "#9c179e"
                        ],
                        [
                          0.4444444444444444,
                          "#bd3786"
                        ],
                        [
                          0.5555555555555556,
                          "#d8576b"
                        ],
                        [
                          0.6666666666666666,
                          "#ed7953"
                        ],
                        [
                          0.7777777777777778,
                          "#fb9f3a"
                        ],
                        [
                          0.8888888888888888,
                          "#fdca26"
                        ],
                        [
                          1.0,
                          "#f0f921"
                        ]
                      ],
                      "type": "heatmapgl"
                    }
                  ],
                  "heatmap": [
                    {
                      "colorbar": {
                        "outlinewidth": 0,
                        "ticks": ""
                      },
                      "colorscale": [
                        [
                          0.0,
                          "#0d0887"
                        ],
                        [
                          0.1111111111111111,
                          "#46039f"
                        ],
                        [
                          0.2222222222222222,
                          "#7201a8"
                        ],
                        [
                          0.3333333333333333,
                          "#9c179e"
                        ],
                        [
                          0.4444444444444444,
                          "#bd3786"
                        ],
                        [
                          0.5555555555555556,
                          "#d8576b"
                        ],
                        [
                          0.6666666666666666,
                          "#ed7953"
                        ],
                        [
                          0.7777777777777778,
                          "#fb9f3a"
                        ],
                        [
                          0.8888888888888888,
                          "#fdca26"
                        ],
                        [
                          1.0,
                          "#f0f921"
                        ]
                      ],
                      "type": "heatmap"
                    }
                  ],
                  "histogram2dcontour": [
                    {
                      "colorbar": {
                        "outlinewidth": 0,
                        "ticks": ""
                      },
                      "colorscale": [
                        [
                          0.0,
                          "#0d0887"
                        ],
                        [
                          0.1111111111111111,
                          "#46039f"
                        ],
                        [
                          0.2222222222222222,
                          "#7201a8"
                        ],
                        [
                          0.3333333333333333,
                          "#9c179e"
                        ],
                        [
                          0.4444444444444444,
                          "#bd3786"
                        ],
                        [
                          0.5555555555555556,
                          "#d8576b"
                        ],
                        [
                          0.6666666666666666,
                          "#ed7953"
                        ],
                        [
                          0.7777777777777778,
                          "#fb9f3a"
                        ],
                        [
                          0.8888888888888888,
                          "#fdca26"
                        ],
                        [
                          1.0,
                          "#f0f921"
                        ]
                      ],
                      "type": "histogram2dcontour"
                    }
                  ],
                  "histogram2d": [
                    {
                      "colorbar": {
                        "outlinewidth": 0,
                        "ticks": ""
                      },
                      "colorscale": [
                        [
                          0.0,
                          "#0d0887"
                        ],
                        [
                          0.1111111111111111,
                          "#46039f"
                        ],
                        [
                          0.2222222222222222,
                          "#7201a8"
                        ],
                        [
                          0.3333333333333333,
                          "#9c179e"
                        ],
                        [
                          0.4444444444444444,
                          "#bd3786"
                        ],
                        [
                          0.5555555555555556,
                          "#d8576b"
                        ],
                        [
                          0.6666666666666666,
                          "#ed7953"
                        ],
                        [
                          0.7777777777777778,
                          "#fb9f3a"
                        ],
                        [
                          0.8888888888888888,
                          "#fdca26"
                        ],
                        [
                          1.0,
                          "#f0f921"
                        ]
                      ],
                      "type": "histogram2d"
                    }
                  ],
                  "histogram": [
                    {
                      "marker": {
                        "pattern": {
                          "fillmode": "overlay",
                          "size": 10,
                          "solidity": 0.2
                        }
                      },
                      "type": "histogram"
                    }
                  ],
                  "mesh3d": [
                    {
                      "colorbar": {
                        "outlinewidth": 0,
                        "ticks": ""
                      },
                      "type": "mesh3d"
                    }
                  ],
                  "parcoords": [
                    {
                      "line": {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        }
                      },
                      "type": "parcoords"
                    }
                  ],
                  "pie": [
                    {
                      "automargin": true,
                      "type": "pie"
                    }
                  ],
                  "scatter3d": [
                    {
                      "line": {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        }
                      },
                      "marker": {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        }
                      },
                      "type": "scatter3d"
                    }
                  ],
                  "scattercarpet": [
                    {
                      "marker": {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        }
                      },
                      "type": "scattercarpet"
                    }
                  ],
                  "scattergeo": [
                    {
                      "marker": {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        }
                      },
                      "type": "scattergeo"
                    }
                  ],
                  "scattergl": [
                    {
                      "marker": {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        }
                      },
                      "type": "scattergl"
                    }
                  ],
                  "scattermapbox": [
                    {
                      "marker": {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        }
                      },
                      "type": "scattermapbox"
                    }
                  ],
                  "scatterpolargl": [
                    {
                      "marker": {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        }
                      },
                      "type": "scatterpolargl"
                    }
                  ],
                  "scatterpolar": [
                    {
                      "marker": {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        }
                      },
                      "type": "scatterpolar"
                    }
                  ],
                  "scatter": [
                    {
                      "marker": {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        }
                      },
                      "type": "scatter"
                    }
                  ],
                  "scatterternary": [
                    {
                      "marker": {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        }
                      },
                      "type": "scatterternary"
                    }
                  ],
                  "surface": [
                    {
                      "colorbar": {
                        "outlinewidth": 0,
                        "ticks": ""
                      },
                      "colorscale": [
                        [
                          0.0,
                          "#0d0887"
                        ],
                        [
                          0.1111111111111111,
                          "#46039f"
                        ],
                        [
                          0.2222222222222222,
                          "#7201a8"
                        ],
                        [
                          0.3333333333333333,
                          "#9c179e"
                        ],
                        [
                          0.4444444444444444,
                          "#bd3786"
                        ],
                        [
                          0.5555555555555556,
                          "#d8576b"
                        ],
                        [
                          0.6666666666666666,
                          "#ed7953"
                        ],
                        [
                          0.7777777777777778,
                          "#fb9f3a"
                        ],
                        [
                          0.8888888888888888,
                          "#fdca26"
                        ],
                        [
                          1.0,
                          "#f0f921"
                        ]
                      ],
                      "type": "surface"
                    }
                  ],
                  "table": [
                    {
                      "cells": {
                        "fill": {
                          "color": "#EBF0F8"
                        },
                        "line": {
                          "color": "white"
                        }
                      },
                      "header": {
                        "fill": {
                          "color": "#C8D4E3"
                        },
                        "line": {
                          "color": "white"
                        }
                      },
                      "type": "table"
                    }
                  ]
                },
                "layout": {
                  "annotationdefaults": {
                    "arrowcolor": "#2a3f5f",
                    "arrowhead": 0,
                    "arrowwidth": 1
                  },
                  "autotypenumbers": "strict",
                  "coloraxis": {
                    "colorbar": {
                      "outlinewidth": 0,
                      "ticks": ""
                    }
                  },
                  "colorscale": {
                    "diverging": [
                      [
                        0,
                        "#8e0152"
                      ],
                      [
                        0.1,
                        "#c51b7d"
                      ],
                      [
                        0.2,
                        "#de77ae"
                      ],
                      [
                        0.3,
                        "#f1b6da"
                      ],
                      [
                        0.4,
                        "#fde0ef"
                      ],
                      [
                        0.5,
                        "#f7f7f7"
                      ],
                      [
                        0.6,
                        "#e6f5d0"
                      ],
                      [
                        0.7,
                        "#b8e186"
                      ],
                      [
                        0.8,
                        "#7fbc41"
                      ],
                      [
                        0.9,
                        "#4d9221"
                      ],
                      [
                        1,
                        "#276419"
                      ]
                    ],
                    "sequential": [
                      [
                        0.0,
                        "#0d0887"
                      ],
                      [
                        0.1111111111111111,
                        "#46039f"
                      ],
                      [
                        0.2222222222222222,
                        "#7201a8"
                      ],
                      [
                        0.3333333333333333,
                        "#9c179e"
                      ],
                      [
                        0.4444444444444444,
                        "#bd3786"
                      ],
                      [
                        0.5555555555555556,
                        "#d8576b"
                      ],
                      [
                        0.6666666666666666,
                        "#ed7953"
                      ],
                      [
                        0.7777777777777778,
                        "#fb9f3a"
                      ],
                      [
                        0.8888888888888888,
                        "#fdca26"
                      ],
                      [
                        1.0,
                        "#f0f921"
                      ]
                    ],
                    "sequentialminus": [
                      [
                        0.0,
                        "#0d0887"
                      ],
                      [
                        0.1111111111111111,
                        "#46039f"
                      ],
                      [
                        0.2222222222222222,
                        "#7201a8"
                      ],
                      [
                        0.3333333333333333,
                        "#9c179e"
                      ],
                      [
                        0.4444444444444444,
                        "#bd3786"
                      ],
                      [
                        0.5555555555555556,
                        "#d8576b"
                      ],
                      [
                        0.6666666666666666,
                        "#ed7953"
                      ],
                      [
                        0.7777777777777778,
                        "#fb9f3a"
                      ],
                      [
                        0.8888888888888888,
                        "#fdca26"
                      ],
                      [
                        1.0,
                        "#f0f921"
                      ]
                    ]
                  },
                  "colorway": [
                    "#636efa",
                    "#EF553B",
                    "#00cc96",
                    "#ab63fa",
                    "#FFA15A",
                    "#19d3f3",
                    "#FF6692",
                    "#B6E880",
                    "#FF97FF",
                    "#FECB52"
                  ],
                  "font": {
                    "color": "#2a3f5f"
                  },
                  "geo": {
                    "bgcolor": "white",
                    "lakecolor": "white",
                    "landcolor": "#E5ECF6",
                    "showlakes": true,
                    "showland": true,
                    "subunitcolor": "white"
                  },
                  "hoverlabel": {
                    "align": "left"
                  },
                  "hovermode": "closest",
                  "mapbox": {
                    "style": "light"
                  },
                  "paper_bgcolor": "white",
                  "plot_bgcolor": "#E5ECF6",
                  "polar": {
                    "angularaxis": {
                      "gridcolor": "white",
                      "linecolor": "white",
                      "ticks": ""
                    },
                    "bgcolor": "#E5ECF6",
                    "radialaxis": {
                      "gridcolor": "white",
                      "linecolor": "white",
                      "ticks": ""
                    }
                  },
                  "scene": {
                    "xaxis": {
                      "backgroundcolor": "#E5ECF6",
                      "gridcolor": "white",
                      "gridwidth": 2,
                      "linecolor": "white",
                      "showbackground": true,
                      "ticks": "",
                      "zerolinecolor": "white"
                    },
                    "yaxis": {
                      "backgroundcolor": "#E5ECF6",
                      "gridcolor": "white",
                      "gridwidth": 2,
                      "linecolor": "white",
                      "showbackground": true,
                      "ticks": "",
                      "zerolinecolor": "white"
                    },
                    "zaxis": {
                      "backgroundcolor": "#E5ECF6",
                      "gridcolor": "white",
                      "gridwidth": 2,
                      "linecolor": "white",
                      "showbackground": true,
                      "ticks": "",
                      "zerolinecolor": "white"
                    }
                  },
                  "shapedefaults": {
                    "line": {
                      "color": "#2a3f5f"
                    }
                  },
                  "ternary": {
                    "aaxis": {
                      "gridcolor": "white",
                      "linecolor": "white",
                      "ticks": ""
                    },
                    "baxis": {
                      "gridcolor": "white",
                      "linecolor": "white",
                      "ticks": ""
                    },
                    "bgcolor": "#E5ECF6",
                    "caxis": {
                      "gridcolor": "white",
                      "linecolor": "white",
                      "ticks": ""
                    }
                  },
                  "title": {
                    "x": 0.05
                  },
                  "xaxis": {
                    "automargin": true,
                    "gridcolor": "white",
                    "linecolor": "white",
                    "ticks": "",
                    "title": {
                      "standoff": 15
                    },
                    "zerolinecolor": "white",
                    "zerolinewidth": 2
                  },
                  "yaxis": {
                    "automargin": true,
                    "gridcolor": "white",
                    "linecolor": "white",
                    "ticks": "",
                    "title": {
                      "standoff": 15
                    },
                    "zerolinecolor": "white",
                    "zerolinewidth": 2
                  }
                }
              },
              "title": {
                "text": "Color Averages Histogram"
              },
              "xaxis": {
                "anchor": "y",
                "domain": [
                  0.0,
                  1.0
                ],
                "title": {
                  "text": "Dataset"
                }
              },
              "yaxis": {
                "anchor": "x",
                "domain": [
                  0.0,
                  1.0
                ],
                "title": {
                  "text": "avg of Pixel Value"
                }
              }
            },
            "_py2js_addTraces": {},
            "_py2js_animate": {},
            "_py2js_deleteTraces": {},
            "_py2js_moveTraces": {},
            "_py2js_relayout": {},
            "_py2js_removeLayoutProps": {},
            "_py2js_removeTraceProps": {},
            "_py2js_restyle": {},
            "_py2js_update": {},
            "_view_count": 0
          },
          "buffers": [
            {
              "encoding": "base64",
              "path": [
                "_data",
                0,
                "y",
                "buffer"
              ],
              "data": "ncFx1/AlXkDFU2+mPqxcQA=="
            },
            {
              "encoding": "base64",
              "path": [
                "_data",
                1,
                "y",
                "buffer"
              ],
              "data": "2uiSV3xqXUDblxUM1t1aQA=="
            },
            {
              "encoding": "base64",
              "path": [
                "_data",
                2,
                "y",
                "buffer"
              ],
              "data": "2yvhtF6lWUCVoAfXcFlYQA=="
            }
          ]
        },
        "86d4eb272a3a4c7192822ffd8993ca64": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "040714eb55104ee29141a650c803df30": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        }
      }
    }
    </script>
    <script type="application/vnd.jupyter.widget-view+json">
    {"version_major": 2, "version_minor": 0, "model_id": "5f0204ff9c3e45a2b242d9b850377dbb"}
    </script>

    </body>
    </html>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 200-202

Voilà! Now we have a check that prints a graph and has a value. We can add this check
to any Suite, and it will run within it.

.. GENERATED FROM PYTHON SOURCE LINES 204-211

Defining a Condition
========================

Finally, we can add a condition to our check. A condition is a function that receives the result of the check and
returns a condition result object. To read more on conditions, check out the condition `user guide
<../../user-guide/general/customizations/configure_check_conditions>`_. In this case, we'll define a condition
verifying that the color averages haven't changed by more than 10%.

.. GENERATED FROM PYTHON SOURCE LINES 211-275

.. code-block:: default


    from deepchecks.core import ConditionResult


    class ColorAveragesCheck(TrainTestCheck):
        """Check if the average of each color channel is the same between the train and test dataset."""

        def __init__(self, channel_names: t.Tuple[str] = None):
            """Init the check and enable customization of the channel_names."""
            super().__init__()
            if channel_names is None:
                self.channel_names = ('R', 'G', 'B')

        def initialize_run(self, context: Context):
            """Initialize the color_averages dict and pixel counter dict."""
            self._color_averages = init_color_averages_dict()
            self._pixel_count = init_pixel_counts_dict()

        def update(self, context: Context, batch: Batch, dataset_kind: DatasetKind):
            """Add the batch color counts to the color_averages dict, and update counter."""

            self._color_averages[dataset_kind.value] += sum_pixel_values(batch)  # add to the color_averages dict
            # count the number of pixels we have summed
            self._pixel_count[dataset_kind.value] += count_pixels_in_batch(batch)

        def compute(self, context: Context):
            """Compute the color averages and return them. Also display a histogram comparing train and test."""
            # Divide by the number of pixels to get the average pixel value per color channel
            for dataset_kind in DatasetKind:
                self._color_averages[dataset_kind.value] /= self._pixel_count[dataset_kind.value]
            # Return the color averages in a dict by channel name
            return_value = {d_kind: dict(zip(self.channel_names, color_averages))
                            for d_kind, color_averages in self._color_averages.items()}

            # Display a histogram comparing train and test
            color_averages_df = pd.DataFrame(return_value).unstack().reset_index()
            color_averages_df.columns = ['Dataset', 'Channel', 'Pixel Value']
            fig = px.histogram(color_averages_df, x='Dataset', y='Pixel Value', color='Channel', barmode='group',
                               histfunc='avg', color_discrete_sequence=['rgb(255,0,0)', 'rgb(0,255,0)', 'rgb(0,0,255)'],
                               title='Color Averages Histogram')
            return CheckResult(return_value, display=[fig])

        # **New Code Here**!!!
        # ========================
        def add_condition_color_average_change_not_greater_than(self, change_ratio: float = 0.1) -> ConditionResult:
            """Add a condition verifying that the color averages haven't changed by more than change_ratio%."""

            def condition(check_result: CheckResult) -> ConditionResult:
                failing_channels = []
                # Iterate over the color averages and verify that they haven't changed by more than change_ratio
                for channel in check_result.value[DatasetKind.TRAIN.value].keys():
                    if abs(check_result.value[DatasetKind.TRAIN.value][channel] -
                           check_result.value[DatasetKind.TEST.value][channel]) > change_ratio:
                        failing_channels.append(channel)

                # If there are failing channels, return a condition result with the failing channels
                if failing_channels:
                    return ConditionResult(ConditionCategory.FAIL, f'The color averages have changes by more than threshold in the channels'
                                                  f' {failing_channels}.')
                else:
                    return ConditionResult(ConditionCategory.PASS)

            return self.add_condition(f'Change in color averages not greater than {change_ratio:.2%}', condition)








.. GENERATED FROM PYTHON SOURCE LINES 276-277

Let check it out:

.. GENERATED FROM PYTHON SOURCE LINES 277-280

.. code-block:: default

    result = ColorAveragesCheck().run(train_ds, test_ds)
    result





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Validating Input:   0%| | 0/1 [00:00<?, ? /s]                                                 Ingesting Batches - Train Dataset:   0%|  | 0/2 [00:00<?, ? Batch/s]    Ingesting Batches - Train Dataset:  50%|# | 1/2 [00:00<00:00,  2.22 Batch/s]    Ingesting Batches - Train Dataset: 100%|##| 2/2 [00:00<00:00,  2.34 Batch/s]                                                                                Ingesting Batches - Test Dataset:   0%|  | 0/2 [00:00<?, ? Batch/s]    Ingesting Batches - Test Dataset:  50%|# | 1/2 [00:00<00:00,  2.63 Batch/s]    Ingesting Batches - Test Dataset: 100%|##| 2/2 [00:00<00:00,  2.43 Batch/s]                                                                               Computing Check:   0%| | 0/1 [00:00<?, ? Check/s]                                                 

.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <!--
        ~ ----------------------------------------------------------------------------
        ~ Copyright (C) 2021-2022 Deepchecks (https://www.deepchecks.com)
        ~
        ~ This file is part of Deepchecks.
        ~ Deepchecks is distributed under the terms of the GNU Affero General
        ~ Public License (version 3 or later).
        ~ You should have received a copy of the GNU Affero General Public License
        ~ along with Deepchecks.  If not, see <http://www.gnu.org/licenses/>.
        ~ ----------------------------------------------------------------------------
        ~
    -->
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Color Averages Check</title>
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
                font-size: 1rem;
                line-height: 1.5;
                color: #212529;
                text-align: left;
                max-width: 1200px;
                margin: auto;
            }

            div.nbinput.container div.prompt *,
            div.nboutput.container div.prompt *,
            div.nbinput.container div.input_area pre,
            div.nboutput.container div.output_area pre,
            div.nbinput.container div.input_area .highlight,
            div.nboutput.container div.output_area .highlight {
                border: none;
                padding: 0;
                margin: 0;
                box-shadow: none;
            }

            div.nbinput.container > div[class*=highlight],
            div.nboutput.container > div[class*=highlight] {
                margin: 0;
            }

            div.nbinput.container div.prompt *,
            div.nboutput.container div.prompt * {
                background: none;
            }

            div.nboutput.container div.output_area .highlight,
            div.nboutput.container div.output_area pre {
                background: unset;
            }

            div.nboutput.container div.output_area div.highlight {
                color: unset;  /* override Pygments text color */
            }

            /* avoid gaps between output lines */
            div.nboutput.container div[class*=highlight] pre {
                line-height: normal;
            }

            /* input/output containers */
            div.nbinput.container,
            div.nboutput.container {
                display: -webkit-flex;
                display: flex;
                align-items: flex-start;
                margin: 0;
                width: 100%;
            }
            @media (max-width: 540px) {
                div.nbinput.container,
                div.nboutput.container {
                    flex-direction: column;
                }
            }

            /* input container */
            div.nbinput.container {
                padding-top: 5px;
            }

            /* last container */
            div.nblast.container {
                padding-bottom: 5px;
            }

            /* input prompt */
            div.nbinput.container div.prompt pre {
                color: #307FC1;
            }

            /* output prompt */
            div.nboutput.container div.prompt pre {
                color: #BF5B3D;
            }

            /* all prompts */
            div.nbinput.container div.prompt,
            div.nboutput.container div.prompt {
                width: 4.5ex;
                padding-top: 5px;
                position: relative;
                user-select: none;
            }

            div.nbinput.container div.prompt > div,
            div.nboutput.container div.prompt > div {
                position: absolute;
                right: 0;
                margin-right: 0.3ex;
            }

            @media (max-width: 540px) {
                div.nbinput.container div.prompt,
                div.nboutput.container div.prompt {
                    width: unset;
                    text-align: left;
                    padding: 0.4em;
                }
                div.nboutput.container div.prompt.empty {
                    padding: 0;
                }

                div.nbinput.container div.prompt > div,
                div.nboutput.container div.prompt > div {
                    position: unset;
                }
            }

            /* disable scrollbars on prompts */
            div.nbinput.container div.prompt pre,
            div.nboutput.container div.prompt pre {
                overflow: hidden;
            }

            /* input/output area */
            div.nbinput.container div.input_area,
            div.nboutput.container div.output_area {
                -webkit-flex: 1;
                flex: 1;
                overflow: auto;
            }
            @media (max-width: 540px) {
                div.nbinput.container div.input_area,
                div.nboutput.container div.output_area {
                    width: 100%;
                }
            }

            /* input area */
            div.nbinput.container div.input_area {
                border: 1px solid #e0e0e0;
                border-radius: 2px;
                /*background: #f5f5f5;*/
            }

            /* override MathJax center alignment in output cells */
            div.nboutput.container div[class*=MathJax] {
                text-align: left !important;
            }

            /* override sphinx.ext.imgmath center alignment in output cells */
            div.nboutput.container div.math p {
                text-align: left;
            }

            /* standard error */
            div.nboutput.container div.output_area.stderr {
                background: #fdd;
            }

            /* ANSI colors */
            .ansi-black-fg { color: #3E424D; }
            .ansi-black-bg { background-color: #3E424D; }
            .ansi-black-intense-fg { color: #282C36; }
            .ansi-black-intense-bg { background-color: #282C36; }
            .ansi-red-fg { color: #E75C58; }
            .ansi-red-bg { background-color: #E75C58; }
            .ansi-red-intense-fg { color: #B22B31; }
            .ansi-red-intense-bg { background-color: #B22B31; }
            .ansi-green-fg { color: #00A250; }
            .ansi-green-bg { background-color: #00A250; }
            .ansi-green-intense-fg { color: #007427; }
            .ansi-green-intense-bg { background-color: #007427; }
            .ansi-yellow-fg { color: #DDB62B; }
            .ansi-yellow-bg { background-color: #DDB62B; }
            .ansi-yellow-intense-fg { color: #B27D12; }
            .ansi-yellow-intense-bg { background-color: #B27D12; }
            .ansi-blue-fg { color: #208FFB; }
            .ansi-blue-bg { background-color: #208FFB; }
            .ansi-blue-intense-fg { color: #0065CA; }
            .ansi-blue-intense-bg { background-color: #0065CA; }
            .ansi-magenta-fg { color: #D160C4; }
            .ansi-magenta-bg { background-color: #D160C4; }
            .ansi-magenta-intense-fg { color: #A03196; }
            .ansi-magenta-intense-bg { background-color: #A03196; }
            .ansi-cyan-fg { color: #60C6C8; }
            .ansi-cyan-bg { background-color: #60C6C8; }
            .ansi-cyan-intense-fg { color: #258F8F; }
            .ansi-cyan-intense-bg { background-color: #258F8F; }
            .ansi-white-fg { color: #C5C1B4; }
            .ansi-white-bg { background-color: #C5C1B4; }
            .ansi-white-intense-fg { color: #A1A6B2; }
            .ansi-white-intense-bg { background-color: #A1A6B2; }

            .ansi-default-inverse-fg { color: #FFFFFF; }
            .ansi-default-inverse-bg { background-color: #000000; }

            .ansi-bold { font-weight: bold; }
            .ansi-underline { text-decoration: underline; }


            div.nbinput.container div.input_area div[class*=highlight] > pre,
            div.nboutput.container div.output_area div[class*=highlight] > pre,
            div.nboutput.container div.output_area div[class*=highlight].math,
            div.nboutput.container div.output_area.rendered_html,
            div.nboutput.container div.output_area > div.output_javascript,
            div.nboutput.container div.output_area:not(.rendered_html) > img{
                padding: 5px;
                margin: 0;
            }

            /* fix copybtn overflow problem in chromium (needed for 'sphinx_copybutton') */
            div.nbinput.container div.input_area > div[class^='highlight'],
            div.nboutput.container div.output_area > div[class^='highlight']{
                overflow-y: hidden;
            }

            /* hide copybtn icon on prompts (needed for 'sphinx_copybutton') */
            .prompt .copybtn {
                display: none;
            }

            /* Some additional styling taken form the Jupyter notebook CSS */
            div.rendered_html table {
            border: none;
            border-collapse: collapse;
            border-spacing: 0;
            color: black;
            font-size: 12px;
            table-layout: fixed;
            }
            div.rendered_html thead {
            border-bottom: 1px solid black;
            vertical-align: bottom;
            }
            div.rendered_html tr,
            div.rendered_html th,
            div.rendered_html td {
            text-align: right;
            vertical-align: middle;
            padding: 0.5em 0.5em;
            line-height: normal;
            white-space: normal;
            max-width: none;
            border: none;
            }
            div.rendered_html th {
            font-weight: bold;
            }
            div.rendered_html tbody tr:nth-child(odd) {
            background: #f5f5f5;
            }
            div.rendered_html tbody tr:hover {
            background: rgba(66, 165, 245, 0.2);
            }
        </style>
        <script>
            (!window.navigator.onLine ? alert('needs internet connection') : '');
        </script>
    </head>
    <body>
    
    <script src="" crossorigin="anonymous"></script>
    <script type="application/vnd.jupyter.widget-state+json">
    {
      "version_major": 2,
      "version_minor": 0,
      "state": {
        "6eca42fdcf85495db85f637d75150b51": {
          "model_name": "VBoxModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [
              "rendered_html",
              "jp-RenderedHTMLCommon",
              "jp-RenderedHTML",
              "jp-OutputArea-output"
            ],
            "children": [
              "IPY_MODEL_edfe419717074b3fa27d8b51fe6182c8",
              "IPY_MODEL_8bf5ccb7bccd4981a6e78bfaa0fa5836",
              "IPY_MODEL_1ff1d987e7f84977baa19dfa97dc4d9d",
              "IPY_MODEL_30b3ebfe069f418b8e9e69af13e4b7c9"
            ],
            "layout": "IPY_MODEL_ab53e4da4bee4067b28ae6ea8783f662"
          }
        },
        "edfe419717074b3fa27d8b51fe6182c8": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_585f8e36033a4f4cba7282d5f1af2b71",
            "style": "IPY_MODEL_1bb9e096a6c2495dabed6d21b5be3dcf",
            "value": "<h4><b>Color Averages Check</b></h4>"
          }
        },
        "585f8e36033a4f4cba7282d5f1af2b71": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "1bb9e096a6c2495dabed6d21b5be3dcf": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "8bf5ccb7bccd4981a6e78bfaa0fa5836": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_581b15df3368413ea5f91b781b253a81",
            "style": "IPY_MODEL_cc7043a7bca34a67aac45250182b9a9e",
            "value": "<p>Check if the average of each color channel is the same between the train and test dataset.</p>"
          }
        },
        "581b15df3368413ea5f91b781b253a81": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "cc7043a7bca34a67aac45250182b9a9e": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "1ff1d987e7f84977baa19dfa97dc4d9d": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_89136a537f2f49f3848eb4d135de646d",
            "style": "IPY_MODEL_cb0dc09a389645d997708d758c993ac7"
          }
        },
        "89136a537f2f49f3848eb4d135de646d": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "cb0dc09a389645d997708d758c993ac7": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "30b3ebfe069f418b8e9e69af13e4b7c9": {
          "model_name": "VBoxModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "children": [
              "IPY_MODEL_65a51b6c03f9428787d052f86d887e7f",
              "IPY_MODEL_42e200a332c54d25a7442d3dfdeaee41"
            ],
            "layout": "IPY_MODEL_fc436a4373f34890bee91f5594926a91"
          }
        },
        "65a51b6c03f9428787d052f86d887e7f": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_5595f2fd8de04e4884107001d0d157f7",
            "style": "IPY_MODEL_3012f7ea53c24fa384f3b27352ddecd9",
            "value": "<h5><b>Additional Outputs</b></h5>"
          }
        },
        "5595f2fd8de04e4884107001d0d157f7": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "3012f7ea53c24fa384f3b27352ddecd9": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "42e200a332c54d25a7442d3dfdeaee41": {
          "model_name": "FigureModel",
          "model_module": "jupyterlab-plotly",
          "model_module_version": "^5.5.0",
          "state": {
            "_config": {
              "plotlyServerURL": "https://plot.ly"
            },
            "_data": [
              {
                "alignmentgroup": "True",
                "bingroup": "x",
                "histfunc": "avg",
                "hovertemplate": "Channel=R<br>Dataset=%{x}<br>avg of Pixel Value=%{y}<extra></extra>",
                "legendgroup": "R",
                "marker": {
                  "color": "rgb(255,0,0)",
                  "pattern": {
                    "shape": ""
                  }
                },
                "name": "R",
                "offsetgroup": "R",
                "orientation": "v",
                "showlegend": true,
                "x": [
                  "Train",
                  "Test"
                ],
                "xaxis": "x",
                "y": {
                  "dtype": "float64",
                  "shape": [
                    2
                  ]
                },
                "yaxis": "y",
                "type": "histogram",
                "uid": "164fa06f-acc7-493f-901b-20df34887d8a"
              },
              {
                "alignmentgroup": "True",
                "bingroup": "x",
                "histfunc": "avg",
                "hovertemplate": "Channel=G<br>Dataset=%{x}<br>avg of Pixel Value=%{y}<extra></extra>",
                "legendgroup": "G",
                "marker": {
                  "color": "rgb(0,255,0)",
                  "pattern": {
                    "shape": ""
                  }
                },
                "name": "G",
                "offsetgroup": "G",
                "orientation": "v",
                "showlegend": true,
                "x": [
                  "Train",
                  "Test"
                ],
                "xaxis": "x",
                "y": {
                  "dtype": "float64",
                  "shape": [
                    2
                  ]
                },
                "yaxis": "y",
                "type": "histogram",
                "uid": "b372410b-fcf7-425d-80a8-1a3e23e62fa8"
              },
              {
                "alignmentgroup": "True",
                "bingroup": "x",
                "histfunc": "avg",
                "hovertemplate": "Channel=B<br>Dataset=%{x}<br>avg of Pixel Value=%{y}<extra></extra>",
                "legendgroup": "B",
                "marker": {
                  "color": "rgb(0,0,255)",
                  "pattern": {
                    "shape": ""
                  }
                },
                "name": "B",
                "offsetgroup": "B",
                "orientation": "v",
                "showlegend": true,
                "x": [
                  "Train",
                  "Test"
                ],
                "xaxis": "x",
                "y": {
                  "dtype": "float64",
                  "shape": [
                    2
                  ]
                },
                "yaxis": "y",
                "type": "histogram",
                "uid": "5122bfb2-912d-47d2-9ec2-67618c9d0f12"
              }
            ],
            "_dom_classes": [],
            "_js2py_layoutDelta": {},
            "_js2py_pointsCallback": {},
            "_js2py_relayout": {},
            "_js2py_restyle": {},
            "_js2py_traceDeltas": {},
            "_js2py_update": {},
            "_layout": {
              "barmode": "group",
              "legend": {
                "title": {
                  "text": "Channel"
                },
                "tracegroupgap": 0
              },
              "template": {
                "data": {
                  "barpolar": [
                    {
                      "marker": {
                        "line": {
                          "color": "#E5ECF6",
                          "width": 0.5
                        },
                        "pattern": {
                          "fillmode": "overlay",
                          "size": 10,
                          "solidity": 0.2
                        }
                      },
                      "type": "barpolar"
                    }
                  ],
                  "bar": [
                    {
                      "error_x": {
                        "color": "#2a3f5f"
                      },
                      "error_y": {
                        "color": "#2a3f5f"
                      },
                      "marker": {
                        "line": {
                          "color": "#E5ECF6",
                          "width": 0.5
                        },
                        "pattern": {
                          "fillmode": "overlay",
                          "size": 10,
                          "solidity": 0.2
                        }
                      },
                      "type": "bar"
                    }
                  ],
                  "carpet": [
                    {
                      "aaxis": {
                        "endlinecolor": "#2a3f5f",
                        "gridcolor": "white",
                        "linecolor": "white",
                        "minorgridcolor": "white",
                        "startlinecolor": "#2a3f5f"
                      },
                      "baxis": {
                        "endlinecolor": "#2a3f5f",
                        "gridcolor": "white",
                        "linecolor": "white",
                        "minorgridcolor": "white",
                        "startlinecolor": "#2a3f5f"
                      },
                      "type": "carpet"
                    }
                  ],
                  "choropleth": [
                    {
                      "colorbar": {
                        "outlinewidth": 0,
                        "ticks": ""
                      },
                      "type": "choropleth"
                    }
                  ],
                  "contourcarpet": [
                    {
                      "colorbar": {
                        "outlinewidth": 0,
                        "ticks": ""
                      },
                      "type": "contourcarpet"
                    }
                  ],
                  "contour": [
                    {
                      "colorbar": {
                        "outlinewidth": 0,
                        "ticks": ""
                      },
                      "colorscale": [
                        [
                          0.0,
                          "#0d0887"
                        ],
                        [
                          0.1111111111111111,
                          "#46039f"
                        ],
                        [
                          0.2222222222222222,
                          "#7201a8"
                        ],
                        [
                          0.3333333333333333,
                          "#9c179e"
                        ],
                        [
                          0.4444444444444444,
                          "#bd3786"
                        ],
                        [
                          0.5555555555555556,
                          "#d8576b"
                        ],
                        [
                          0.6666666666666666,
                          "#ed7953"
                        ],
                        [
                          0.7777777777777778,
                          "#fb9f3a"
                        ],
                        [
                          0.8888888888888888,
                          "#fdca26"
                        ],
                        [
                          1.0,
                          "#f0f921"
                        ]
                      ],
                      "type": "contour"
                    }
                  ],
                  "heatmapgl": [
                    {
                      "colorbar": {
                        "outlinewidth": 0,
                        "ticks": ""
                      },
                      "colorscale": [
                        [
                          0.0,
                          "#0d0887"
                        ],
                        [
                          0.1111111111111111,
                          "#46039f"
                        ],
                        [
                          0.2222222222222222,
                          "#7201a8"
                        ],
                        [
                          0.3333333333333333,
                          "#9c179e"
                        ],
                        [
                          0.4444444444444444,
                          "#bd3786"
                        ],
                        [
                          0.5555555555555556,
                          "#d8576b"
                        ],
                        [
                          0.6666666666666666,
                          "#ed7953"
                        ],
                        [
                          0.7777777777777778,
                          "#fb9f3a"
                        ],
                        [
                          0.8888888888888888,
                          "#fdca26"
                        ],
                        [
                          1.0,
                          "#f0f921"
                        ]
                      ],
                      "type": "heatmapgl"
                    }
                  ],
                  "heatmap": [
                    {
                      "colorbar": {
                        "outlinewidth": 0,
                        "ticks": ""
                      },
                      "colorscale": [
                        [
                          0.0,
                          "#0d0887"
                        ],
                        [
                          0.1111111111111111,
                          "#46039f"
                        ],
                        [
                          0.2222222222222222,
                          "#7201a8"
                        ],
                        [
                          0.3333333333333333,
                          "#9c179e"
                        ],
                        [
                          0.4444444444444444,
                          "#bd3786"
                        ],
                        [
                          0.5555555555555556,
                          "#d8576b"
                        ],
                        [
                          0.6666666666666666,
                          "#ed7953"
                        ],
                        [
                          0.7777777777777778,
                          "#fb9f3a"
                        ],
                        [
                          0.8888888888888888,
                          "#fdca26"
                        ],
                        [
                          1.0,
                          "#f0f921"
                        ]
                      ],
                      "type": "heatmap"
                    }
                  ],
                  "histogram2dcontour": [
                    {
                      "colorbar": {
                        "outlinewidth": 0,
                        "ticks": ""
                      },
                      "colorscale": [
                        [
                          0.0,
                          "#0d0887"
                        ],
                        [
                          0.1111111111111111,
                          "#46039f"
                        ],
                        [
                          0.2222222222222222,
                          "#7201a8"
                        ],
                        [
                          0.3333333333333333,
                          "#9c179e"
                        ],
                        [
                          0.4444444444444444,
                          "#bd3786"
                        ],
                        [
                          0.5555555555555556,
                          "#d8576b"
                        ],
                        [
                          0.6666666666666666,
                          "#ed7953"
                        ],
                        [
                          0.7777777777777778,
                          "#fb9f3a"
                        ],
                        [
                          0.8888888888888888,
                          "#fdca26"
                        ],
                        [
                          1.0,
                          "#f0f921"
                        ]
                      ],
                      "type": "histogram2dcontour"
                    }
                  ],
                  "histogram2d": [
                    {
                      "colorbar": {
                        "outlinewidth": 0,
                        "ticks": ""
                      },
                      "colorscale": [
                        [
                          0.0,
                          "#0d0887"
                        ],
                        [
                          0.1111111111111111,
                          "#46039f"
                        ],
                        [
                          0.2222222222222222,
                          "#7201a8"
                        ],
                        [
                          0.3333333333333333,
                          "#9c179e"
                        ],
                        [
                          0.4444444444444444,
                          "#bd3786"
                        ],
                        [
                          0.5555555555555556,
                          "#d8576b"
                        ],
                        [
                          0.6666666666666666,
                          "#ed7953"
                        ],
                        [
                          0.7777777777777778,
                          "#fb9f3a"
                        ],
                        [
                          0.8888888888888888,
                          "#fdca26"
                        ],
                        [
                          1.0,
                          "#f0f921"
                        ]
                      ],
                      "type": "histogram2d"
                    }
                  ],
                  "histogram": [
                    {
                      "marker": {
                        "pattern": {
                          "fillmode": "overlay",
                          "size": 10,
                          "solidity": 0.2
                        }
                      },
                      "type": "histogram"
                    }
                  ],
                  "mesh3d": [
                    {
                      "colorbar": {
                        "outlinewidth": 0,
                        "ticks": ""
                      },
                      "type": "mesh3d"
                    }
                  ],
                  "parcoords": [
                    {
                      "line": {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        }
                      },
                      "type": "parcoords"
                    }
                  ],
                  "pie": [
                    {
                      "automargin": true,
                      "type": "pie"
                    }
                  ],
                  "scatter3d": [
                    {
                      "line": {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        }
                      },
                      "marker": {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        }
                      },
                      "type": "scatter3d"
                    }
                  ],
                  "scattercarpet": [
                    {
                      "marker": {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        }
                      },
                      "type": "scattercarpet"
                    }
                  ],
                  "scattergeo": [
                    {
                      "marker": {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        }
                      },
                      "type": "scattergeo"
                    }
                  ],
                  "scattergl": [
                    {
                      "marker": {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        }
                      },
                      "type": "scattergl"
                    }
                  ],
                  "scattermapbox": [
                    {
                      "marker": {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        }
                      },
                      "type": "scattermapbox"
                    }
                  ],
                  "scatterpolargl": [
                    {
                      "marker": {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        }
                      },
                      "type": "scatterpolargl"
                    }
                  ],
                  "scatterpolar": [
                    {
                      "marker": {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        }
                      },
                      "type": "scatterpolar"
                    }
                  ],
                  "scatter": [
                    {
                      "marker": {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        }
                      },
                      "type": "scatter"
                    }
                  ],
                  "scatterternary": [
                    {
                      "marker": {
                        "colorbar": {
                          "outlinewidth": 0,
                          "ticks": ""
                        }
                      },
                      "type": "scatterternary"
                    }
                  ],
                  "surface": [
                    {
                      "colorbar": {
                        "outlinewidth": 0,
                        "ticks": ""
                      },
                      "colorscale": [
                        [
                          0.0,
                          "#0d0887"
                        ],
                        [
                          0.1111111111111111,
                          "#46039f"
                        ],
                        [
                          0.2222222222222222,
                          "#7201a8"
                        ],
                        [
                          0.3333333333333333,
                          "#9c179e"
                        ],
                        [
                          0.4444444444444444,
                          "#bd3786"
                        ],
                        [
                          0.5555555555555556,
                          "#d8576b"
                        ],
                        [
                          0.6666666666666666,
                          "#ed7953"
                        ],
                        [
                          0.7777777777777778,
                          "#fb9f3a"
                        ],
                        [
                          0.8888888888888888,
                          "#fdca26"
                        ],
                        [
                          1.0,
                          "#f0f921"
                        ]
                      ],
                      "type": "surface"
                    }
                  ],
                  "table": [
                    {
                      "cells": {
                        "fill": {
                          "color": "#EBF0F8"
                        },
                        "line": {
                          "color": "white"
                        }
                      },
                      "header": {
                        "fill": {
                          "color": "#C8D4E3"
                        },
                        "line": {
                          "color": "white"
                        }
                      },
                      "type": "table"
                    }
                  ]
                },
                "layout": {
                  "annotationdefaults": {
                    "arrowcolor": "#2a3f5f",
                    "arrowhead": 0,
                    "arrowwidth": 1
                  },
                  "autotypenumbers": "strict",
                  "coloraxis": {
                    "colorbar": {
                      "outlinewidth": 0,
                      "ticks": ""
                    }
                  },
                  "colorscale": {
                    "diverging": [
                      [
                        0,
                        "#8e0152"
                      ],
                      [
                        0.1,
                        "#c51b7d"
                      ],
                      [
                        0.2,
                        "#de77ae"
                      ],
                      [
                        0.3,
                        "#f1b6da"
                      ],
                      [
                        0.4,
                        "#fde0ef"
                      ],
                      [
                        0.5,
                        "#f7f7f7"
                      ],
                      [
                        0.6,
                        "#e6f5d0"
                      ],
                      [
                        0.7,
                        "#b8e186"
                      ],
                      [
                        0.8,
                        "#7fbc41"
                      ],
                      [
                        0.9,
                        "#4d9221"
                      ],
                      [
                        1,
                        "#276419"
                      ]
                    ],
                    "sequential": [
                      [
                        0.0,
                        "#0d0887"
                      ],
                      [
                        0.1111111111111111,
                        "#46039f"
                      ],
                      [
                        0.2222222222222222,
                        "#7201a8"
                      ],
                      [
                        0.3333333333333333,
                        "#9c179e"
                      ],
                      [
                        0.4444444444444444,
                        "#bd3786"
                      ],
                      [
                        0.5555555555555556,
                        "#d8576b"
                      ],
                      [
                        0.6666666666666666,
                        "#ed7953"
                      ],
                      [
                        0.7777777777777778,
                        "#fb9f3a"
                      ],
                      [
                        0.8888888888888888,
                        "#fdca26"
                      ],
                      [
                        1.0,
                        "#f0f921"
                      ]
                    ],
                    "sequentialminus": [
                      [
                        0.0,
                        "#0d0887"
                      ],
                      [
                        0.1111111111111111,
                        "#46039f"
                      ],
                      [
                        0.2222222222222222,
                        "#7201a8"
                      ],
                      [
                        0.3333333333333333,
                        "#9c179e"
                      ],
                      [
                        0.4444444444444444,
                        "#bd3786"
                      ],
                      [
                        0.5555555555555556,
                        "#d8576b"
                      ],
                      [
                        0.6666666666666666,
                        "#ed7953"
                      ],
                      [
                        0.7777777777777778,
                        "#fb9f3a"
                      ],
                      [
                        0.8888888888888888,
                        "#fdca26"
                      ],
                      [
                        1.0,
                        "#f0f921"
                      ]
                    ]
                  },
                  "colorway": [
                    "#636efa",
                    "#EF553B",
                    "#00cc96",
                    "#ab63fa",
                    "#FFA15A",
                    "#19d3f3",
                    "#FF6692",
                    "#B6E880",
                    "#FF97FF",
                    "#FECB52"
                  ],
                  "font": {
                    "color": "#2a3f5f"
                  },
                  "geo": {
                    "bgcolor": "white",
                    "lakecolor": "white",
                    "landcolor": "#E5ECF6",
                    "showlakes": true,
                    "showland": true,
                    "subunitcolor": "white"
                  },
                  "hoverlabel": {
                    "align": "left"
                  },
                  "hovermode": "closest",
                  "mapbox": {
                    "style": "light"
                  },
                  "paper_bgcolor": "white",
                  "plot_bgcolor": "#E5ECF6",
                  "polar": {
                    "angularaxis": {
                      "gridcolor": "white",
                      "linecolor": "white",
                      "ticks": ""
                    },
                    "bgcolor": "#E5ECF6",
                    "radialaxis": {
                      "gridcolor": "white",
                      "linecolor": "white",
                      "ticks": ""
                    }
                  },
                  "scene": {
                    "xaxis": {
                      "backgroundcolor": "#E5ECF6",
                      "gridcolor": "white",
                      "gridwidth": 2,
                      "linecolor": "white",
                      "showbackground": true,
                      "ticks": "",
                      "zerolinecolor": "white"
                    },
                    "yaxis": {
                      "backgroundcolor": "#E5ECF6",
                      "gridcolor": "white",
                      "gridwidth": 2,
                      "linecolor": "white",
                      "showbackground": true,
                      "ticks": "",
                      "zerolinecolor": "white"
                    },
                    "zaxis": {
                      "backgroundcolor": "#E5ECF6",
                      "gridcolor": "white",
                      "gridwidth": 2,
                      "linecolor": "white",
                      "showbackground": true,
                      "ticks": "",
                      "zerolinecolor": "white"
                    }
                  },
                  "shapedefaults": {
                    "line": {
                      "color": "#2a3f5f"
                    }
                  },
                  "ternary": {
                    "aaxis": {
                      "gridcolor": "white",
                      "linecolor": "white",
                      "ticks": ""
                    },
                    "baxis": {
                      "gridcolor": "white",
                      "linecolor": "white",
                      "ticks": ""
                    },
                    "bgcolor": "#E5ECF6",
                    "caxis": {
                      "gridcolor": "white",
                      "linecolor": "white",
                      "ticks": ""
                    }
                  },
                  "title": {
                    "x": 0.05
                  },
                  "xaxis": {
                    "automargin": true,
                    "gridcolor": "white",
                    "linecolor": "white",
                    "ticks": "",
                    "title": {
                      "standoff": 15
                    },
                    "zerolinecolor": "white",
                    "zerolinewidth": 2
                  },
                  "yaxis": {
                    "automargin": true,
                    "gridcolor": "white",
                    "linecolor": "white",
                    "ticks": "",
                    "title": {
                      "standoff": 15
                    },
                    "zerolinecolor": "white",
                    "zerolinewidth": 2
                  }
                }
              },
              "title": {
                "text": "Color Averages Histogram"
              },
              "xaxis": {
                "anchor": "y",
                "domain": [
                  0.0,
                  1.0
                ],
                "title": {
                  "text": "Dataset"
                }
              },
              "yaxis": {
                "anchor": "x",
                "domain": [
                  0.0,
                  1.0
                ],
                "title": {
                  "text": "avg of Pixel Value"
                }
              }
            },
            "_py2js_addTraces": {},
            "_py2js_animate": {},
            "_py2js_deleteTraces": {},
            "_py2js_moveTraces": {},
            "_py2js_relayout": {},
            "_py2js_removeLayoutProps": {},
            "_py2js_removeTraceProps": {},
            "_py2js_restyle": {},
            "_py2js_update": {},
            "_view_count": 0
          },
          "buffers": [
            {
              "encoding": "base64",
              "path": [
                "_data",
                0,
                "y",
                "buffer"
              ],
              "data": "ncFx1/AlXkDFU2+mPqxcQA=="
            },
            {
              "encoding": "base64",
              "path": [
                "_data",
                1,
                "y",
                "buffer"
              ],
              "data": "2uiSV3xqXUDblxUM1t1aQA=="
            },
            {
              "encoding": "base64",
              "path": [
                "_data",
                2,
                "y",
                "buffer"
              ],
              "data": "2yvhtF6lWUCVoAfXcFlYQA=="
            }
          ]
        },
        "fc436a4373f34890bee91f5594926a91": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "ab53e4da4bee4067b28ae6ea8783f662": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        }
      }
    }
    </script>
    <script type="application/vnd.jupyter.widget-view+json">
    {"version_major": 2, "version_minor": 0, "model_id": "6eca42fdcf85495db85f637d75150b51"}
    </script>

    </body>
    </html>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 281-282

And now our check we will alert us automatically if the color averages have changed by more than 10%!

.. GENERATED FROM PYTHON SOURCE LINES 285-298

Base Checks Types
==================
Vision checks all inherit from one of the following classes:

- :class:`~deepchecks.vision.base_checks.SingleDatasetCheck` - Check that runs on a single dataset and model.
- :class:`~deepchecks.vision.base_checks.TrainTestCheck` - Check that runs on a train and test dataset and model.
- :class:`~deepchecks.vision.base_checks.ModelOnlyCheck` - Check that runs on only a model .

All three classes inherit from the :class:`~deepchecks.core.checks.BaseCheck` BaseCheck, same as checks in any other
deepchecks subpackage. Each has its own run signature, according to the objects on which it will run.

The first two classes of checks run some logic on the image data, and so the check structure is designed to enable
accumulating and computation on batches outputted by the dataloader.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.708 seconds)


.. _sphx_glr_download_user-guide_vision_auto_tutorials_plot_custom_checks.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_custom_checks.py <plot_custom_checks.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_custom_checks.ipynb <plot_custom_checks.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
