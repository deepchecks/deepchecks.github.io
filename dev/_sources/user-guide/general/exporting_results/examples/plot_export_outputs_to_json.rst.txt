
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "user-guide/general/exporting_results/examples/plot_export_outputs_to_json.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_user-guide_general_exporting_results_examples_plot_export_outputs_to_json.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_user-guide_general_exporting_results_examples_plot_export_outputs_to_json.py:


Export Outputs to JSON
**********************

In this guide, we will demonstrate how to export the Check's and the Suite's output to JSON format.

This enables to use the exported results as a serializeable object that can later be
shared or reviewed in other Python scopes, and also enables working with the check's
output (name, parameters, result value and result display) not only in a visual manner
(e.g. by parsing the output JSON).

**Structure:**

* `Load Data <#load-data>`__
* `Run a Check <#run-a-check>`__
* `Export Check to JSON <#export-a-check-s-output-checkresult-to-a-json-format>`__
* `Export Suite to JSON <#exporting-a-suite-s-output-suiteresult-to-json>`__

.. GENERATED FROM PYTHON SOURCE LINES 22-24

Load Data
=========

.. GENERATED FROM PYTHON SOURCE LINES 24-30

.. code-block:: default


    from deepchecks.tabular.datasets.classification import iris

    train_dataset, test_dataset = iris.load_data()
    model = iris.load_fitted_model()








.. GENERATED FROM PYTHON SOURCE LINES 31-33

Run a Check
===========

.. GENERATED FROM PYTHON SOURCE LINES 33-39

.. code-block:: default


    from deepchecks.tabular.checks import WholeDatasetDrift

    result = WholeDatasetDrift().add_condition_overall_drift_value_not_greater_than(
    ).run(train_dataset, test_dataset, model)








.. GENERATED FROM PYTHON SOURCE LINES 40-41

Observe CheckResult Display and Value

.. GENERATED FROM PYTHON SOURCE LINES 41-44

.. code-block:: default


    result






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <!--
        ~ ----------------------------------------------------------------------------
        ~ Copyright (C) 2021-2022 Deepchecks (https://www.deepchecks.com)
        ~
        ~ This file is part of Deepchecks.
        ~ Deepchecks is distributed under the terms of the GNU Affero General
        ~ Public License (version 3 or later).
        ~ You should have received a copy of the GNU Affero General Public License
        ~ along with Deepchecks.  If not, see <http://www.gnu.org/licenses/>.
        ~ ----------------------------------------------------------------------------
        ~
    -->
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Whole Dataset Drift</title>
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
                font-size: 1rem;
                line-height: 1.5;
                color: #212529;
                text-align: left;
                max-width: 1200px;
                margin: auto;
            }

            div.nbinput.container div.prompt *,
            div.nboutput.container div.prompt *,
            div.nbinput.container div.input_area pre,
            div.nboutput.container div.output_area pre,
            div.nbinput.container div.input_area .highlight,
            div.nboutput.container div.output_area .highlight {
                border: none;
                padding: 0;
                margin: 0;
                box-shadow: none;
            }

            div.nbinput.container > div[class*=highlight],
            div.nboutput.container > div[class*=highlight] {
                margin: 0;
            }

            div.nbinput.container div.prompt *,
            div.nboutput.container div.prompt * {
                background: none;
            }

            div.nboutput.container div.output_area .highlight,
            div.nboutput.container div.output_area pre {
                background: unset;
            }

            div.nboutput.container div.output_area div.highlight {
                color: unset;  /* override Pygments text color */
            }

            /* avoid gaps between output lines */
            div.nboutput.container div[class*=highlight] pre {
                line-height: normal;
            }

            /* input/output containers */
            div.nbinput.container,
            div.nboutput.container {
                display: -webkit-flex;
                display: flex;
                align-items: flex-start;
                margin: 0;
                width: 100%;
            }
            @media (max-width: 540px) {
                div.nbinput.container,
                div.nboutput.container {
                    flex-direction: column;
                }
            }

            /* input container */
            div.nbinput.container {
                padding-top: 5px;
            }

            /* last container */
            div.nblast.container {
                padding-bottom: 5px;
            }

            /* input prompt */
            div.nbinput.container div.prompt pre {
                color: #307FC1;
            }

            /* output prompt */
            div.nboutput.container div.prompt pre {
                color: #BF5B3D;
            }

            /* all prompts */
            div.nbinput.container div.prompt,
            div.nboutput.container div.prompt {
                width: 4.5ex;
                padding-top: 5px;
                position: relative;
                user-select: none;
            }

            div.nbinput.container div.prompt > div,
            div.nboutput.container div.prompt > div {
                position: absolute;
                right: 0;
                margin-right: 0.3ex;
            }

            @media (max-width: 540px) {
                div.nbinput.container div.prompt,
                div.nboutput.container div.prompt {
                    width: unset;
                    text-align: left;
                    padding: 0.4em;
                }
                div.nboutput.container div.prompt.empty {
                    padding: 0;
                }

                div.nbinput.container div.prompt > div,
                div.nboutput.container div.prompt > div {
                    position: unset;
                }
            }

            /* disable scrollbars on prompts */
            div.nbinput.container div.prompt pre,
            div.nboutput.container div.prompt pre {
                overflow: hidden;
            }

            /* input/output area */
            div.nbinput.container div.input_area,
            div.nboutput.container div.output_area {
                -webkit-flex: 1;
                flex: 1;
                overflow: auto;
            }
            @media (max-width: 540px) {
                div.nbinput.container div.input_area,
                div.nboutput.container div.output_area {
                    width: 100%;
                }
            }

            /* input area */
            div.nbinput.container div.input_area {
                border: 1px solid #e0e0e0;
                border-radius: 2px;
                /*background: #f5f5f5;*/
            }

            /* override MathJax center alignment in output cells */
            div.nboutput.container div[class*=MathJax] {
                text-align: left !important;
            }

            /* override sphinx.ext.imgmath center alignment in output cells */
            div.nboutput.container div.math p {
                text-align: left;
            }

            /* standard error */
            div.nboutput.container div.output_area.stderr {
                background: #fdd;
            }

            /* ANSI colors */
            .ansi-black-fg { color: #3E424D; }
            .ansi-black-bg { background-color: #3E424D; }
            .ansi-black-intense-fg { color: #282C36; }
            .ansi-black-intense-bg { background-color: #282C36; }
            .ansi-red-fg { color: #E75C58; }
            .ansi-red-bg { background-color: #E75C58; }
            .ansi-red-intense-fg { color: #B22B31; }
            .ansi-red-intense-bg { background-color: #B22B31; }
            .ansi-green-fg { color: #00A250; }
            .ansi-green-bg { background-color: #00A250; }
            .ansi-green-intense-fg { color: #007427; }
            .ansi-green-intense-bg { background-color: #007427; }
            .ansi-yellow-fg { color: #DDB62B; }
            .ansi-yellow-bg { background-color: #DDB62B; }
            .ansi-yellow-intense-fg { color: #B27D12; }
            .ansi-yellow-intense-bg { background-color: #B27D12; }
            .ansi-blue-fg { color: #208FFB; }
            .ansi-blue-bg { background-color: #208FFB; }
            .ansi-blue-intense-fg { color: #0065CA; }
            .ansi-blue-intense-bg { background-color: #0065CA; }
            .ansi-magenta-fg { color: #D160C4; }
            .ansi-magenta-bg { background-color: #D160C4; }
            .ansi-magenta-intense-fg { color: #A03196; }
            .ansi-magenta-intense-bg { background-color: #A03196; }
            .ansi-cyan-fg { color: #60C6C8; }
            .ansi-cyan-bg { background-color: #60C6C8; }
            .ansi-cyan-intense-fg { color: #258F8F; }
            .ansi-cyan-intense-bg { background-color: #258F8F; }
            .ansi-white-fg { color: #C5C1B4; }
            .ansi-white-bg { background-color: #C5C1B4; }
            .ansi-white-intense-fg { color: #A1A6B2; }
            .ansi-white-intense-bg { background-color: #A1A6B2; }

            .ansi-default-inverse-fg { color: #FFFFFF; }
            .ansi-default-inverse-bg { background-color: #000000; }

            .ansi-bold { font-weight: bold; }
            .ansi-underline { text-decoration: underline; }


            div.nbinput.container div.input_area div[class*=highlight] > pre,
            div.nboutput.container div.output_area div[class*=highlight] > pre,
            div.nboutput.container div.output_area div[class*=highlight].math,
            div.nboutput.container div.output_area.rendered_html,
            div.nboutput.container div.output_area > div.output_javascript,
            div.nboutput.container div.output_area:not(.rendered_html) > img{
                padding: 5px;
                margin: 0;
            }

            /* fix copybtn overflow problem in chromium (needed for 'sphinx_copybutton') */
            div.nbinput.container div.input_area > div[class^='highlight'],
            div.nboutput.container div.output_area > div[class^='highlight']{
                overflow-y: hidden;
            }

            /* hide copybtn icon on prompts (needed for 'sphinx_copybutton') */
            .prompt .copybtn {
                display: none;
            }

            /* Some additional styling taken form the Jupyter notebook CSS */
            div.rendered_html table {
            border: none;
            border-collapse: collapse;
            border-spacing: 0;
            color: black;
            font-size: 12px;
            table-layout: fixed;
            }
            div.rendered_html thead {
            border-bottom: 1px solid black;
            vertical-align: bottom;
            }
            div.rendered_html tr,
            div.rendered_html th,
            div.rendered_html td {
            text-align: right;
            vertical-align: middle;
            padding: 0.5em 0.5em;
            line-height: normal;
            white-space: normal;
            max-width: none;
            border: none;
            }
            div.rendered_html th {
            font-weight: bold;
            }
            div.rendered_html tbody tr:nth-child(odd) {
            background: #f5f5f5;
            }
            div.rendered_html tbody tr:hover {
            background: rgba(66, 165, 245, 0.2);
            }
        </style>
        <script>
            (!window.navigator.onLine ? alert('needs internet connection') : '');
        </script>
    </head>
    <body>
    
    <script src="" crossorigin="anonymous"></script>
    <script type="application/vnd.jupyter.widget-state+json">
    {
      "version_major": 2,
      "version_minor": 0,
      "state": {
        "fa6bf6c29bdd4e61acfd590bac044866": {
          "model_name": "VBoxModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [
              "rendered_html",
              "jp-RenderedHTMLCommon",
              "jp-RenderedHTML",
              "jp-OutputArea-output"
            ],
            "children": [
              "IPY_MODEL_1169bd0a6f7440c8a1f0b0c520658ce0",
              "IPY_MODEL_6c997aa6bd1c418fb4abf232cc23bc17",
              "IPY_MODEL_27cef5ca7ae641bbbbd4f486f55a4c84",
              "IPY_MODEL_8c88285061594c079936801c925edda6"
            ],
            "layout": "IPY_MODEL_3491c160a6d94c7ea0e3d7af03ceec0a"
          }
        },
        "1169bd0a6f7440c8a1f0b0c520658ce0": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_a2ce57cccaca468ab1320bcd6d7497a3",
            "style": "IPY_MODEL_3db2b1f57a074ba595ee7813e63b21fa",
            "value": "<h4><b>Whole Dataset Drift</b></h4>"
          }
        },
        "a2ce57cccaca468ab1320bcd6d7497a3": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "3db2b1f57a074ba595ee7813e63b21fa": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "6c997aa6bd1c418fb4abf232cc23bc17": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_c91f9367615349f898e0fb9fb32d5154",
            "style": "IPY_MODEL_9f631b3faab94048844d63f44c2b4f41",
            "value": "<p>    Calculate drift between the entire train and test datasets using a model trained to distinguish between them. <a href=\"https://docs.deepchecks.com/stable/checks_gallery/tabular/distribution/plot_whole_dataset_drift.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p>"
          }
        },
        "c91f9367615349f898e0fb9fb32d5154": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "9f631b3faab94048844d63f44c2b4f41": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "27cef5ca7ae641bbbbd4f486f55a4c84": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_24393967647a41a0b002ce21acffc360",
            "style": "IPY_MODEL_f7f865ee066a48ac82b99da6bc41791f",
            "value": "<h5>Conditions Summary</h5><style type=\"text/css\">\n#T_aa535 table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_aa535 thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_aa535 tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_aa535 th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_aa535 td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_aa535\">\n  <thead>\n    <tr>\n      <th id=\"T_aa535_level0_col0\" class=\"col_heading level0 col0\" >Status</th>\n      <th id=\"T_aa535_level0_col1\" class=\"col_heading level0 col1\" >Condition</th>\n      <th id=\"T_aa535_level0_col2\" class=\"col_heading level0 col2\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_aa535_row0_col0\" class=\"data row0 col0\" ><div style=\"color: green;text-align: center\">\u2713</div></td>\n      <td id=\"T_aa535_row0_col1\" class=\"data row0 col1\" >Drift value is not greater than 0.25</td>\n      <td id=\"T_aa535_row0_col2\" class=\"data row0 col2\" ></td>\n    </tr>\n  </tbody>\n</table>\n"
          }
        },
        "24393967647a41a0b002ce21acffc360": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "f7f865ee066a48ac82b99da6bc41791f": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "8c88285061594c079936801c925edda6": {
          "model_name": "VBoxModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "children": [
              "IPY_MODEL_6a43db65b3a74fe18d2f63f7b5ecd0a7",
              "IPY_MODEL_455f33faeb6c412199041862b9b65052"
            ],
            "layout": "IPY_MODEL_f844ba93cedb4cb8bd795a66d3450561"
          }
        },
        "6a43db65b3a74fe18d2f63f7b5ecd0a7": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_ac6b2592eef74d7590607d7e9cf54eed",
            "style": "IPY_MODEL_6f6cd90a3f8c4b4e84b5f1ca63864262",
            "value": "<h5><b>Additional Outputs</b></h5>"
          }
        },
        "ac6b2592eef74d7590607d7e9cf54eed": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "6f6cd90a3f8c4b4e84b5f1ca63864262": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "455f33faeb6c412199041862b9b65052": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_a32fccc1a6aa49278d9badc3c527e862",
            "style": "IPY_MODEL_8e0dc8be08e543b5ace0ab77114029e7",
            "value": "<p><b>&#x2713;</b>Nothing to display</p>"
          }
        },
        "a32fccc1a6aa49278d9badc3c527e862": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "8e0dc8be08e543b5ace0ab77114029e7": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "f844ba93cedb4cb8bd795a66d3450561": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "3491c160a6d94c7ea0e3d7af03ceec0a": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        }
      }
    }
    </script>
    <script type="application/vnd.jupyter.widget-view+json">
    {"version_major": 2, "version_minor": 0, "model_id": "fa6bf6c29bdd4e61acfd590bac044866"}
    </script>

    </body>
    </html>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 45-47

.. code-block:: default

    result.value





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    {'domain_classifier_auc': 0.4545454545454546, 'domain_classifier_drift_score': 0, 'domain_classifier_feature_importance': {'petal length (cm)': 1.0, 'sepal length (cm)': 0.0, 'sepal width (cm)': 0.0, 'petal width (cm)': 0.0}}



.. GENERATED FROM PYTHON SOURCE LINES 48-60

Export a Check's Output (CheckResult) to a JSON Format
======================================================
Serialization of the output to a JSON format is possible using the ``to_json`` function.
This function takes the check outputs and serializes it to a JSON string.

The format of the check's output json includes all info required to reconstruct
the check run and it's output: it's name, the parameters the check receives, one
sentence summary of the check's purpose, it's result value and a json of the data
relevant for displaying the check's outputs.

See Check JSON Structure
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 60-65

.. code-block:: default


    from deepchecks.core import CheckResult

    help(CheckResult.to_json)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Help on function to_json in module deepchecks.core.check_result:

    to_json(self, with_display: bool = True) -> str
        Return check result as json.
    
        Returned JSON string will have next structure:
    
        >>    class CheckResultMetadata(TypedDict):
        >>        check: CheckMetadata
        >>        value: Any
        >>        header: str
        >>        conditions_results: List[Dict[Any, Any]]
        >>        display: List[Dict[str, Any]]
    
        >>    class CheckMetadata(TypedDict):
        >>        type: str
        >>        name: str
        >>        params: Dict[Any, Any]
        >>        summary: str
    
        Parameters
        ----------
        with_display : bool
            controls if to serialize display or not
    
        Returns
        -------
        str





.. GENERATED FROM PYTHON SOURCE LINES 66-70

.. code-block:: default


    # get output JSON
    serialized_output = result.to_json()








.. GENERATED FROM PYTHON SOURCE LINES 71-77

.. code-block:: default


    import json

    # note - conditions_table key exists only if there are conditions that were defined on check
    json.loads(serialized_output).keys()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    dict_keys(['check', 'header', 'value', 'conditions_results', 'display'])



.. GENERATED FROM PYTHON SOURCE LINES 78-80

Observe JSON Output
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 80-83

.. code-block:: default


    json.loads(serialized_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    {'check': {'type': 'WholeDatasetDrift', 'name': 'Whole Dataset Drift', 'params': {'n_top_columns': 3, 'min_feature_importance': 0.05, 'max_num_categories_for_display': 10, 'show_categories_by': 'train_largest', 'sample_size': 10000, 'random_state': 42, 'test_size': 0.3, 'min_meaningful_drift_score': 0.05}, 'summary': '    Calculate drift between the entire train and test datasets using a model trained to distinguish between them. <a href="https://docs.deepchecks.com/stable/checks_gallery/tabular/distribution/plot_whole_dataset_drift.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link" target="_blank">Read More...</a>'}, 'header': 'Whole Dataset Drift', 'value': {'domain_classifier_auc': {'dtype': 'float64', 'value': 0.4545454545454546}, 'domain_classifier_drift_score': 0, 'domain_classifier_feature_importance': {'petal length (cm)': 1.0, 'sepal length (cm)': 0.0, 'sepal width (cm)': 0.0, 'petal width (cm)': 0.0}}, 'conditions_results': [{'Status': 'PASS', 'Condition': 'Drift value is not greater than 0.25', 'More Info': ''}], 'display': []}



.. GENERATED FROM PYTHON SOURCE LINES 84-88

Display the CheckResult Output from a JSON
------------------------------------------
The serialized JSON can be used to reproduce the run in other Python scopes,
by using the ``display_from_json`` function

.. GENERATED FROM PYTHON SOURCE LINES 88-91

.. code-block:: default


    CheckResult.display_from_json(serialized_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {'text/html': '\n<h1>Whole Dataset Drift</h1>\n<p>    Calculate drift between the entire train and test datasets using a model trained to distinguish between them. <a href="https://docs.deepchecks.com/stable/checks_gallery/tabular/distribution/plot_whole_dataset_drift.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link" target="_blank">Read More...</a></p>\n<h5><b>Conditions Summary</b></h5><style type="text/css">\n#T_29895 table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_29895 thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_29895 tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_29895 th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_29895 td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id="T_29895">\n  <thead>\n    <tr>\n      <th id="T_29895_level0_col0" class="col_heading level0 col0" >Status</th>\n      <th id="T_29895_level0_col1" class="col_heading level0 col1" >Condition</th>\n      <th id="T_29895_level0_col2" class="col_heading level0 col2" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id="T_29895_row0_col0" class="data row0 col0" >PASS</td>\n      <td id="T_29895_row0_col1" class="data row0 col1" >Drift value is not greater than 0.25</td>\n      <td id="T_29895_row0_col2" class="data row0 col2" ></td>\n    </tr>\n  </tbody>\n</table>\n\n<h5><b>Additional Outputs</b></h5><p>Nothing to show</p>\n'}




.. GENERATED FROM PYTHON SOURCE LINES 92-96

Exporting a Suite's Output (SuiteResult) to JSON
================================================
Run Suite and Save to JSON
--------------------------

.. GENERATED FROM PYTHON SOURCE LINES 96-101

.. code-block:: default


    from deepchecks.tabular.suites import full_suite

    suite = full_suite()








.. GENERATED FROM PYTHON SOURCE LINES 102-106

.. code-block:: default


    suite_result = suite.run(train_dataset=train_dataset, test_dataset=test_dataset, model=model)
    suite_json = suite_result.to_json()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Full Suite:   0%|                                    | 0/36 [00:00<?, ? Check/s]    Full Suite:   0%|                                    | 0/36 [00:00<?, ? Check/s, Check=Model Info]    Full Suite:   3%|#                                   | 1/36 [00:00<00:00, 38.56 Check/s, Check=Columns Info]    Full Suite:   6%|##                                  | 2/36 [00:00<00:01, 22.91 Check/s, Check=Confusion Matrix Report]    Full Suite:   8%|###                                 | 3/36 [00:00<00:02, 13.82 Check/s, Check=Confusion Matrix Report]    Full Suite:   8%|###                                 | 3/36 [00:00<00:02, 13.82 Check/s, Check=Performance Report]         Full Suite:  11%|####                                | 4/36 [00:00<00:02, 13.82 Check/s, Check=Roc Report]            Full Suite:  14%|#####                               | 5/36 [00:00<00:04,  7.04 Check/s, Check=Roc Report]    Full Suite:  14%|#####                               | 5/36 [00:00<00:04,  7.04 Check/s, Check=Simple Model Comparison]    Full Suite:  17%|######                              | 6/36 [00:00<00:04,  7.19 Check/s, Check=Simple Model Comparison]    Full Suite:  17%|######                              | 6/36 [00:00<00:04,  7.19 Check/s, Check=Model Error Analysis]       Full Suite:  19%|#######                             | 7/36 [00:01<00:05,  5.59 Check/s, Check=Model Error Analysis]    Full Suite:  19%|#######                             | 7/36 [00:01<00:05,  5.59 Check/s, Check=Calibration Score]       Full Suite:  22%|########                            | 8/36 [00:01<00:05,  5.59 Check/s, Check=Regression Systematic Error]    Full Suite:  25%|#########                           | 9/36 [00:01<00:04,  5.59 Check/s, Check=Regression Error Distribution]    Full Suite:  28%|##########                          | 10/36 [00:01<00:04,  5.59 Check/s, Check=Boosting Overfit]                Full Suite:  31%|###########                         | 11/36 [00:01<00:04,  5.59 Check/s, Check=Unused Features]     Full Suite:  33%|############                        | 12/36 [00:01<00:01, 13.04 Check/s, Check=Unused Features]    Full Suite:  33%|############                        | 12/36 [00:01<00:01, 13.04 Check/s, Check=Model Inference Time]    Full Suite:  36%|#############                       | 13/36 [00:01<00:01, 13.04 Check/s, Check=Train Test Feature Drift]    Full Suite:  39%|##############                      | 14/36 [00:01<00:01, 11.03 Check/s, Check=Train Test Feature Drift]    Full Suite:  39%|##############                      | 14/36 [00:01<00:01, 11.03 Check/s, Check=Train Test Label Drift]      Full Suite:  42%|###############                     | 15/36 [00:01<00:01, 11.03 Check/s, Check=Whole Dataset Drift]       Full Suite:  44%|################                    | 16/36 [00:01<00:01, 11.36 Check/s, Check=Whole Dataset Drift]    Full Suite:  44%|################                    | 16/36 [00:01<00:01, 11.36 Check/s, Check=Dominant Frequency Change]    Full Suite:  47%|#################                   | 17/36 [00:01<00:01, 11.36 Check/s, Check=Category Mismatch Train Test]    Full Suite:  50%|##################                  | 18/36 [00:01<00:01, 11.36 Check/s, Check=New Label Train Test]            Full Suite:  53%|###################                 | 19/36 [00:01<00:01, 11.36 Check/s, Check=String Mismatch Comparison]    Full Suite:  56%|####################                | 20/36 [00:01<00:01, 11.36 Check/s, Check=Datasets Size Comparison]      Full Suite:  58%|#####################               | 21/36 [00:01<00:01, 11.36 Check/s, Check=Date Train Test Leakage Duplicates]    Full Suite:  61%|######################              | 22/36 [00:01<00:01, 11.36 Check/s, Check=Date Train Test Leakage Overlap]       Full Suite:  64%|#######################             | 23/36 [00:01<00:01, 11.36 Check/s, Check=Single Feature Contribution Train Test]    Full Suite:  67%|########################            | 24/36 [00:01<00:00, 22.89 Check/s, Check=Single Feature Contribution Train Test]    Full Suite:  67%|########################            | 24/36 [00:01<00:00, 22.89 Check/s, Check=Train Test Samples Mix]                    Full Suite:  69%|#########################           | 25/36 [00:01<00:00, 22.89 Check/s, Check=Identifier Leakage]        Full Suite:  72%|##########################          | 26/36 [00:01<00:00, 22.89 Check/s, Check=Index Train Test Leakage]    Full Suite:  75%|###########################         | 27/36 [00:01<00:00, 22.89 Check/s, Check=Is Single Value]             Full Suite:  78%|############################        | 28/36 [00:01<00:00, 22.89 Check/s, Check=Mixed Nulls]        Full Suite:  81%|#############################       | 29/36 [00:01<00:00, 22.89 Check/s, Check=Mixed Data Types]    Full Suite:  83%|##############################      | 30/36 [00:01<00:00, 22.89 Check/s, Check=String Mismatch]     Full Suite:  86%|###############################     | 31/36 [00:01<00:00, 22.89 Check/s, Check=Data Duplicates]    Full Suite:  89%|################################    | 32/36 [00:01<00:00, 22.89 Check/s, Check=String Length Out Of Bounds]    Full Suite:  92%|#################################   | 33/36 [00:01<00:00, 22.89 Check/s, Check=Special Characters]             Full Suite:  94%|##################################  | 34/36 [00:01<00:00, 22.89 Check/s, Check=Conflicting Labels]    Full Suite:  97%|################################### | 35/36 [00:01<00:00, 22.89 Check/s, Check=Outlier Sample Detection]    Full Suite: 100%|####################################| 36/36 [00:02<00:00, 26.51 Check/s, Check=Outlier Sample Detection]                                                                                                                         



.. GENERATED FROM PYTHON SOURCE LINES 107-109

Observe Suite's JSON Strucutre
------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 109-114

.. code-block:: default


    from deepchecks.core import SuiteResult

    help(SuiteResult.to_json)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Help on function to_json in module deepchecks.core.suite:

    to_json(self, with_display: bool = True)
        Return check result as json.
    
        Parameters
        ----------
        with_display : bool
            controls if to serialize display of checks or not
    
        Returns
        -------
        str





.. GENERATED FROM PYTHON SOURCE LINES 115-116

Suite name:

.. GENERATED FROM PYTHON SOURCE LINES 116-119

.. code-block:: default


    json.loads(suite_json)['name']





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    'Full Suite'



.. GENERATED FROM PYTHON SOURCE LINES 120-121

Results is an array of CheckResult JSON's, let's see how many checks ran in suite:

.. GENERATED FROM PYTHON SOURCE LINES 121-124

.. code-block:: default


    len(json.loads(suite_json)['results'])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    53



.. GENERATED FROM PYTHON SOURCE LINES 125-128

Lets observe a specific check's output, which is similar to the `Check output's
JSON Structure <#export-a-check-s-output-checkresult-to-a-json-format>`__ we saw
before for each check

.. GENERATED FROM PYTHON SOURCE LINES 128-130

.. code-block:: default


    json.loads(suite_json)['results'][0]




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    {'check': {'type': 'ModelInfo', 'name': 'Model Info', 'params': {}, 'summary': 'Summarize given model parameters. <a href="https://docs.deepchecks.com/stable/checks_gallery/tabular/overview/plot_model_info.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link" target="_blank">Read More...</a>'}, 'header': 'Model Info', 'value': {'type': 'RandomForestClassifier', 'params': {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'auto', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_jobs': None, 'oob_score': False, 'random_state': None, 'verbose': 0, 'warm_start': False}}, 'conditions_results': [], 'display': [{'type': 'html', 'payload': 'Model Type: RandomForestClassifier'}, {'type': 'dataframe', 'payload': [{'Parameter': 'bootstrap', 'Value': True, 'Default': True}, {'Parameter': 'ccp_alpha', 'Value': 0.0, 'Default': 0.0}, {'Parameter': 'class_weight', 'Value': None, 'Default': None}, {'Parameter': 'criterion', 'Value': 'gini', 'Default': 'gini'}, {'Parameter': 'max_depth', 'Value': None, 'Default': None}, {'Parameter': 'max_features', 'Value': 'auto', 'Default': 'auto'}, {'Parameter': 'max_leaf_nodes', 'Value': None, 'Default': None}, {'Parameter': 'max_samples', 'Value': None, 'Default': None}, {'Parameter': 'min_impurity_decrease', 'Value': 0.0, 'Default': 0.0}, {'Parameter': 'min_samples_leaf', 'Value': 1, 'Default': 1}, {'Parameter': 'min_samples_split', 'Value': 2, 'Default': 2}, {'Parameter': 'min_weight_fraction_leaf', 'Value': 0.0, 'Default': 0.0}, {'Parameter': 'n_estimators', 'Value': 100, 'Default': 100}, {'Parameter': 'n_jobs', 'Value': None, 'Default': None}, {'Parameter': 'oob_score', 'Value': False, 'Default': False}, {'Parameter': 'random_state', 'Value': None, 'Default': None}, {'Parameter': 'verbose', 'Value': 0, 'Default': 0}, {'Parameter': 'warm_start', 'Value': False, 'Default': False}]}, {'type': 'html', 'payload': '<p style="font-size:0.7em"><i>Colored rows are parameters with non-default values</i></p>'}]}




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.349 seconds)


.. _sphx_glr_download_user-guide_general_exporting_results_examples_plot_export_outputs_to_json.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_export_outputs_to_json.py <plot_export_outputs_to_json.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_export_outputs_to_json.ipynb <plot_export_outputs_to_json.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
