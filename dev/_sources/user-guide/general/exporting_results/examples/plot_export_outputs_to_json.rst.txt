
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "user-guide/general/exporting_results/examples/plot_export_outputs_to_json.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_user-guide_general_exporting_results_examples_plot_export_outputs_to_json.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_user-guide_general_exporting_results_examples_plot_export_outputs_to_json.py:


Export Outputs to JSON
**********************
In this guide, we will demonstrate how to export the Check's and the Suite's output to JSON format.

This enables to use the exported results as a serializeable object that can later be
shared or reviewed in other Python scopes, and also enables working with the check's
output (name, parameters, result value and result display) not only in a visual manner
(e.g. by parsing the output JSON).

**Structure:**

* `Load Data <#load-data>`__
* `Run a Check <#run-a-check>`__
* `Export Check to JSON <#export-a-check-s-output-checkresult-to-a-json-format>`__
* `Export Suite to JSON <#exporting-a-suite-s-output-suiteresult-to-json>`__

.. GENERATED FROM PYTHON SOURCE LINES 21-23

Load Data
=========

.. GENERATED FROM PYTHON SOURCE LINES 23-29

.. code-block:: default


    from deepchecks.tabular.datasets.classification import iris

    train_dataset, test_dataset = iris.load_data()
    model = iris.load_fitted_model()








.. GENERATED FROM PYTHON SOURCE LINES 30-32

Run a Check
===========

.. GENERATED FROM PYTHON SOURCE LINES 32-38

.. code-block:: default


    from deepchecks.tabular.checks import WholeDatasetDrift

    result = WholeDatasetDrift().add_condition_overall_drift_value_not_greater_than(
    ).run(train_dataset, test_dataset, model)








.. GENERATED FROM PYTHON SOURCE LINES 39-40

Observe CheckResult Display and Value

.. GENERATED FROM PYTHON SOURCE LINES 40-43

.. code-block:: default


    result






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>IPyWidget export</title>
    </head>
    <body>

    <script src="https://unpkg.com/@jupyter-widgets/html-manager@^0.20.1/dist/embed.js" crossorigin="anonymous"></script>
    <script type="application/vnd.jupyter.widget-state+json">
    {
      "version_major": 2,
      "version_minor": 0,
      "state": {
        "9ea844fc0552456086c75287460f7902": {
          "model_name": "VBoxModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "children": [
              "IPY_MODEL_d2720c41b9784198aa67a9accebd92ce"
            ],
            "layout": "IPY_MODEL_3d70b53453fb434a8d96c868037b5974"
          }
        },
        "d2720c41b9784198aa67a9accebd92ce": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_df128706e9df4ea2914322fae120aada",
            "style": "IPY_MODEL_d2b6bad4415a429eac68c019a406a1ae",
            "value": "<h4>Whole Dataset Drift</h4><p>    Calculate drift between the entire train and test datasets using a model trained to distinguish between them. <a href=\"https://docs.deepchecks.com/0.6.0.dev1/examples/checks/distribution/whole_dataset_drift.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p><h5>Conditions Summary</h5><style type=\"text/css\">\n#T_6c3f2 table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_6c3f2 thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_6c3f2 tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_6c3f2 th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_6c3f2 td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_6c3f2\">\n  <thead>\n    <tr>\n      <th id=\"T_6c3f2_level0_col0\" class=\"col_heading level0 col0\" >Status</th>\n      <th id=\"T_6c3f2_level0_col1\" class=\"col_heading level0 col1\" >Condition</th>\n      <th id=\"T_6c3f2_level0_col2\" class=\"col_heading level0 col2\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_6c3f2_row0_col0\" class=\"data row0 col0\" ><div style=\"color: green;text-align: center\">\u2713</div></td>\n      <td id=\"T_6c3f2_row0_col1\" class=\"data row0 col1\" >Drift value is not greater than 0.25</td>\n      <td id=\"T_6c3f2_row0_col2\" class=\"data row0 col2\" ></td>\n    </tr>\n  </tbody>\n</table>\n<h5>Additional Outputs</h5><p><b>&#x2713;</b> Nothing found</p>"
          }
        },
        "df128706e9df4ea2914322fae120aada": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "d2b6bad4415a429eac68c019a406a1ae": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "3d70b53453fb434a8d96c868037b5974": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        }
      }
    }
    </script>
    <script type="application/vnd.jupyter.widget-view+json">
    {"version_major": 2, "version_minor": 0, "model_id": "9ea844fc0552456086c75287460f7902"}
    </script>

    </body>
    </html>

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 44-46

.. code-block:: default

    result.value





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    {'domain_classifier_auc': 0.4545454545454546, 'domain_classifier_drift_score': 0, 'domain_classifier_feature_importance': {'petal length (cm)': 1.0, 'sepal length (cm)': 0.0, 'sepal width (cm)': 0.0, 'petal width (cm)': 0.0}}



.. GENERATED FROM PYTHON SOURCE LINES 47-59

Export a Check's Output (CheckResult) to a JSON Format
======================================================
Serialization of the output to a JSON format is possible using the ``to_json`` function.
This function takes the check outputs and serializes it to a JSON string.

The format of the check's output json includes all info required to reconstruct
the check run and it's output: it's name, the parameters the check receives, one
sentence summary of the check's purpose, it's result value and a json of the data
relevant for displaying the check's outputs.

See Check JSON Structure
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 59-64

.. code-block:: default


    from deepchecks.core import CheckResult

    help(CheckResult.to_json)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Help on function to_json in module deepchecks.core.check_result:

    to_json(self, with_display: bool = True) -> str
        Return check result as json.
    
        Parameters
        ----------
        with_display : bool
            controls if to serialize display or not
    
        Returns
        -------
        str
            {'name': .., 'params': .., 'header': ..,
             'summary': .., 'conditions_table': .., 'value', 'display': ..}





.. GENERATED FROM PYTHON SOURCE LINES 65-69

.. code-block:: default


    # get output JSON
    serialized_output = result.to_json()








.. GENERATED FROM PYTHON SOURCE LINES 70-76

.. code-block:: default


    import json

    # note - conditions_table key exists only if there are conditions that were defined on check
    json.loads(serialized_output).keys()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    dict_keys(['name', 'params', 'header', 'summary', 'conditions_table', 'value', 'display'])



.. GENERATED FROM PYTHON SOURCE LINES 77-79

Observe JSON Output
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 79-82

.. code-block:: default


    json.loads(serialized_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    {'name': 'Whole Dataset Drift', 'params': {'n_top_columns': 3, 'min_feature_importance': 0.05, 'max_num_categories': 10, 'sample_size': 10000, 'random_state': 42, 'test_size': 0.3, 'min_meaningful_drift_score': 0.05}, 'header': 'Whole Dataset Drift', 'summary': '    Calculate drift between the entire train and test datasets using a model trained to distinguish between them.', 'conditions_table': '[{"Status":"PASS","Condition":"Drift value is not greater than 0.25","More Info":""}]', 'value': {'domain_classifier_auc': {'py/object': 'numpy.float64', 'dtype': 'float64', 'value': 0.4545454545454546}, 'domain_classifier_drift_score': 0, 'domain_classifier_feature_importance': {'petal length (cm)': 1.0, 'sepal length (cm)': 0.0, 'sepal width (cm)': 0.0, 'petal width (cm)': 0.0}}, 'display': []}



.. GENERATED FROM PYTHON SOURCE LINES 83-87

Display the CheckResult Output from a JSON
------------------------------------------
The serialized JSON can be used to reproduce the run in other Python scopes,
by using the ``display_from_json`` function

.. GENERATED FROM PYTHON SOURCE LINES 87-90

.. code-block:: default


    CheckResult.display_from_json(serialized_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {'text/html': '<h4>Whole Dataset Drift</h4>'}
    {'text/html': '<p>    Calculate drift between the entire train and test datasets using a model trained to distinguish between them.</p>'}
    {'text/html': '<h5>Conditions Summary</h5>'}
    {'text/html': '<style type="text/css">\n#T_ac857 table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_ac857 thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_ac857 tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_ac857 th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_ac857 td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id="T_ac857">\n  <thead>\n    <tr>\n      <th id="T_ac857_level0_col0" class="col_heading level0 col0" >Status</th>\n      <th id="T_ac857_level0_col1" class="col_heading level0 col1" >Condition</th>\n      <th id="T_ac857_level0_col2" class="col_heading level0 col2" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id="T_ac857_row0_col0" class="data row0 col0" >PASS</td>\n      <td id="T_ac857_row0_col1" class="data row0 col1" >Drift value is not greater than 0.25</td>\n      <td id="T_ac857_row0_col2" class="data row0 col2" ></td>\n    </tr>\n  </tbody>\n</table>\n'}
    {'text/html': '<h5>Additional Outputs</h5>'}




.. GENERATED FROM PYTHON SOURCE LINES 91-95

Exporting a Suite's Output (SuiteResult) to JSON
================================================
Run Suite and Save to JSON
--------------------------

.. GENERATED FROM PYTHON SOURCE LINES 95-100

.. code-block:: default


    from deepchecks.tabular.suites import full_suite

    suite = full_suite()








.. GENERATED FROM PYTHON SOURCE LINES 101-105

.. code-block:: default


    suite_result = suite.run(train_dataset=train_dataset, test_dataset=test_dataset, model=model)
    suite_json = suite_result.to_json()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Full Suite:   0%|                                    | 0/36 [00:00<?, ? Check/s]    Full Suite:   0%|                                    | 0/36 [00:00<?, ? Check/s, Check=Model Info]    Full Suite:   3%|#                                   | 1/36 [00:00<00:00, 68.32 Check/s, Check=Columns Info]    Full Suite:   6%|##                                  | 2/36 [00:00<00:00, 42.12 Check/s, Check=Confusion Matrix Report]    Full Suite:   8%|###                                 | 3/36 [00:00<00:01, 22.97 Check/s, Check=Confusion Matrix Report]    Full Suite:   8%|###                                 | 3/36 [00:00<00:01, 22.97 Check/s, Check=Performance Report]         Full Suite:  11%|####                                | 4/36 [00:00<00:01, 22.97 Check/s, Check=Roc Report]            Full Suite:  14%|#####                               | 5/36 [00:00<00:01, 22.97 Check/s, Check=Simple Model Comparison]    Full Suite:  17%|######                              | 6/36 [00:00<00:02, 12.31 Check/s, Check=Simple Model Comparison]    Full Suite:  17%|######                              | 6/36 [00:00<00:02, 12.31 Check/s, Check=Model Error Analysis]       Full Suite:  19%|#######                             | 7/36 [00:00<00:02, 12.31 Check/s, Check=Calibration Score]       Full Suite:  22%|########                            | 8/36 [00:00<00:02, 11.32 Check/s, Check=Calibration Score]    Full Suite:  22%|########                            | 8/36 [00:00<00:02, 11.32 Check/s, Check=Trust Score Comparison]    Full Suite:  25%|#########                           | 9/36 [00:00<00:02, 11.32 Check/s, Check=Regression Systematic Error]    Full Suite:  28%|##########                          | 10/36 [00:00<00:02, 11.32 Check/s, Check=Regression Error Distribution]    Full Suite:  31%|###########                         | 11/36 [00:00<00:02, 11.32 Check/s, Check=Boosting Overfit]                 Full Suite:  33%|############                        | 12/36 [00:00<00:02, 11.32 Check/s, Check=Unused Features]     Full Suite:  36%|#############                       | 13/36 [00:00<00:02, 11.32 Check/s, Check=Model Inference Time]    Full Suite:  39%|##############                      | 14/36 [00:00<00:01, 11.32 Check/s, Check=Train Test Feature Drift]    Full Suite:  42%|###############                     | 15/36 [00:00<00:01, 19.73 Check/s, Check=Train Test Feature Drift]    Full Suite:  42%|###############                     | 15/36 [00:00<00:01, 19.73 Check/s, Check=Train Test Label Drift]      Full Suite:  44%|################                    | 16/36 [00:00<00:01, 19.73 Check/s, Check=Whole Dataset Drift]       Full Suite:  47%|#################                   | 17/36 [00:00<00:00, 19.73 Check/s, Check=Dominant Frequency Change]    Full Suite:  50%|##################                  | 18/36 [00:00<00:00, 21.36 Check/s, Check=Dominant Frequency Change]    Full Suite:  50%|##################                  | 18/36 [00:00<00:00, 21.36 Check/s, Check=Category Mismatch Train Test]    Full Suite:  53%|###################                 | 19/36 [00:00<00:00, 21.36 Check/s, Check=New Label Train Test]            Full Suite:  56%|####################                | 20/36 [00:00<00:00, 21.36 Check/s, Check=String Mismatch Comparison]    Full Suite:  58%|#####################               | 21/36 [00:00<00:00, 21.36 Check/s, Check=Datasets Size Comparison]      Full Suite:  61%|######################              | 22/36 [00:00<00:00, 21.36 Check/s, Check=Date Train Test Leakage Duplicates]    Full Suite:  64%|#######################             | 23/36 [00:00<00:00, 21.36 Check/s, Check=Date Train Test Leakage Overlap]       Full Suite:  67%|########################            | 24/36 [00:00<00:00, 21.36 Check/s, Check=Single Feature Contribution Train Test]    Full Suite:  69%|#########################           | 25/36 [00:01<00:00, 21.36 Check/s, Check=Train Test Samples Mix]                    Full Suite:  72%|##########################          | 26/36 [00:01<00:00, 21.36 Check/s, Check=Identifier Leakage]        Full Suite:  75%|###########################         | 27/36 [00:01<00:00, 21.36 Check/s, Check=Index Train Test Leakage]    Full Suite:  78%|############################        | 28/36 [00:01<00:00, 21.36 Check/s, Check=Is Single Value]             Full Suite:  81%|#############################       | 29/36 [00:01<00:00, 21.36 Check/s, Check=Mixed Nulls]        Full Suite:  83%|##############################      | 30/36 [00:01<00:00, 21.36 Check/s, Check=Mixed Data Types]    Full Suite:  86%|###############################     | 31/36 [00:01<00:00, 21.36 Check/s, Check=String Mismatch]     Full Suite:  89%|################################    | 32/36 [00:01<00:00, 21.36 Check/s, Check=Data Duplicates]    Full Suite:  92%|#################################   | 33/36 [00:01<00:00, 21.36 Check/s, Check=String Length Out Of Bounds]    Full Suite:  94%|##################################  | 34/36 [00:01<00:00, 21.36 Check/s, Check=Special Characters]             Full Suite:  97%|################################### | 35/36 [00:01<00:00, 54.17 Check/s, Check=Special Characters]    Full Suite:  97%|################################### | 35/36 [00:01<00:00, 54.17 Check/s, Check=Label Ambiguity]                                                                                                                   



.. GENERATED FROM PYTHON SOURCE LINES 106-108

Observe Suite's JSON Strucutre
------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 108-113

.. code-block:: default


    from deepchecks.core import SuiteResult

    help(SuiteResult.to_json)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Help on function to_json in module deepchecks.core.suite:

    to_json(self, with_display: bool = True)
        Return check result as json.
    
        Parameters
        ----------
        with_display : bool
            controls if to serialize display of checks or not
    
        Returns
        -------
        dict
            {'name': .., 'results': ..}





.. GENERATED FROM PYTHON SOURCE LINES 114-115

Suite name:

.. GENERATED FROM PYTHON SOURCE LINES 115-118

.. code-block:: default


    json.loads(suite_json)['name']





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    'Full Suite'



.. GENERATED FROM PYTHON SOURCE LINES 119-120

Results is an array of CheckResult JSON's, let's see how many checks ran in suite:

.. GENERATED FROM PYTHON SOURCE LINES 120-123

.. code-block:: default


    len(json.loads(suite_json)['results'])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    52



.. GENERATED FROM PYTHON SOURCE LINES 124-127

Lets observe a specific check's output, which is similar to the `Check output's
JSON Structure <#export-a-check-s-output-checkresult-to-a-json-format>`__ we saw
before for each check

.. GENERATED FROM PYTHON SOURCE LINES 127-129

.. code-block:: default


    json.loads(json.loads(suite_json)['results'][0])




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    {'name': 'Model Info', 'params': {}, 'header': 'Model Info', 'summary': 'Summarize given model parameters.', 'value': {'type': 'RandomForestClassifier', 'params': {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'auto', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_jobs': None, 'oob_score': False, 'random_state': None, 'verbose': 0, 'warm_start': False}}, 'display': [{'py/tuple': ['html', 'Model Type: RandomForestClassifier']}, {'py/tuple': ['dataframe', '[{"Parameter":"bootstrap","Value":true,"Default":true},{"Parameter":"ccp_alpha","Value":0.0,"Default":0.0},{"Parameter":"class_weight","Value":null,"Default":null},{"Parameter":"criterion","Value":"gini","Default":"gini"},{"Parameter":"max_depth","Value":null,"Default":null},{"Parameter":"max_features","Value":"auto","Default":"auto"},{"Parameter":"max_leaf_nodes","Value":null,"Default":null},{"Parameter":"max_samples","Value":null,"Default":null},{"Parameter":"min_impurity_decrease","Value":0.0,"Default":0.0},{"Parameter":"min_samples_leaf","Value":1,"Default":1},{"Parameter":"min_samples_split","Value":2,"Default":2},{"Parameter":"min_weight_fraction_leaf","Value":0.0,"Default":0.0},{"Parameter":"n_estimators","Value":100,"Default":100},{"Parameter":"n_jobs","Value":null,"Default":null},{"Parameter":"oob_score","Value":false,"Default":false},{"Parameter":"random_state","Value":null,"Default":null},{"Parameter":"verbose","Value":0,"Default":0},{"Parameter":"warm_start","Value":false,"Default":false}]']}, {'py/tuple': ['html', '<p style="font-size:0.7em"><i>Colored rows are parameters with non-default values</i></p>']}]}




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.002 seconds)


.. _sphx_glr_download_user-guide_general_exporting_results_examples_plot_export_outputs_to_json.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_export_outputs_to_json.py <plot_export_outputs_to_json.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_export_outputs_to_json.ipynb <plot_export_outputs_to_json.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
