
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "user-guide/general/customizations/examples/plot_configure_check_conditions.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_user-guide_general_customizations_examples_plot_configure_check_conditions.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_user-guide_general_customizations_examples_plot_configure_check_conditions.py:


Configure Check Conditions
**************************

The following guide includes different options for configuring a check's condition(s):

* `Add Condition <#add-condition>`__
* `Remove / Edit a Condition <#remove-edit-a-condition>`__
* `Add a Custom Condition <#add-a-custom-condition>`__
* `Set Custom Condition Category <#set-custom-condition-category>`__

Add Condition
=============
In order to add a condition to an existing check, we can use any of the pre-defined
conditions for that check. The naming convention for the methods that add the
condition is ``add_condition_...``.

If you want to create and add your custom condition logic for parsing the check's
result value, see `Add a Custom Condition <#add-a-custom-condition>`__.

.. GENERATED FROM PYTHON SOURCE LINES 24-26

Add a condition to a new check
------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 26-32

.. code-block:: default


    from deepchecks.tabular.checks import DatasetsSizeComparison

    check = DatasetsSizeComparison().add_condition_test_size_not_smaller_than(1000)
    check





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    DatasetsSizeComparison
    	Conditions:
    		0: Test dataset size is not smaller than 1000



.. GENERATED FROM PYTHON SOURCE LINES 33-37

Conditions are used mainly in the context of a Suite, and displayed in the
Conditions Summary table. For example how to run in a suite you can look at
`Add a Custom Condition <#add-a-custom-condition>`__ or if you would like to
run the conditions outside of suite you can execute:

.. GENERATED FROM PYTHON SOURCE LINES 37-47

.. code-block:: default


    from deepchecks.tabular import Dataset
    import pandas as pd
    # Dummy data
    train_dataset = Dataset(pd.DataFrame(data={'x': [1,2,3,4,5,6,7,8,9]}))
    test_dataset = Dataset(pd.DataFrame(data={'x': [1,2,3]}))

    condition_results = check.conditions_decision(check.run(train_dataset, test_dataset))
    condition_results





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [{'details': 'Test dataset size is 3', 'category': <ConditionCategory.FAIL: 'FAIL'>, 'name': 'Test dataset size is not smaller than 1000'}]



.. GENERATED FROM PYTHON SOURCE LINES 48-58

Add a condition to a check in a suite
-------------------------------------
If we want to add a conditon to a check within an existing suite, we should first
find the Check's ID within the suite, and then add the condition to it, by running
the relevant ``add_condition_`` method on that check's instance. See the next section
to understand how to do so.

The condition will then be appended to the list of conditions on that check (or be
the first one if no conditions are defined), and each condition will be evaluated
separately when running the suite.

.. GENERATED FROM PYTHON SOURCE LINES 60-68

Remove / Edit a Condition
=========================
Deepchecks provides different kinds of default suites, which come with pre-defined
conditions. You may want to remove a condition in case it isn't needed for you, or
you may want to change the condition's parameters (since conditions functions are immutable).

To remove a condition, start by printing the Suite and identifing the Check's ID,
and the Condition's ID:

.. GENERATED FROM PYTHON SOURCE LINES 68-74

.. code-block:: default


    from deepchecks.tabular.suites import train_test_leakage

    suite = train_test_leakage()
    suite





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Train Test Leakage Suite: [
    	0: DateTrainTestLeakageDuplicates
    		Conditions:
    			0: Date leakage ratio is not greater than 0%
    	1: DateTrainTestLeakageOverlap
    		Conditions:
    			0: Date leakage ratio is not greater than 0%
    	2: SingleFeatureContributionTrainTest(ppscore_params={})
    		Conditions:
    			0: Train-Test features' Predictive Power Score difference is not greater than 0.2
    			1: Train features' Predictive Power Score is not greater than 0.7
    	3: TrainTestSamplesMix
    		Conditions:
    			0: Percentage of test data samples that appear in train data not greater than 10%
    	4: IdentifierLeakage(ppscore_params={})
    		Conditions:
    			0: Identifier columns PPS is not greater than 0
    	5: IndexTrainTestLeakage
    		Conditions:
    			0: Ratio of leaking indices is not greater than 0%
    ]



.. GENERATED FROM PYTHON SOURCE LINES 75-76

After we found the IDs we can remove the Condition:

.. GENERATED FROM PYTHON SOURCE LINES 76-84

.. code-block:: default


    # Access check by id
    check = suite[2]
    # Remove condition by id
    check.remove_condition(0)

    suite





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Train Test Leakage Suite: [
    	0: DateTrainTestLeakageDuplicates
    		Conditions:
    			0: Date leakage ratio is not greater than 0%
    	1: DateTrainTestLeakageOverlap
    		Conditions:
    			0: Date leakage ratio is not greater than 0%
    	2: SingleFeatureContributionTrainTest(ppscore_params={})
    		Conditions:
    			1: Train features' Predictive Power Score is not greater than 0.7
    	3: TrainTestSamplesMix
    		Conditions:
    			0: Percentage of test data samples that appear in train data not greater than 10%
    	4: IdentifierLeakage(ppscore_params={})
    		Conditions:
    			0: Identifier columns PPS is not greater than 0
    	5: IndexTrainTestLeakage
    		Conditions:
    			0: Ratio of leaking indices is not greater than 0%
    ]



.. GENERATED FROM PYTHON SOURCE LINES 85-87

Now if we want we can also re-add the Condition using the built-in methods on the check,
with a different parameter.

.. GENERATED FROM PYTHON SOURCE LINES 87-93

.. code-block:: default


    # Re-add the condition with new parameter
    check.add_condition_feature_pps_difference_not_greater_than(0.01)

    suite





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Train Test Leakage Suite: [
    	0: DateTrainTestLeakageDuplicates
    		Conditions:
    			0: Date leakage ratio is not greater than 0%
    	1: DateTrainTestLeakageOverlap
    		Conditions:
    			0: Date leakage ratio is not greater than 0%
    	2: SingleFeatureContributionTrainTest(ppscore_params={})
    		Conditions:
    			1: Train features' Predictive Power Score is not greater than 0.7
    			2: Train-Test features' Predictive Power Score difference is not greater than 0.01
    	3: TrainTestSamplesMix
    		Conditions:
    			0: Percentage of test data samples that appear in train data not greater than 10%
    	4: IdentifierLeakage(ppscore_params={})
    		Conditions:
    			0: Identifier columns PPS is not greater than 0
    	5: IndexTrainTestLeakage
    		Conditions:
    			0: Ratio of leaking indices is not greater than 0%
    ]



.. GENERATED FROM PYTHON SOURCE LINES 94-100

Add a Custom Condition
======================
In order to write conditions we first have to know what value a given check produces.

Let's look at the check ``DatasetsSizeComparison`` and see it's return value in
order to write a condition for it.

.. GENERATED FROM PYTHON SOURCE LINES 100-112

.. code-block:: default


    from deepchecks.tabular.checks import DatasetsSizeComparison
    from deepchecks.tabular import Dataset
    import pandas as pd

    # We'll use dummy data for the purpose of this demonstration
    train_dataset = Dataset(pd.DataFrame(data={'x': [1,2,3,4,5,6,7,8,9]}))
    test_dataset = Dataset(pd.DataFrame(data={'x': [1,2,3]}))

    result = DatasetsSizeComparison().run(train_dataset, test_dataset)
    result.value





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    {'Train': 9, 'Test': 3}



.. GENERATED FROM PYTHON SOURCE LINES 113-123

Now we know what the return value looks like. Let's add a new condition that validates
that the ratio between the train and test datasets size is inside a given range. To
create condition we need to use the ``add_condition`` method of the check which accepts
a condition name and a function. This function receives the value of the ``CheckResult``
that we saw above and should return either a boolean or a ``ConditionResult`` containing
a boolean and optional extra info that will be displayed in the Conditions Summary table.

*Note: When implementing a condition in a custom check, you may want to add a method
``add_condition_x()`` to allow any consumer of your check to apply the condition
(possibly with given parameters). For examples look at implemented Checks' source code*

.. GENERATED FROM PYTHON SOURCE LINES 123-145

.. code-block:: default


    from deepchecks.core import ConditionResult

    # Our parameters for the condition
    low_threshold = 0.4
    high_threshold = 0.6

    # Create the condition function
    def custom_condition(value: dict, low=low_threshold, high=high_threshold): 
        ratio = value['Test'] / value['Train']
        if low <= ratio <= high:
            return ConditionResult(ConditionCategory.PASS)
        else:
            # Note: if you doesn't care about the extra info, you can return directly a boolean
            return ConditionResult(ConditionCategory.FAIL, f'Test-Train ratio is {ratio:.2}')

    # Create the condition name
    condition_name = f'Test-Train ratio is between {low_threshold} to {high_threshold}'

    # Create check instance with the condition 
    check = DatasetsSizeComparison().add_condition(condition_name, custom_condition)








.. GENERATED FROM PYTHON SOURCE LINES 146-149

Now we will use a Suite to demonstrate the action of the condition, since the suite
runs the condition for us automatically and prints out a Conditions Summary table
(for all the conditions defined on the checks within the suite):

.. GENERATED FROM PYTHON SOURCE LINES 149-159

.. code-block:: default


    from deepchecks import Suite

    # Using suite to run check & condition
    suite = Suite('Suite for Condition',
        check
    )

    suite.run(train_dataset, test_dataset)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Ability to import base tabular functionality from the `deepchecks` package directly is deprecated, please import from `deepchecks.tabular` instead
    Suite for Condition:   0%| | 0/1 [00:00<?, ? Check/s]    Suite for Condition:   0%| | 0/1 [00:00<?, ? Check/s, Check=Datasets Size Comparison]                                                                                     

.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <!--
        ~ ----------------------------------------------------------------------------
        ~ Copyright (C) 2021-2022 Deepchecks (https://www.deepchecks.com)
        ~
        ~ This file is part of Deepchecks.
        ~ Deepchecks is distributed under the terms of the GNU Affero General
        ~ Public License (version 3 or later).
        ~ You should have received a copy of the GNU Affero General Public License
        ~ along with Deepchecks.  If not, see <http://www.gnu.org/licenses/>.
        ~ ----------------------------------------------------------------------------
        ~
    -->
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Suite Output</title>
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
                font-size: 1rem;
                line-height: 1.5;
                color: #212529;
                text-align: left;
                max-width: 1200px;
                margin: auto;
            }

            div.nbinput.container div.prompt *,
            div.nboutput.container div.prompt *,
            div.nbinput.container div.input_area pre,
            div.nboutput.container div.output_area pre,
            div.nbinput.container div.input_area .highlight,
            div.nboutput.container div.output_area .highlight {
                border: none;
                padding: 0;
                margin: 0;
                box-shadow: none;
            }

            div.nbinput.container > div[class*=highlight],
            div.nboutput.container > div[class*=highlight] {
                margin: 0;
            }

            div.nbinput.container div.prompt *,
            div.nboutput.container div.prompt * {
                background: none;
            }

            div.nboutput.container div.output_area .highlight,
            div.nboutput.container div.output_area pre {
                background: unset;
            }

            div.nboutput.container div.output_area div.highlight {
                color: unset;  /* override Pygments text color */
            }

            /* avoid gaps between output lines */
            div.nboutput.container div[class*=highlight] pre {
                line-height: normal;
            }

            /* input/output containers */
            div.nbinput.container,
            div.nboutput.container {
                display: -webkit-flex;
                display: flex;
                align-items: flex-start;
                margin: 0;
                width: 100%;
            }
            @media (max-width: 540px) {
                div.nbinput.container,
                div.nboutput.container {
                    flex-direction: column;
                }
            }

            /* input container */
            div.nbinput.container {
                padding-top: 5px;
            }

            /* last container */
            div.nblast.container {
                padding-bottom: 5px;
            }

            /* input prompt */
            div.nbinput.container div.prompt pre {
                color: #307FC1;
            }

            /* output prompt */
            div.nboutput.container div.prompt pre {
                color: #BF5B3D;
            }

            /* all prompts */
            div.nbinput.container div.prompt,
            div.nboutput.container div.prompt {
                width: 4.5ex;
                padding-top: 5px;
                position: relative;
                user-select: none;
            }

            div.nbinput.container div.prompt > div,
            div.nboutput.container div.prompt > div {
                position: absolute;
                right: 0;
                margin-right: 0.3ex;
            }

            @media (max-width: 540px) {
                div.nbinput.container div.prompt,
                div.nboutput.container div.prompt {
                    width: unset;
                    text-align: left;
                    padding: 0.4em;
                }
                div.nboutput.container div.prompt.empty {
                    padding: 0;
                }

                div.nbinput.container div.prompt > div,
                div.nboutput.container div.prompt > div {
                    position: unset;
                }
            }

            /* disable scrollbars on prompts */
            div.nbinput.container div.prompt pre,
            div.nboutput.container div.prompt pre {
                overflow: hidden;
            }

            /* input/output area */
            div.nbinput.container div.input_area,
            div.nboutput.container div.output_area {
                -webkit-flex: 1;
                flex: 1;
                overflow: auto;
            }
            @media (max-width: 540px) {
                div.nbinput.container div.input_area,
                div.nboutput.container div.output_area {
                    width: 100%;
                }
            }

            /* input area */
            div.nbinput.container div.input_area {
                border: 1px solid #e0e0e0;
                border-radius: 2px;
                /*background: #f5f5f5;*/
            }

            /* override MathJax center alignment in output cells */
            div.nboutput.container div[class*=MathJax] {
                text-align: left !important;
            }

            /* override sphinx.ext.imgmath center alignment in output cells */
            div.nboutput.container div.math p {
                text-align: left;
            }

            /* standard error */
            div.nboutput.container div.output_area.stderr {
                background: #fdd;
            }

            /* ANSI colors */
            .ansi-black-fg { color: #3E424D; }
            .ansi-black-bg { background-color: #3E424D; }
            .ansi-black-intense-fg { color: #282C36; }
            .ansi-black-intense-bg { background-color: #282C36; }
            .ansi-red-fg { color: #E75C58; }
            .ansi-red-bg { background-color: #E75C58; }
            .ansi-red-intense-fg { color: #B22B31; }
            .ansi-red-intense-bg { background-color: #B22B31; }
            .ansi-green-fg { color: #00A250; }
            .ansi-green-bg { background-color: #00A250; }
            .ansi-green-intense-fg { color: #007427; }
            .ansi-green-intense-bg { background-color: #007427; }
            .ansi-yellow-fg { color: #DDB62B; }
            .ansi-yellow-bg { background-color: #DDB62B; }
            .ansi-yellow-intense-fg { color: #B27D12; }
            .ansi-yellow-intense-bg { background-color: #B27D12; }
            .ansi-blue-fg { color: #208FFB; }
            .ansi-blue-bg { background-color: #208FFB; }
            .ansi-blue-intense-fg { color: #0065CA; }
            .ansi-blue-intense-bg { background-color: #0065CA; }
            .ansi-magenta-fg { color: #D160C4; }
            .ansi-magenta-bg { background-color: #D160C4; }
            .ansi-magenta-intense-fg { color: #A03196; }
            .ansi-magenta-intense-bg { background-color: #A03196; }
            .ansi-cyan-fg { color: #60C6C8; }
            .ansi-cyan-bg { background-color: #60C6C8; }
            .ansi-cyan-intense-fg { color: #258F8F; }
            .ansi-cyan-intense-bg { background-color: #258F8F; }
            .ansi-white-fg { color: #C5C1B4; }
            .ansi-white-bg { background-color: #C5C1B4; }
            .ansi-white-intense-fg { color: #A1A6B2; }
            .ansi-white-intense-bg { background-color: #A1A6B2; }

            .ansi-default-inverse-fg { color: #FFFFFF; }
            .ansi-default-inverse-bg { background-color: #000000; }

            .ansi-bold { font-weight: bold; }
            .ansi-underline { text-decoration: underline; }


            div.nbinput.container div.input_area div[class*=highlight] > pre,
            div.nboutput.container div.output_area div[class*=highlight] > pre,
            div.nboutput.container div.output_area div[class*=highlight].math,
            div.nboutput.container div.output_area.rendered_html,
            div.nboutput.container div.output_area > div.output_javascript,
            div.nboutput.container div.output_area:not(.rendered_html) > img{
                padding: 5px;
                margin: 0;
            }

            /* fix copybtn overflow problem in chromium (needed for 'sphinx_copybutton') */
            div.nbinput.container div.input_area > div[class^='highlight'],
            div.nboutput.container div.output_area > div[class^='highlight']{
                overflow-y: hidden;
            }

            /* hide copybtn icon on prompts (needed for 'sphinx_copybutton') */
            .prompt .copybtn {
                display: none;
            }

            /* Some additional styling taken form the Jupyter notebook CSS */
            div.rendered_html table {
            border: none;
            border-collapse: collapse;
            border-spacing: 0;
            color: black;
            font-size: 12px;
            table-layout: fixed;
            }
            div.rendered_html thead {
            border-bottom: 1px solid black;
            vertical-align: bottom;
            }
            div.rendered_html tr,
            div.rendered_html th,
            div.rendered_html td {
            text-align: right;
            vertical-align: middle;
            padding: 0.5em 0.5em;
            line-height: normal;
            white-space: normal;
            max-width: none;
            border: none;
            }
            div.rendered_html th {
            font-weight: bold;
            }
            div.rendered_html tbody tr:nth-child(odd) {
            background: #f5f5f5;
            }
            div.rendered_html tbody tr:hover {
            background: rgba(66, 165, 245, 0.2);
            }
        </style>
        <script>
            (!window.navigator.onLine ? alert('needs internet connection') : '');
        </script>
    </head>
    <body>
    
    <script src="" crossorigin="anonymous"></script>
    <script type="application/vnd.jupyter.widget-state+json">
    {
      "version_major": 2,
      "version_minor": 0,
      "state": {
        "c4505bf9ce2845bba883818e8a3524c3": {
          "model_name": "VBoxModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "children": [
              "IPY_MODEL_948498a32a9e4abe8c1e0c90b93401fb",
              "IPY_MODEL_681d876318404d85a2abc82a7ad30f52",
              "IPY_MODEL_1cadecc281b54a1bb92c8fa90491934c"
            ],
            "layout": "IPY_MODEL_9f13fa2ab080492399b17a05d048b0fd"
          }
        },
        "948498a32a9e4abe8c1e0c90b93401fb": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_035a8e67bf47467abdd2a8515316cb83",
            "style": "IPY_MODEL_3b174cd84ef8426ea87ff4bf90a09dab",
            "value": "\n        <h1 id=\"summary_3BTKF\">Suite for Condition</h1>\n        <p>\n            The suite is composed of the following checks: Datasets Size Comparison.<br>\n            Each check may contain conditions (which will result in pass / fail / warning / error\n            , represented by \n    <span style=\"color: green;display:inline-block\">\u2713</span> /\n    <span style=\"color: red;display:inline-block\">\u2716</span> /\n    <span style=\"color: orange;font-weight:bold;display:inline-block\">!</span> /\n    <span style=\"color: firebrick;font-weight:bold;display:inline-block\">\u2048</span>\n    ) as well as other outputs such as plots or tables.<br>\n            Suites, checks and conditions can all be modified. Read more about\n            <a href=https://docs.deepchecks.com/en/stable/examples/guides/create_a_custom_suite.html?utm_source=display_output&utm_medium=referral&utm_campaign=suite_link target=\"_blank\">custom suites</a>.\n        </p>\n        "
          }
        },
        "035a8e67bf47467abdd2a8515316cb83": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "3b174cd84ef8426ea87ff4bf90a09dab": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "681d876318404d85a2abc82a7ad30f52": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_d20bf29123f646a68ee66d6141347c3b",
            "style": "IPY_MODEL_011db3c111844a93a8ce18082c371a00",
            "value": "<style>.jupyter-widgets.widget-tab > .p-TabBar .p-TabBar-tab {flex: 0 1 auto}</style>"
          }
        },
        "d20bf29123f646a68ee66d6141347c3b": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "011db3c111844a93a8ce18082c371a00": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "1cadecc281b54a1bb92c8fa90491934c": {
          "model_name": "TabModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_titles": {
              "0": "Checks With Conditions",
              "1": "Checks Without Conditions",
              "2": "Checks Without Output"
            },
            "children": [
              "IPY_MODEL_11dcf39cd1a7494fab1f387674d4b0a0",
              "IPY_MODEL_b80b66967a2c48b2b2a051a475be948e",
              "IPY_MODEL_0fc71d9097914ffcb3c6f2f19e256e5c"
            ],
            "layout": "IPY_MODEL_7095a0e22bad4ce58778a4b2a3c25bd4"
          }
        },
        "11dcf39cd1a7494fab1f387674d4b0a0": {
          "model_name": "VBoxModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [
              "rendered_html",
              "jp-RenderedHTMLCommon",
              "jp-RenderedHTML",
              "jp-OutputArea-output"
            ],
            "children": [
              "IPY_MODEL_1c04fa85dd0c4897900a57a4a9206448",
              "IPY_MODEL_1a9edb14cab0434b97dc33a21153400e",
              "IPY_MODEL_7d9506a6cd5d473d8fc4bc51b9f9a76c",
              "IPY_MODEL_00cad7eb1c8f4b57b500b0daedd4c720"
            ],
            "layout": "IPY_MODEL_96e15c1a18bf4761bbc0913057d536f9"
          }
        },
        "1c04fa85dd0c4897900a57a4a9206448": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_b891a3b9a5a64fc5b48bf779a6ce62b4",
            "style": "IPY_MODEL_26ed192c8bc64a778b1525fc7943788b",
            "value": "<h2>Conditions Summary</h2>"
          }
        },
        "b891a3b9a5a64fc5b48bf779a6ce62b4": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "26ed192c8bc64a778b1525fc7943788b": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "1a9edb14cab0434b97dc33a21153400e": {
          "model_name": "VBoxModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [
              "rendered_html",
              "jp-RenderedHTMLCommon",
              "jp-RenderedHTML",
              "jp-OutputArea-output"
            ],
            "children": [
              "IPY_MODEL_5106b31e92a5416ead3aa586c289e097"
            ],
            "layout": "IPY_MODEL_191c971ab5e04715bef8359679bcbbe5"
          }
        },
        "5106b31e92a5416ead3aa586c289e097": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_9031d5d96582428eaa0a83e308ed1e1a",
            "style": "IPY_MODEL_40d23215056449e6a1b9605b4e84e020",
            "value": "<style type=\"text/css\">\n#T_4cbbc table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_4cbbc thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_4cbbc tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_4cbbc th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_4cbbc td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_4cbbc\">\n  <thead>\n    <tr>\n      <th id=\"T_4cbbc_level0_col0\" class=\"col_heading level0 col0\" >Status</th>\n      <th id=\"T_4cbbc_level0_col1\" class=\"col_heading level0 col1\" >Check</th>\n      <th id=\"T_4cbbc_level0_col2\" class=\"col_heading level0 col2\" >Condition</th>\n      <th id=\"T_4cbbc_level0_col3\" class=\"col_heading level0 col3\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_4cbbc_row0_col0\" class=\"data row0 col0\" ><div style=\"color: firebrick;text-align: center;font-weight:bold\">\u2048</div></td>\n      <td id=\"T_4cbbc_row0_col1\" class=\"data row0 col1\" ><a href=#DatasetsSizeComparison_3BTKF>Datasets Size Comparison</a></td>\n      <td id=\"T_4cbbc_row0_col2\" class=\"data row0 col2\" >Test-Train ratio is between 0.4 to 0.6</td>\n      <td id=\"T_4cbbc_row0_col3\" class=\"data row0 col3\" >Exception in condition: NameError: name 'ConditionCategory' is not defined</td>\n    </tr>\n  </tbody>\n</table>\n"
          }
        },
        "9031d5d96582428eaa0a83e308ed1e1a": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "40d23215056449e6a1b9605b4e84e020": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "191c971ab5e04715bef8359679bcbbe5": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "7d9506a6cd5d473d8fc4bc51b9f9a76c": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_23883aabb3944b7db49cf9d0ad5ab664",
            "style": "IPY_MODEL_4971d93897db440e936d672810fee01f",
            "value": "<h2>Check With Conditions Output</h2>"
          }
        },
        "23883aabb3944b7db49cf9d0ad5ab664": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "4971d93897db440e936d672810fee01f": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "00cad7eb1c8f4b57b500b0daedd4c720": {
          "model_name": "VBoxModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [
              "rendered_html"
            ],
            "children": [
              "IPY_MODEL_a9f8f2fe33f94892b67d656c02d4de06"
            ],
            "layout": "IPY_MODEL_5a9234cb1cd84145b04ca6a9c2227720"
          }
        },
        "a9f8f2fe33f94892b67d656c02d4de06": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_495305639c03472db6b91ce1371dd1e8",
            "style": "IPY_MODEL_0b413c1ca5a546beb4e7cf3106dd3c76",
            "value": "<h4 id=\"DatasetsSizeComparison_3BTKF\">Datasets Size Comparison</h4><p>Verify test dataset size comparing it to the train dataset size. <a href=\"https://docs.deepchecks.com/stable/examples/tabular/checks/methodology/examples/plot_datasets_size_comparison.html?utm_source=display_output&utm_medium=referral&utm_campaign=check_link\" target=\"_blank\">Read More...</a></p><h5>Conditions Summary</h5><style type=\"text/css\">\n#T_f8503 table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_f8503 thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_f8503 tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_f8503 th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_f8503 td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_f8503\">\n  <thead>\n    <tr>\n      <th id=\"T_f8503_level0_col0\" class=\"col_heading level0 col0\" >Status</th>\n      <th id=\"T_f8503_level0_col1\" class=\"col_heading level0 col1\" >Condition</th>\n      <th id=\"T_f8503_level0_col2\" class=\"col_heading level0 col2\" >More Info</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_f8503_row0_col0\" class=\"data row0 col0\" ><div style=\"color: firebrick;text-align: center;font-weight:bold\">\u2048</div></td>\n      <td id=\"T_f8503_row0_col1\" class=\"data row0 col1\" >Test-Train ratio is between 0.4 to 0.6</td>\n      <td id=\"T_f8503_row0_col2\" class=\"data row0 col2\" >Exception in condition: NameError: name 'ConditionCategory' is not defined</td>\n    </tr>\n  </tbody>\n</table>\n<h5>Additional Outputs</h5><style type=\"text/css\">\n#T_0fbd3 table {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_0fbd3 thead {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_0fbd3 tbody {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_0fbd3 th {\n  text-align: left;\n  white-space: pre-wrap;\n}\n#T_0fbd3 td {\n  text-align: left;\n  white-space: pre-wrap;\n}\n</style>\n<table id=\"T_0fbd3\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_0fbd3_level0_col0\" class=\"col_heading level0 col0\" >Train</th>\n      <th id=\"T_0fbd3_level0_col1\" class=\"col_heading level0 col1\" >Test</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_0fbd3_level0_row0\" class=\"row_heading level0 row0\" >Size</th>\n      <td id=\"T_0fbd3_row0_col0\" class=\"data row0 col0\" >9</td>\n      <td id=\"T_0fbd3_row0_col1\" class=\"data row0 col1\" >3</td>\n    </tr>\n  </tbody>\n</table>\n<br><a href=\"#summary_3BTKF\" style=\"font-size: 14px\">Go to top</a>"
          }
        },
        "495305639c03472db6b91ce1371dd1e8": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "0b413c1ca5a546beb4e7cf3106dd3c76": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "5a9234cb1cd84145b04ca6a9c2227720": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "96e15c1a18bf4761bbc0913057d536f9": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "b80b66967a2c48b2b2a051a475be948e": {
          "model_name": "VBoxModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [
              "rendered_html",
              "jp-RenderedHTMLCommon",
              "jp-RenderedHTML",
              "jp-OutputArea-output"
            ],
            "children": [
              "IPY_MODEL_6a28e1785d954584b985d207ce7fc9aa",
              "IPY_MODEL_00d5323af6574629a911a28020d8a03f"
            ],
            "layout": "IPY_MODEL_248570fa742b46158f40d1469ca76925"
          }
        },
        "6a28e1785d954584b985d207ce7fc9aa": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_8ebf44e8cb304d46a06fed5be6983439",
            "style": "IPY_MODEL_efd77d09063542ec9b0e373878b7657b",
            "value": "<h2>Check Without Conditions Output</h2>"
          }
        },
        "8ebf44e8cb304d46a06fed5be6983439": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "efd77d09063542ec9b0e373878b7657b": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "00d5323af6574629a911a28020d8a03f": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_3183b20d8dd1418da80fcd06d066c780",
            "style": "IPY_MODEL_a265c1729d064b51ab1509ac7d2e4cda",
            "value": "<p>No outputs to show.</p>"
          }
        },
        "3183b20d8dd1418da80fcd06d066c780": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "a265c1729d064b51ab1509ac7d2e4cda": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "248570fa742b46158f40d1469ca76925": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "0fc71d9097914ffcb3c6f2f19e256e5c": {
          "model_name": "VBoxModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "children": [
              "IPY_MODEL_d0795efcb9ce4471a62f77cebdaa59b8"
            ],
            "layout": "IPY_MODEL_02d645dd95f340eda156d0555479e3fe"
          }
        },
        "d0795efcb9ce4471a62f77cebdaa59b8": {
          "model_name": "HTMLModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "layout": "IPY_MODEL_62a3e8fc1f4c43738afafb7ca4a2b845",
            "style": "IPY_MODEL_f4feca8d2e1e48468105cf2e6496794a",
            "value": "<p>No outputs to show.</p>"
          }
        },
        "62a3e8fc1f4c43738afafb7ca4a2b845": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "f4feca8d2e1e48468105cf2e6496794a": {
          "model_name": "DescriptionStyleModel",
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "state": {}
        },
        "02d645dd95f340eda156d0555479e3fe": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "7095a0e22bad4ce58778a4b2a3c25bd4": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        },
        "9f13fa2ab080492399b17a05d048b0fd": {
          "model_name": "LayoutModel",
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "state": {}
        }
      }
    }
    </script>
    <script type="application/vnd.jupyter.widget-view+json">
    {"version_major": 2, "version_minor": 0, "model_id": "c4505bf9ce2845bba883818e8a3524c3"}
    </script>

    </body>
    </html>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 160-165

Set Custom Condition Category
=============================
When writing your own condition logic, you can decide to mark a condition result
as either fail or warn, by passing the category to the ConditionResult object.
For example we can even write condition which sets the category based on severity of the result:

.. GENERATED FROM PYTHON SOURCE LINES 165-181

.. code-block:: default


    from deepchecks.core import ConditionResult, ConditionCategory

    # Our parameters for the condition
    low_threshold = 0.3
    high_threshold = 0.7

    # Create the condition function for check `DatasetsSizeComparison`
    def custom_condition(value: dict): 
        ratio = value['Test'] / value['Train']
        if low_threshold <= ratio <= high_threshold:
            return ConditionResult(ConditionCategory.PASS)
        elif ratio < low_threshold:
            return ConditionResult(ConditionCategory.FAIL, f'Test-Train ratio is {ratio:.2}', ConditionCategory.FAIL)
        else:
            return ConditionResult(ConditionCategory.FAIL, f'Test-Train ratio is {ratio:.2}', ConditionCategory.WARN)








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.083 seconds)


.. _sphx_glr_download_user-guide_general_customizations_examples_plot_configure_check_conditions.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_configure_check_conditions.py <plot_configure_check_conditions.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_configure_check_conditions.ipynb <plot_configure_check_conditions.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
