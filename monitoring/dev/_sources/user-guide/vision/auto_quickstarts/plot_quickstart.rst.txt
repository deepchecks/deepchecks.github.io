
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "user-guide/vision/auto_quickstarts/plot_quickstart.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_user-guide_vision_auto_quickstarts_plot_quickstart.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_user-guide_vision_auto_quickstarts_plot_quickstart.py:


.. _quick_vision:

Quickstart - Get Deepchecks Monitoring Up and Running for Computer Vision Data
******************************************************************************

This quickstart is the perfect starting point for monitoring your vision model using Deepchecks Monitoring. We'll
quickly walk you through setting up a model to represent your task in the system, uploading data, setting the
computed checks and alerts in the system and seeing some results for your effort. We'll be using the
`Mask Detection Dataset <https://www.kaggle.com/datasets/andrewmvd/face-mask-detection>`__, in which
the goal of the model is to detect faces, and classify whether the face is wearing a mask, partially wearing a mask or not wearing a mask.

.. code-block:: bash

    # Before we start, if you don't have deepchecks-client installed yet, run:
    import sys
    !{sys.executable} -m pip install -U deepchecks-client

    # or install using pip from your python environment

Creating a New Model Version
============================

Our first step is to create a new model version in the system. A model in Deepchecks Monitoring
represents an ML pipeline performing a single task in production through time,
where the model's versions and the structure of the data may change over time.
Our terminology to refer to a specific version within a model is "model version".

The easiest way to create a model version, which is demonstrated
here, requires a :doc:`Vision Data <deepchecks:user-guide/vision/data-classes>` object
containing the reference data for the version. Reference data is a dataset to which we wish to compare
our production data stream. Typically, this will be the dataset on which the model was trained.
Providing reference data is optional yet many important :doc:`checks <deepchecks:user-guide/general/deepchecks_hierarchy>`
such as :doc:`Train Test Prediction Drift (Vision Version) <deepchecks:checks_gallery/vision/model_evaluation/plot_train_test_prediction_drift>`
cannot run without it.

.. GENERATED FROM PYTHON SOURCE LINES 40-47

Preparing the Reference Data
-------------------------------

In this example we're loading a pre-made VisionData object containing the data at the first time stamp, with which
the model was trained. In order to create your own VisionData object from your own pytorch dataloader
please read the :doc:`Vision Data <deepchecks:user-guide/vision/data-classes/index>` documentation or follow the
appropriate deepchecks computer vision :doc:`quickstart <deepchecks:user-guide/vision/auto_quickstarts/index>`.

.. GENERATED FROM PYTHON SOURCE LINES 47-52

.. code-block:: default


    from deepchecks.vision.datasets.detection.mask import load_dataset, load_model, get_data_timestamps
    ref_dataset = load_dataset(day_index=0, object_type='VisionData', shuffle=False)
    model = load_model()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/416968083 [00:00<?, ?it/s]      0%|          | 51200/416968083 [00:00<26:08, 265766.82it/s]      0%|          | 242688/416968083 [00:00<10:02, 692176.89it/s]      0%|          | 968704/416968083 [00:00<02:35, 2683054.45it/s]      1%|          | 2085888/416968083 [00:00<01:40, 4123210.33it/s]      1%|1         | 4625408/416968083 [00:00<00:43, 9510173.59it/s]      2%|1         | 7100416/416968083 [00:00<00:30, 13558880.39it/s]      2%|2         | 9852928/416968083 [00:00<00:23, 17401019.86it/s]      3%|3         | 12669952/416968083 [00:01<00:24, 16502345.12it/s]      4%|3         | 15422464/416968083 [00:01<00:20, 19208050.45it/s]      4%|4         | 18327552/416968083 [00:01<00:18, 21763471.07it/s]      5%|5         | 21902336/416968083 [00:01<00:15, 25547011.12it/s]      6%|5         | 24995840/416968083 [00:01<00:14, 27048391.63it/s]      7%|6         | 27843584/416968083 [00:01<00:14, 27382449.16it/s]      7%|7         | 30683136/416968083 [00:01<00:17, 22520406.70it/s]      8%|8         | 34007040/416968083 [00:01<00:15, 25213449.48it/s]      9%|8         | 37131264/416968083 [00:02<00:14, 26538869.11it/s]     10%|9         | 40773632/416968083 [00:02<00:12, 29226921.93it/s]     11%|#         | 43832320/416968083 [00:02<00:12, 29345830.71it/s]     11%|#1        | 46863360/416968083 [00:02<00:15, 24191342.44it/s]     12%|#2        | 50336768/416968083 [00:02<00:13, 26698704.37it/s]     13%|#2        | 53752832/416968083 [00:02<00:12, 28257297.24it/s]     14%|#3        | 57283584/416968083 [00:02<00:14, 25057205.47it/s]     14%|#4        | 60299264/416968083 [00:02<00:13, 26291750.85it/s]     15%|#5        | 63698944/416968083 [00:03<00:12, 28271932.10it/s]     16%|#5        | 66669568/416968083 [00:03<00:12, 28367603.78it/s]     17%|#6        | 69817344/416968083 [00:03<00:11, 29140311.56it/s]     18%|#7        | 73434112/416968083 [00:03<00:11, 31119508.83it/s]     18%|#8        | 76613632/416968083 [00:03<00:11, 30867099.56it/s]     19%|#9        | 79747072/416968083 [00:03<00:13, 25820798.41it/s]     20%|#9        | 83006464/416968083 [00:03<00:12, 27544746.91it/s]     21%|##        | 86600704/416968083 [00:03<00:11, 29787139.27it/s]     22%|##1       | 89790464/416968083 [00:03<00:10, 30285110.23it/s]     22%|##2       | 93235200/416968083 [00:03<00:10, 31460152.99it/s]     23%|##3       | 96455680/416968083 [00:04<00:10, 31234396.84it/s]     24%|##3       | 99701760/416968083 [00:04<00:10, 31314118.31it/s]     25%|##4       | 103119872/416968083 [00:04<00:09, 32144837.10it/s]     26%|##5       | 106501120/416968083 [00:04<00:11, 27509514.33it/s]     26%|##6       | 109794304/416968083 [00:04<00:10, 28918731.67it/s]     27%|##7       | 113205248/416968083 [00:04<00:10, 30326939.82it/s]     28%|##7       | 116544512/416968083 [00:04<00:09, 31175556.39it/s]     29%|##8       | 119968768/416968083 [00:04<00:09, 32016152.59it/s]     30%|##9       | 123227136/416968083 [00:04<00:09, 31766665.97it/s]     30%|###       | 126522368/416968083 [00:05<00:09, 31928149.96it/s]     31%|###1      | 129872896/416968083 [00:05<00:08, 32387758.40it/s]     32%|###1      | 133133312/416968083 [00:05<00:08, 32386803.51it/s]     33%|###2      | 136387584/416968083 [00:05<00:10, 27124682.03it/s]     34%|###3      | 139885568/416968083 [00:05<00:09, 29173596.02it/s]     34%|###4      | 143086592/416968083 [00:05<00:09, 29914948.65it/s]     35%|###5      | 146461696/416968083 [00:05<00:08, 30970607.63it/s]     36%|###5      | 149915648/416968083 [00:05<00:08, 31987399.66it/s]     37%|###6      | 153277440/416968083 [00:05<00:08, 32459036.37it/s]     38%|###7      | 156568576/416968083 [00:06<00:08, 32469212.35it/s]     38%|###8      | 159904768/416968083 [00:06<00:07, 32731242.28it/s]     39%|###9      | 163201024/416968083 [00:06<00:08, 31393066.43it/s]     40%|###9      | 166367232/416968083 [00:06<00:08, 30287457.89it/s]     41%|####      | 169448448/416968083 [00:06<00:08, 28937812.38it/s]     41%|####1     | 172594176/416968083 [00:06<00:08, 29078173.95it/s]     42%|####2     | 175805440/416968083 [00:06<00:08, 29238275.62it/s]     43%|####2     | 178951168/416968083 [00:06<00:08, 29634134.90it/s]     44%|####3     | 182227968/416968083 [00:06<00:07, 30096969.13it/s]     45%|####4     | 185833472/416968083 [00:07<00:07, 31803775.98it/s]     45%|####5     | 189248512/416968083 [00:07<00:07, 32484959.71it/s]     46%|####6     | 192508928/416968083 [00:07<00:06, 32403303.21it/s]     47%|####6     | 195849216/416968083 [00:07<00:06, 32697618.03it/s]     48%|####7     | 199126016/416968083 [00:07<00:07, 30320342.95it/s]     49%|####8     | 202450944/416968083 [00:07<00:06, 31144954.09it/s]     49%|####9     | 205597696/416968083 [00:07<00:06, 30724124.20it/s]     50%|#####     | 208692224/416968083 [00:07<00:06, 30776686.37it/s]     51%|#####     | 211969024/416968083 [00:07<00:06, 31355808.97it/s]     52%|#####1    | 215165952/416968083 [00:07<00:06, 31535834.37it/s]     52%|#####2    | 218329088/416968083 [00:08<00:06, 31402663.74it/s]     53%|#####3    | 221475840/416968083 [00:08<00:06, 31398208.71it/s]     54%|#####3    | 224744448/416968083 [00:08<00:06, 29049584.45it/s]     55%|#####4    | 227906560/416968083 [00:08<00:06, 29603105.54it/s]     55%|#####5    | 231298048/416968083 [00:08<00:06, 30823311.40it/s]     56%|#####6    | 234607616/416968083 [00:08<00:05, 31476891.99it/s]     57%|#####7    | 237802496/416968083 [00:08<00:06, 29037716.05it/s]     58%|#####7    | 241166336/416968083 [00:08<00:05, 30311861.78it/s]     59%|#####8    | 244540416/416968083 [00:08<00:05, 31283929.17it/s]     59%|#####9    | 247911424/416968083 [00:09<00:05, 31982112.66it/s]     60%|######    | 251270144/416968083 [00:09<00:05, 32390844.71it/s]     61%|######1   | 254531584/416968083 [00:09<00:05, 32416134.40it/s]     62%|######1   | 257788928/416968083 [00:09<00:04, 31902428.49it/s]     63%|######2   | 260992000/416968083 [00:09<00:04, 31587482.60it/s]     63%|######3   | 264159232/416968083 [00:09<00:05, 30331539.36it/s]     64%|######4   | 267392000/416968083 [00:09<00:04, 30584402.80it/s]     65%|######4   | 270701568/416968083 [00:09<00:04, 30773338.17it/s]     66%|######5   | 273945600/416968083 [00:09<00:04, 31168118.50it/s]     67%|######6   | 277285888/416968083 [00:09<00:04, 31818212.19it/s]     67%|######7   | 280474624/416968083 [00:10<00:04, 31310188.35it/s]     68%|######8   | 283611136/416968083 [00:10<00:04, 29719482.82it/s]     69%|######8   | 286601216/416968083 [00:10<00:04, 29626189.47it/s]     70%|######9   | 290231296/416968083 [00:10<00:04, 31529215.35it/s]     70%|#######   | 293465088/416968083 [00:10<00:03, 31764351.52it/s]     71%|#######1  | 296653824/416968083 [00:10<00:03, 31657153.70it/s]     72%|#######1  | 299832320/416968083 [00:10<00:03, 31557984.75it/s]     73%|#######2  | 303350784/416968083 [00:10<00:03, 32628636.87it/s]     74%|#######3  | 306620416/416968083 [00:10<00:03, 29728255.24it/s]     74%|#######4  | 309842944/416968083 [00:11<00:03, 30370435.57it/s]     75%|#######5  | 313005056/416968083 [00:11<00:03, 30361222.53it/s]     76%|#######5  | 316280832/416968083 [00:11<00:03, 31047267.18it/s]     77%|#######6  | 319558656/416968083 [00:11<00:03, 31504007.16it/s]     77%|#######7  | 322737152/416968083 [00:11<00:03, 29437096.47it/s]     78%|#######8  | 326297600/416968083 [00:11<00:02, 31166620.02it/s]     79%|#######9  | 329452544/416968083 [00:11<00:02, 30991514.98it/s]     80%|#######9  | 332800000/416968083 [00:11<00:02, 31707178.73it/s]     81%|########  | 336073728/416968083 [00:11<00:02, 31798233.85it/s]     81%|########1 | 339268608/416968083 [00:11<00:02, 31454052.11it/s]     82%|########2 | 342425600/416968083 [00:12<00:02, 31440030.31it/s]     83%|########2 | 345674752/416968083 [00:12<00:02, 31748366.32it/s]     84%|########3 | 348918784/416968083 [00:12<00:02, 31952610.19it/s]     84%|########4 | 352118784/416968083 [00:12<00:02, 31519404.01it/s]     85%|########5 | 355423232/416968083 [00:12<00:01, 31954288.78it/s]     86%|########6 | 358622208/416968083 [00:12<00:01, 31355311.58it/s]     87%|########6 | 361812992/416968083 [00:12<00:01, 31339307.34it/s]     88%|########7 | 365170688/416968083 [00:12<00:01, 31997257.10it/s]     88%|########8 | 368374784/416968083 [00:12<00:01, 31074627.34it/s]     89%|########9 | 371489792/416968083 [00:12<00:01, 30645354.71it/s]     90%|########9 | 374586368/416968083 [00:13<00:01, 30738369.88it/s]     91%|######### | 377721856/416968083 [00:13<00:01, 30712759.59it/s]     91%|#########1| 380965888/416968083 [00:13<00:01, 30229296.25it/s]     92%|#########2| 384193536/416968083 [00:13<00:01, 30337875.39it/s]     93%|#########2| 387355648/416968083 [00:13<00:00, 30649012.44it/s]     94%|#########3| 390670336/416968083 [00:13<00:00, 31377654.97it/s]     94%|#########4| 393909248/416968083 [00:13<00:00, 30594022.08it/s]     95%|#########5| 397342720/416968083 [00:13<00:00, 31673215.24it/s]     96%|#########6| 400561152/416968083 [00:13<00:00, 30466013.51it/s]     97%|#########6| 403837952/416968083 [00:14<00:00, 31090758.91it/s]     98%|#########7| 407016448/416968083 [00:14<00:00, 31160522.48it/s]     98%|#########8| 410474496/416968083 [00:14<00:00, 32157813.80it/s]     99%|#########9| 413700096/416968083 [00:14<00:00, 31317300.75it/s]    100%|#########9| 416842752/416968083 [00:14<00:00, 30413897.90it/s]    416968704it [00:14, 28864641.02it/s]                               




.. GENERATED FROM PYTHON SOURCE LINES 53-57

Predictions must be given in one of the following formats:

1. A list predictions for each image in the dataset, according to the order they are loaded from the dataloader.
2. A dictionary where the values are the predictions and the keys are the image indices in the pytorch Dataset object.

.. GENERATED FROM PYTHON SOURCE LINES 58-64

.. code-block:: default


    ref_predictions = []
    for batch in ref_dataset:
        ref_predictions.extend(list(model(batch[0])))









.. GENERATED FROM PYTHON SOURCE LINES 65-75

Creating a model version
------------------------
In order to create a model version we must first create an organization in the
`deepchecks system <https://app.deepchecks.com/>`_ and generate a personal
API token using the application's dashboard.

.. image:: /_static/images/quickstart/get_api_token.png
   :width: 600

Using the API token we can now create a new model version and upload the reference data.

.. GENERATED FROM PYTHON SOURCE LINES 75-92

.. code-block:: default


    import os
    import typing as t
    import numpy as np
    import torch
    from deepchecks_client import DeepchecksClient

    host = os.environ.get('DEEPCHECKS_API_HOST')  # Replace this with https://app.deepchecks.com
    # note to put the API token in your environment variables. Or alternatively (less recommended):
    # os.environ['DEEPCHECKS_API_TOKEN'] = 'uncomment-this-line-and-insert-your-api-token-here'
    model_name = 'Mask Data'
    dc_client = DeepchecksClient(host=host, token=os.getenv('DEEPCHECKS_API_TOKEN'))
    model_version = dc_client.create_vision_model_version(model_name=model_name, version_name='v1',
                                                          reference_dataset=ref_dataset,
                                                          reference_predictions=ref_predictions,
                                                          task_type='vision_detection')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Model Mask Data was successfully created!. Default checks, monitors and alerts added.
    Reference data uploaded.




.. GENERATED FROM PYTHON SOURCE LINES 93-103

Uploading Production Data
=========================

No matter what else you'll be doing with Deepchecks Monitoring, it will start by uploading some production data that
you want monitored. In this the mask data collected for dates ranging from the start of July 2022 to the end of
August 2022. For simplicity and quicker runtime, we'll upload only the last few days in this tutorial.
Then, we'll update the labels for some of the samples we uploaded.

Uploading Data and Predictions
------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 103-139

.. code-block:: default


    number_of_batches_to_upload = 5  # Limited to save time running this tutorial
    batch_size = 32

    # Only upload the last few days.
    daily_timestamps = get_data_timestamps()[55:]
    # To upload all production data, use:
    # daily_timestamps = get_data_timestamps()[1:]
    # (Disregard the first day, which is the reference data)


    # Defining a helper function that will convert the label format to the one supported by Deepchecks Monitoring.
    def extract_label_dict(in_dict: t.Dict[str, torch.Tensor]) -> torch.Tensor:
        return torch.concat([in_dict['labels'].reshape((-1, 1)), in_dict['boxes']], axis=1)


    for day_idx, timestamp in enumerate(daily_timestamps):
        # Load the DataLoader for the current day
        data_loader = load_dataset(day_index=day_idx, object_type='DataLoader', batch_size=batch_size)

        for batch_id, batch in enumerate(data_loader):
            # We also upload only a small number of batches in this example to save time.
            # Remove this for loop to upload all data from chosen timestamps.
            if batch_id >= number_of_batches_to_upload:
                break

            indices = [f'{timestamp}_{batch_id}_{i}' for i in range(batch_size)]
            timestamps = [timestamp] * batch_size

            model_version.log_batch(sample_id=indices,
                                    timestamps=timestamps,
                                    images=[np.array(x.permute(1, 2, 0)) * 255 for x in batch[0]],
                                    labels=[extract_label_dict(tensor) for tensor in batch[1]],
                                    predictions=model(batch[0])
                                    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    32 new samples were successfully logged.
    32 new samples were successfully logged.
    32 new samples were successfully logged.
    32 new samples were successfully logged.
    32 new samples were successfully logged.
    32 new samples were successfully logged.
    32 new samples were successfully logged.
    32 new samples were successfully logged.
    32 new samples were successfully logged.
    32 new samples were successfully logged.
    32 new samples were successfully logged.
    32 new samples were successfully logged.
    32 new samples were successfully logged.
    32 new samples were successfully logged.
    32 new samples were successfully logged.
    32 new samples were successfully logged.
    32 new samples were successfully logged.
    32 new samples were successfully logged.
    32 new samples were successfully logged.
    32 new samples were successfully logged.
    32 new samples were successfully logged.
    32 new samples were successfully logged.
    32 new samples were successfully logged.
    32 new samples were successfully logged.
    32 new samples were successfully logged.




.. GENERATED FROM PYTHON SOURCE LINES 140-151

Images, labels and prediction must be provided in specific required formats.
The required format for the can be found at :doc:`here <deepchecks:user-guide/vision/data-classes/index>`.
Please look at the following entries:

- Image format - can be found at :doc:`here <deepchecks:user-guide/vision/data-classes/VisionData>`.
- Label & prediction format - look at documentation of the respective VisionData subclass according to your task type

In this example, the changes needed in the data format are pretty trivial, but in more complex cases
you may either implement them in dedicated functions (such as the ``extract_label_dict`` function here), or use
the ``batch_to_image`` and other formatting methods you already implemented as part of building your
Deepchecks VisionData object.

.. GENERATED FROM PYTHON SOURCE LINES 154-158

Updating the Labels
-------------------
In many real world scenarios, the labels of the data are only available at a later time. We can update them
in hindsight using the global sample ids. Here we update the last sample that was uploaded.

.. GENERATED FROM PYTHON SOURCE LINES 158-163

.. code-block:: default


    model_version.update_sample(sample_id=indices[-1],
                                label=[extract_label_dict(tensor) for tensor in batch[1]][-1])
    model_version.send()








.. GENERATED FROM PYTHON SOURCE LINES 164-171

You can update multiple samples. Once done updating all desired samples, call the `send` method to upload the samples
and make the updates appear in the system.

When updating multiple samples we can verify that status of the process that is running in the background by checking
the amount of samples that have been processed and uploaded by the system, using:
model_version.time_window_statistics(min(prod_data[timestamp]), max(prod_data[timestamp]))
upon completion, the statistics should equal the total number of samples sent

.. GENERATED FROM PYTHON SOURCE LINES 173-185

The Dashboard Screen
====================
After creating the model version and uploading the data, we can now see the monitors within the
`application dashboard <https://app.deepchecks.com/>`_.
The monitors below are generated by default when a new model is created, all versions of the same model are tracked
within the same monitor.

.. image:: /_static/images/quickstart/vision_dashboard_w_defaults.png
   :width: 600

Note: The displayed dashboard was created using all the production data, not only the last few days


.. GENERATED FROM PYTHON SOURCE LINES 187-188

If we wish to remove the model to free up space for new models we can do it in the following way:

.. GENERATED FROM PYTHON SOURCE LINES 188-191

.. code-block:: default


    # CAUTION: This will delete the model, all model versions, and all associated datasets.
    dc_client.delete_model(model_name)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The following model was successfully deleted: Mask Data





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  57.761 seconds)


.. _sphx_glr_download_user-guide_vision_auto_quickstarts_plot_quickstart.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_quickstart.py <plot_quickstart.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_quickstart.ipynb <plot_quickstart.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
